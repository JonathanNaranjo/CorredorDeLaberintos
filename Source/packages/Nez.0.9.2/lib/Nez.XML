<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nez</name>
    </assembly>
    <members>
        <member name="M:Nez.Debug.timeAction(System.Action,System.UInt32)">
            <summary>
            times how long an Action takes to run and returns the TimeSpan
            </summary>
            <returns>The action.</returns>
            <param name="action">Action.</param>
        </member>
        <member name="T:Nez.Debug.Colors">
            <summary>
            we store all the default colors for various systems here such as collider debug rendering, Debug.drawText and others. The naming
            convention is CLASS-THING where possible to make it clear where it is used.
            </summary>
        </member>
        <member name="F:Nez.Camera.positionZ3D">
            <summary>
            z-position of the 3D camera projections. Affects the fov greatly. Lower values make the objects appear very long in the z-direction.
            </summary>
        </member>
        <member name="F:Nez.Camera.nearClipPlane3D">
            <summary>
            near clip plane of the 3D camera projection
            </summary>
        </member>
        <member name="F:Nez.Camera.farClipPlane3D">
            <summary>
            far clip plane of the 3D camera projection
            </summary>
        </member>
        <member name="P:Nez.Camera.position">
            <summary>
            shortcut to entity.transform.position
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Nez.Camera.rotation">
            <summary>
            shortcut to entity.transform.rotation
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:Nez.Camera.rawZoom">
            <summary>
            raw zoom value. This is the exact value used for the scale matrix. Default is 1.
            </summary>
            <value>The raw zoom.</value>
        </member>
        <member name="P:Nez.Camera.zoom">
            <summary>
            the zoom value should be between -1 and 1. This value is then translated to be from minimumZoom to maximumZoom. This lets you set
            appropriate minimum/maximum values then use a more intuitive -1 to 1 mapping to change the zoom.
            </summary>
            <value>The zoom.</value>
        </member>
        <member name="P:Nez.Camera.minimumZoom">
            <summary>
            minimum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 0.3
            </summary>
            <value>The minimum zoom.</value>
        </member>
        <member name="P:Nez.Camera.maximumZoom">
            <summary>
            maximum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 3
            </summary>
            <value>The maximum zoom.</value>
        </member>
        <member name="P:Nez.Camera.bounds">
            <summary>
            world-space bounds of the camera. useful for culling.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Nez.Camera.transformMatrix">
            <summary>
            used to convert from world coordinates to screen
            </summary>
            <value>The transform matrix.</value>
        </member>
        <member name="P:Nez.Camera.inverseTransformMatrix">
            <summary>
            used to convert from screen coordinates to world
            </summary>
            <value>The inverse transform matrix.</value>
        </member>
        <member name="P:Nez.Camera.projectionMatrix">
            <summary>
            the 2D Cameras projection matrix
            </summary>
            <value>The projection matrix.</value>
        </member>
        <member name="P:Nez.Camera.viewProjectionMatrix">
            <summary>
            gets the view-projection matrix which is the transformMatrix * the projection matrix
            </summary>
            <value>The view projection matrix.</value>
        </member>
        <member name="P:Nez.Camera.projectionMatrix3D">
            <summary>
            returns a perspective projection for this camera for use when rendering 3D objects
            </summary>
            <value>The projection matrix3 d.</value>
        </member>
        <member name="P:Nez.Camera.viewMatrix3D">
            <summary>
            returns a view Matrix via CreateLookAt for this camera for use when rendering 3D objects
            </summary>
            <value>The view matrix3 d.</value>
        </member>
        <member name="M:Nez.Camera.onSceneRenderTargetSizeChanged(System.Int32,System.Int32)">
            <summary>
            when the scene render target size changes we update the cameras origin and adjust the position to keep it where it was
            </summary>
            <param name="newWidth">New width.</param>
            <param name="newHeight">New height.</param>
        </member>
        <member name="M:Nez.Camera.setInset(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            sets the amount used to inset the camera bounds from the viewport edge
            </summary>
            <param name="left">The amount to set the left bounds in from the viewport.</param>
            <param name="right">The amount to set the right bounds in from the viewport.</param>
            <param name="top">The amount to set the top bounds in from the viewport.</param>
            <param name="bottom">The amount to set the bottom bounds in from the viewport.</param>
        </member>
        <member name="M:Nez.Camera.setPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            shortcut to entity.transform.setPosition
            </summary>
            <param name="position">Position.</param>
        </member>
        <member name="M:Nez.Camera.setRotation(System.Single)">
            <summary>
            shortcut to entity.transform.setRotation
            </summary>
            <param name="radians">Radians.</param>
        </member>
        <member name="M:Nez.Camera.setRotationDegrees(System.Single)">
            <summary>
            shortcut to entity.transform.setRotationDegrees
            </summary>
            <param name="degrees">Degrees.</param>
        </member>
        <member name="M:Nez.Camera.setZoom(System.Single)">
            <summary>
            sets the the zoom value which should be between -1 and 1. This value is then translated to be from minimumZoom to maximumZoom.
            This lets you set appropriate minimum/maximum values then use a more intuitive -1 to 1 mapping to change the zoom.
            </summary>
            <param name="zoom">Zoom.</param>
        </member>
        <member name="M:Nez.Camera.setMinimumZoom(System.Single)">
            <summary>
            minimum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 0.3
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.Camera.setMaximumZoom(System.Single)">
            <summary>
            maximum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 3
            </summary>
            <param name="maxZoom">Max zoom.</param>
        </member>
        <member name="M:Nez.Camera.forceMatrixUpdate">
            <summary>
            this forces the matrix and bounds dirty
            </summary>
        </member>
        <member name="M:Nez.Camera.worldToScreenPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            converts a point from world coordinates to screen
            </summary>
            <returns>The to screen point.</returns>
            <param name="worldPosition">World position.</param>
        </member>
        <member name="M:Nez.Camera.screenToWorldPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            converts a point from screen coordinates to world
            </summary>
            <returns>The to world point.</returns>
            <param name="screenPosition">Screen position.</param>
        </member>
        <member name="M:Nez.Camera.screenToWorldPoint(Microsoft.Xna.Framework.Point)">
            <summary>
            converts a point from screen coordinates to world
            </summary>
            <returns>The to world point.</returns>
            <param name="screenPosition">Screen position.</param>
        </member>
        <member name="M:Nez.Camera.mouseToWorldPoint">
            <summary>
            returns the mouse position in world space
            </summary>
            <returns>The to world point.</returns>
        </member>
        <member name="M:Nez.Camera.touchToWorldPoint(Microsoft.Xna.Framework.Input.Touch.TouchLocation)">
            <summary>
            returns the touch position in world space
            </summary>
            <returns>The to world point.</returns>
        </member>
        <member name="T:Nez.Component">
            <summary>
            Execution order:
            - onAddedToEntity
            - onAwake (all other components added this frame will have been added to the Entity at this point
            - onEnabled
            
            Removal:
            - onRemovedFromEntity
            
            </summary>
        </member>
        <member name="F:Nez.Component.entity">
            <summary>
            the Entity this Component is attached to
            </summary>
        </member>
        <member name="P:Nez.Component.transform">
            <summary>
            shortcut to entity.transform
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:Nez.Component.enabled">
            <summary>
            true if the Component is enabled and the Entity is enabled. When enabled this Components lifecycle methods will be called.
            Changes in state result in onEnabled/onDisable being called.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.Component.updateOrder">
            <summary>
            update order of the Components on this Entity
            </summary>
            <value>The order.</value>
        </member>
        <member name="M:Nez.Component.initialize">
            <summary>
            called when this Component has had its Entity assigned but it is NOT yet added to the live Components list of the Entity yet. Useful
            for things like physics Components that need to access the Transform to modify collision body properties.
            </summary>
        </member>
        <member name="M:Nez.Component.onAddedToEntity">
            <summary>
            Called when this component is added to a scene after all pending component changes are committed. At this point, the entity field
            is set and the entity.scene is also set.
            </summary>
        </member>
        <member name="M:Nez.Component.onRemovedFromEntity">
            <summary>
            Called when this component is removed from its entity. Do all cleanup here.
            </summary>
        </member>
        <member name="M:Nez.Component.onEntityTransformChanged(Nez.Transform.Component)">
            <summary>
            called when the entity's position changes. This allows components to be aware that they have moved due to the parent
            entity moving.
            </summary>
        </member>
        <member name="M:Nez.Component.onEnabled">
            <summary>
            called when the parent Entity or this Component is enabled
            </summary>
        </member>
        <member name="M:Nez.Component.onDisabled">
            <summary>
            called when the parent Entity or this Component is disabled
            </summary>
        </member>
        <member name="M:Nez.Component.clone">
            <summary>
            creates a clone of this Component. The default implementation is just a MemberwiseClone so if a Component has object references
            that need to be cloned this method should be overriden.
            </summary>
        </member>
        <member name="F:Nez.Entity.scene">
            <summary>
            the scene this entity belongs to
            </summary>
        </member>
        <member name="F:Nez.Entity.name">
            <summary>
            entity name. useful for doing scene-wide searches for an entity
            </summary>
        </member>
        <member name="F:Nez.Entity.transform">
            <summary>
            encapsulates the Entity's position/rotation/scale and allows setting up a hieararchy
            </summary>
        </member>
        <member name="F:Nez.Entity.components">
            <summary>
            list of all the components currently attached to this entity
            </summary>
        </member>
        <member name="P:Nez.Entity.tag">
            <summary>
            use this however you want to. It can later be used to query the scene for all Entities with a specific tag
            </summary>
        </member>
        <member name="F:Nez.Entity.updateInterval">
            <summary>
            specifies how often this entitys update method should be called. 1 means every frame, 2 is every other, etc
            </summary>
        </member>
        <member name="P:Nez.Entity.enabled">
            <summary>
            enables/disables the Entity. When disabled colliders are removed from the Physics system and components methods will not be called
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.Entity.updateOrder">
            <summary>
            update order of this Entity. updateOrder is also used to sort tag lists on scene.entities
            </summary>
            <value>The order.</value>
        </member>
        <member name="F:Nez.Entity._isDestroyed">
            <summary>
            flag indicating if destroy was called on this Entity
            </summary>
        </member>
        <member name="M:Nez.Entity.setTag(System.Int32)">
            <summary>
            sets the tag for the Entity
            </summary>
            <returns>The tag.</returns>
            <param name="tag">Tag.</param>
        </member>
        <member name="M:Nez.Entity.setEnabled(System.Boolean)">
            <summary>
            sets the enabled state of the Entity. When disabled colliders are removed from the Physics system and components methods will not be called
            </summary>
            <returns>The enabled.</returns>
            <param name="isEnabled">If set to <c>true</c> is enabled.</param>
        </member>
        <member name="M:Nez.Entity.setUpdateOrder(System.Int32)">
            <summary>
            sets the update order of this Entity. updateOrder is also used to sort tag lists on scene.entities
            </summary>
            <returns>The update order.</returns>
            <param name="updateOrder">Update order.</param>
        </member>
        <member name="M:Nez.Entity.destroy">
            <summary>
            removes the Entity from the scene and destroys all children
            </summary>
        </member>
        <member name="M:Nez.Entity.detachFromScene">
            <summary>
            detaches the Entity from the scene.
            the following lifecycle method will be called on the Entity: onRemovedFromScene
            the following lifecycle method will be called on the Components: onRemovedFromEntity
            </summary>
        </member>
        <member name="M:Nez.Entity.attachToScene(Nez.Scene)">
            <summary>
            attaches an Entity that was previously detached to a new scene
            </summary>
            <param name="newScene">New scene.</param>
        </member>
        <member name="M:Nez.Entity.clone(Microsoft.Xna.Framework.Vector2)">
            <summary>
            creates a deep clone of this Entity. Subclasses can override this method to copy any custom fields. When overriding,
            the copyFrom method should be called which will clone all Components, Colliders and Transform children for you. Note that cloned
            objects will not be added to any Scene! You must add them yourself!
            </summary>
        </member>
        <member name="M:Nez.Entity.copyFrom(Nez.Entity)">
            <summary>
            copies the properties, components and colliders of Entity to this instance
            </summary>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:Nez.Entity.onAddedToScene">
            <summary>
            Called when this entity is added to a scene after all pending entity changes are committed
            </summary>
        </member>
        <member name="M:Nez.Entity.onRemovedFromScene">
            <summary>
            Called when this entity is removed from a scene
            </summary>
        </member>
        <member name="M:Nez.Entity.update">
            <summary>
            called each frame as long as the Entity is enabled
            </summary>
        </member>
        <member name="M:Nez.Entity.debugRender(Nez.Graphics)">
            <summary>
            called if Core.debugRenderEnabled is true by the default renderers. Custom renderers can choose to call it or not.
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="M:Nez.Entity.addComponent``1(``0)">
            <summary>
            Adds a Component to the components list. Returns the Component.
            </summary>
            <returns>Scene.</returns>
            <param name="component">Component.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Entity.addComponent``1">
            <summary>
            Adds a Component to the components list. Returns the Component.
            </summary>
            <returns>Scene.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Entity.getComponent``1">
            <summary>
            Gets the first component of type T and returns it. If no components are found returns null.
            </summary>
            <returns>The component.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Entity.getOrCreateComponent``1">
            <summary>
            Gets the first Component of type T and returns it. If no Component is found the Component will be created.
            </summary>
            <returns>The component.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Entity.getComponent``1(System.Boolean)">
            <summary>
            Gets the first component of type T and returns it optionally skips checking un-initialized Components (Components who have not yet had their
            onAddedToEntity method called). If no components are found returns null.
            </summary>
            <returns>The component.</returns>
            <param name="onlyReturnInitializedComponents">If set to <c>true</c> only return initialized components.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Entity.getComponents``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets all the components of type T without a List allocation
            </summary>
            <param name="componentList">Component list.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Entity.getComponents``1">
            <summary>
            Gets all the components of type T. The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The component.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Entity.removeComponent``1">
            <summary>
            removes the first Component of type T from the components list
            </summary>
            <param name="component">The Component to remove</param>
        </member>
        <member name="M:Nez.Entity.removeComponent(Nez.Component)">
            <summary>
            removes a Component from the components list
            </summary>
            <param name="component">The Component to remove</param>
        </member>
        <member name="M:Nez.Entity.removeAllComponents">
            <summary>
            removes all Components from the Entity
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.None">
            <summary>
            Default. RenderTarget matches the sceen size
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.ExactFit">
            <summary>
            The entire application is visible in the specified area without trying to preserve the original aspect ratio. 
            Distortion can occur, and the application may appear stretched or compressed.
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.NoBorder">
            <summary>
            The entire application fills the specified area, without distortion but possibly with some cropping, 
            while maintaining the original aspect ratio of the application.
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.NoBorderPixelPerfect">
            <summary>
            Pixel perfect version of NoBorder. Scaling is limited to integer values.
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.ShowAll">
            <summary>
            The entire application is visible in the specified area without distortion while maintaining the original 
            aspect ratio of the application. Borders can appear on two sides of the application.
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.ShowAllPixelPerfect">
            <summary>
            Pixel perfect version of ShowAll. Scaling is limited to integer values.
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.FixedHeight">
            <summary>
            The application takes the height of the design resolution size and modifies the width of the internal
            canvas so that it fits the aspect ratio of the device.
            no distortion will occur however you must make sure your application works on different
            aspect ratios
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.FixedHeightPixelPerfect">
            <summary>
            Pixel perfect version of FixedHeight. Scaling is limited to integer values.
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.FixedWidth">
            <summary>
            The application takes the width of the design resolution size and modifies the height of the internal
            canvas so that it fits the aspect ratio of the device.
            no distortion will occur however you must make sure your application works on different
            aspect ratios
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.FixedWidthPixelPerfect">
            <summary>
            Pixel perfect version of FixedWidth. Scaling is limited to integer values.
            </summary>
        </member>
        <member name="F:Nez.Scene.SceneResolutionPolicy.BestFit">
            <summary>
            The application takes the width and height that best fits the design resolution with optional cropping inside of the "bleed area"
            and possible letter/pillar boxing. Works just like ShowAll except with horizontal/vertical bleed (padding). Gives you an area much
            like the old TitleSafeArea. Example: if design resolution is 1348x900 and bleed is 148x140 the safe area would be 1200x760 (design
            resolution - bleed).
            </summary>
        </member>
        <member name="F:Nez.Scene.camera">
            <summary>
            default scene Camera
            </summary>
        </member>
        <member name="F:Nez.Scene.clearColor">
            <summary>
            clear color that is used in preRender to clear the screen
            </summary>
        </member>
        <member name="F:Nez.Scene.letterboxColor">
            <summary>
            clear color for the final render of the RenderTarget to the framebuffer
            </summary>
        </member>
        <member name="F:Nez.Scene.samplerState">
            <summary>
            SamplerState used for the final draw of the RenderTarget to the framebuffer
            </summary>
        </member>
        <member name="F:Nez.Scene.content">
            <summary>
            Scene-specific ContentManager. Use it to load up any resources that are needed only by this scene. If you have global/multi-scene
            resources you can use Core.contentManager to load them since Nez will not ever unload them.
            </summary>
        </member>
        <member name="F:Nez.Scene.enablePostProcessing">
            <summary>
            global toggle for PostProcessors
            </summary>
        </member>
        <member name="F:Nez.Scene.entities">
            <summary>
            The list of entities within this Scene
            </summary>
        </member>
        <member name="F:Nez.Scene.renderableComponents">
            <summary>
            Manages a list of all the RenderableComponents that are currently on scene Entitys
            </summary>
        </member>
        <member name="F:Nez.Scene.entityProcessors">
            <summary>
            Stoes and manages all entity processors
            </summary>
        </member>
        <member name="P:Nez.Scene.sceneRenderTargetSize">
            <summary>
            gets the size of the sceneRenderTarget
            </summary>
            <value>The size of the scene render texture.</value>
        </member>
        <member name="P:Nez.Scene.sceneRenderTarget">
            <summary>
            accesses the main scene RenderTarget. Some Renderers that use multiple RenderTargets may need to render into them first and then
            render the result into the sceneRenderTarget.
            </summary>
            <value>The scene render target.</value>
        </member>
        <member name="F:Nez.Scene.pixelPerfectScale">
            <summary>
            if the ResolutionPolicy is pixel perfect this will be set to the scale calculated for it
            </summary>
        </member>
        <member name="P:Nez.Scene.finalRenderDelegate">
            <summary>
            the final render to the screen can be deferred to this delegate if set. This is really only useful for cases where the final render
            might need a full screen size effect even though a small back buffer is used.
            </summary>
            <value>The final render delegate.</value>
        </member>
        <member name="F:Nez.Scene._defaultDesignResolutionSize">
            <summary>
            default resolution size used for all scenes
            </summary>
        </member>
        <member name="F:Nez.Scene._defaultDesignBleedSize">
            <summary>
            default bleed size for <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit"/> resolution policy
            </summary>
        </member>
        <member name="F:Nez.Scene._defaultSceneResolutionPolicy">
            <summary>
            default resolution policy used for all scenes
            </summary>
        </member>
        <member name="F:Nez.Scene._resolutionPolicy">
            <summary>
            resolution policy used by the scene
            </summary>
        </member>
        <member name="F:Nez.Scene._designResolutionSize">
            <summary>
            design resolution size used by the scene
            </summary>
        </member>
        <member name="F:Nez.Scene._designBleedSize">
            <summary>
            bleed size for <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit"/> resolution policy
            </summary>
        </member>
        <member name="F:Nez.Scene._finalRenderDestinationRect">
            <summary>
            this gets setup based on the resolution policy and is used for the final blit of the RenderTarget
            </summary>
        </member>
        <member name="M:Nez.Scene.setDefaultDesignResolution(System.Int32,System.Int32,Nez.Scene.SceneResolutionPolicy,System.Int32,System.Int32)">
            <summary>
            sets the default design size and resolution policy that new scenes will use. horizontal/verticalBleed are only relevant for BestFit.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="sceneResolutionPolicy">Scene resolution policy.</param>
            <param name="horizontalBleed">Horizontal bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit"/>.</param>
            <param name="verticalBleed">Vertical bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit"/>.</param>
        </member>
        <member name="M:Nez.Scene.createWithDefaultRenderer(System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            helper that creates a scene with the DefaultRenderer attached and ready for use
            </summary>
            <returns>The with default renderer.</returns>
        </member>
        <member name="M:Nez.Scene.createWithDefaultRenderer``1(System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            helper that creates a scene of type T with the DefaultRenderer attached and ready for use
            </summary>
            <returns>The with default renderer.</returns>
        </member>
        <member name="M:Nez.Scene.create(System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            helper that creates a scene with no Renderer
            </summary>
            <returns>The with default renderer.</returns>
        </member>
        <member name="M:Nez.Scene.create``1(System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            helper that creates a scene of type T with no Renderer
            </summary>
            <returns>The with default renderer.</returns>
        </member>
        <member name="M:Nez.Scene.initialize">
            <summary>
            override this in Scene subclasses and do your loading here. This is called from the contructor after the scene sets itself up but
            before begin is ever called.
            </summary>
        </member>
        <member name="M:Nez.Scene.onStart">
            <summary>
            override this in Scene subclasses. this will be called when Core sets this scene as the active scene.
            </summary>
        </member>
        <member name="M:Nez.Scene.unload">
            <summary>
            override this in Scene subclasses and do any unloading necessary here. this is called when Core removes this scene from the active slot.
            </summary>
        </member>
        <member name="M:Nez.Scene.postRender(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            any PostProcessors present get to do their processing then we do the final render of the RenderTarget to the screen
            </summary>
            <returns>The render.</returns>
        </member>
        <member name="M:Nez.Scene.setDesignResolution(System.Int32,System.Int32,Nez.Scene.SceneResolutionPolicy,System.Int32,System.Int32)">
            <summary>
            sets the design size and resolution policy then updates the render textures
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="sceneResolutionPolicy">Scene resolution policy.</param>
            <param name="horizontalBleed">Horizontal bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit"/>.</param>
            <param name="verticalBleed">Horizontal bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit"/>.</param>
        </member>
        <member name="M:Nez.Scene.requestScreenshot(System.Action{Microsoft.Xna.Framework.Graphics.Texture2D})">
            <summary>
            after the next draw completes this will clone the backbuffer and call callback with the clone. Note that you must dispose of the 
            Texture2D when done with it!
            </summary>
            <param name="callback">Callback.</param>
        </member>
        <member name="M:Nez.Scene.addSceneComponent``1">
            <summary>
            Adds and returns a SceneComponent to the components list
            </summary>
            <returns>Scene.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.addSceneComponent``1(``0)">
            <summary>
            Adds and returns a SceneComponent to the components list
            </summary>
            <returns>Scene.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.getSceneComponent``1">
            <summary>
            Gets the first SceneComponent of type T and returns it. If no component is found returns null.
            </summary>
            <returns>The component.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.getOrCreateSceneComponent``1">
            <summary>
            Gets the first SceneComponent of type T and returns it. If no SceneComponent is found the SceneComponent will be created.
            </summary>
            <returns>The component.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.removeSceneComponent``1">
            <summary>
            removes the first SceneComponent of type T from the components list
            </summary>
            <returns><c>true</c>, if component was removed, <c>false</c> otherwise.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.removeSceneComponent(Nez.SceneComponent)">
            <summary>
            removes a SceneComponent from the SceneComponents list
            </summary>
        </member>
        <member name="M:Nez.Scene.addRenderer``1(``0)">
            <summary>
            adds a Renderer to the scene
            </summary>
            <returns>The renderer.</returns>
            <param name="renderer">Renderer.</param>
        </member>
        <member name="M:Nez.Scene.getRenderer``1">
            <summary>
            gets the first Renderer of Type T
            </summary>
            <returns>The renderer.</returns>
            <param name="renderer">Renderer.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.removeRenderer(Nez.Renderer)">
            <summary>
            removes the Renderer from the scene
            </summary>
            <param name="renderer">Renderer.</param>
        </member>
        <member name="M:Nez.Scene.addPostProcessor``1(``0)">
            <summary>
            adds a PostProcessor to the scene. Sets the scene field and calls PostProcessor.onAddedToScene so that PostProcessors can load
            resources using the scenes ContentManager.
            </summary>
            <param name="postProcessor">Post processor.</param>
        </member>
        <member name="M:Nez.Scene.getPostProcessor``1">
            <summary>
            gets the first PostProcessor of Type T
            </summary>
            <returns>The post processor.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.removePostProcessor(Nez.PostProcessor)">
            <summary>
            removes a PostProcessor. Note that unload is not called when removing so if you no longer need the PostProcessor be sure to call
            unload to free resources.
            </summary>
            <param name="step">Step.</param>
        </member>
        <member name="M:Nez.Scene.createEntity(System.String)">
            <summary>
            add the Entity to this Scene, and return it
            </summary>
            <typeparam name="T">entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Nez.Scene.createEntity(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            add the Entity to this Scene at position, and return it
            </summary>
            <returns>The entity.</returns>
            <param name="name">Name.</param>
            <param name="position">Position.</param>
        </member>
        <member name="M:Nez.Scene.addEntity(Nez.Entity)">
            <summary>
            adds an Entity to the Scene's Entities list
            </summary>
            <param name="entity">The Entity to add</param>
        </member>
        <member name="M:Nez.Scene.addEntity``1(``0)">
            <summary>
            adds an Entity to the Scene's Entities list
            </summary>
            <param name="entity">The Entity to add</param>
        </member>
        <member name="M:Nez.Scene.destroyAllEntities">
            <summary>
            removes all entities from the scene
            </summary>
        </member>
        <member name="M:Nez.Scene.findEntity(System.String)">
            <summary>
            searches for and returns the first Entity with name
            </summary>
            <returns>The entity.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Scene.findEntitiesWithTag(System.Int32)">
            <summary>
            returns all entities with the given tag
            </summary>
            <returns>The entities by tag.</returns>
            <param name="tag">Tag.</param>
        </member>
        <member name="M:Nez.Scene.entitiesOfType``1">
            <summary>
            returns all entities of Type T
            </summary>
            <returns>The of type.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.findComponentOfType``1">
            <summary>
            returns the first enabled loaded component of Type T
            </summary>
            <returns>The component of type.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.findComponentsOfType``1">
            <summary>
            returns a list of all enabled loaded components of Type T
            </summary>
            <returns>The components of type.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Scene.addEntityProcessor(Nez.EntitySystem)">
            <summary>
            adds an EntitySystem processor to the scene
            </summary>
            <returns>The processor.</returns>
            <param name="processor">Processor.</param>
        </member>
        <member name="M:Nez.Scene.removeEntityProcessor(Nez.EntitySystem)">
            <summary>
            removes an EntitySystem processor from the scene
            </summary>
            <param name="processor">Processor.</param>
        </member>
        <member name="M:Nez.Scene.getEntityProcessor``1">
            <summary>
            gets an EntitySystem processor
            </summary>
            <returns>The processor.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Nez.RenderableComponent">
            <summary>
            concrete implementation of IRenderable. Contains convenience 
            
            Subclasses MUST either override width/height or bounds!
            </summary>
        </member>
        <member name="P:Nez.RenderableComponent.width">
            <summary>
            width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Nez.RenderableComponent.height">
            <summary>
            height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Nez.RenderableComponent.bounds">
            <summary>
            the AABB that wraps this object. Used for camera culling.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Nez.RenderableComponent.layerDepth">
            <summary>
            standard Batcher layerdepth. 0 is in front and 1 is in back. Changing this value will trigger a sort of the renderableComponents
            list on the scene.
            </summary>
        </member>
        <member name="P:Nez.RenderableComponent.renderLayer">
            <summary>
            lower renderLayers are in the front and higher are in the back, just like layerDepth but not clamped to 0-1. Note that this means
            higher renderLayers are sent to the Batcher first. An important fact when using the stencil buffer.
            </summary>
            <value>The render layer.</value>
        </member>
        <member name="F:Nez.RenderableComponent.color">
            <summary>
            color passed along to the Batcher when rendering
            </summary>
        </member>
        <member name="P:Nez.RenderableComponent.material">
            <summary>
            used by Renderers to specify how this sprite should be rendered
            </summary>
        </member>
        <member name="P:Nez.RenderableComponent.localOffset">
            <summary>
            offset from the parent entity. Useful for adding multiple Renderables to an Entity that need specific positioning.
            </summary>
            <value>The local position.</value>
        </member>
        <member name="P:Nez.RenderableComponent.isVisible">
            <summary>
            the visibility of this Renderable. Changes in state end up calling the onBecameVisible/onBecameInvisible methods.
            </summary>
            <value><c>true</c> if is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Nez.RenderableComponent.render(Nez.Graphics,Nez.Camera)">
            <summary>
            called by a Renderer. The Camera can be used for culling and the Graphics instance to draw with.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Nez.RenderableComponent.debugRender(Nez.Graphics)">
            <summary>
            renders the bounds only if there is no collider. Always renders a square on the origin.
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="M:Nez.RenderableComponent.onBecameVisible">
            <summary>
            called when the Renderable enters the camera frame. Note that these methods will not be called if your Renderer does not use
            isVisibleFromCamera for its culling check. All default Renderers do.
            </summary>
        </member>
        <member name="M:Nez.RenderableComponent.onBecameInvisible">
            <summary>
            called when the renderable exits the camera frame. Note that these methods will not be called if your Renderer does not use
            isVisibleFromCamera for its culling check. All default Renderers do.
            </summary>
        </member>
        <member name="M:Nez.RenderableComponent.isVisibleFromCamera(Nez.Camera)">
            <summary>
            returns true if the Renderables bounds intersects the Camera.bounds. Handles state switches for the isVisible flag. Use this method
            in your render method to see decide if you should render or not.
            </summary>
            <returns><c>true</c>, if visible from camera was ised, <c>false</c> otherwise.</returns>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Nez.RenderableComponent.setLayerDepth(System.Single)">
            <summary>
            standard Batcher layerdepth. 0 is in front and 1 is in back. Changing this value will trigger a sort of the renderableComponents
            </summary>
            <returns>The layer depth.</returns>
            <param name="layerDepth">Value.</param>
        </member>
        <member name="M:Nez.RenderableComponent.setRenderLayer(System.Int32)">
            <summary>
            lower renderLayers are in the front and higher are in the back, just like layerDepth but not clamped to 0-1. Note that this means
            higher renderLayers are sent to the Batcher first. An important fact when using the stencil buffer.
            </summary>
            <returns>The render layer.</returns>
            <param name="renderLayer">Render layer.</param>
        </member>
        <member name="M:Nez.RenderableComponent.setColor(Microsoft.Xna.Framework.Color)">
            <summary>
            color passed along to the Batcher when rendering
            </summary>
            <returns>The color.</returns>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.RenderableComponent.setLocalOffset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            offset from the parent entity. Useful for adding multiple Renderables to an Entity that need specific positioning.
            </summary>
            <returns>The local offset.</returns>
            <param name="offset">Offset.</param>
        </member>
        <member name="M:Nez.RenderableComponent.getMaterial``1">
            <summary>
            helper for retrieving a Material subclass already casted
            </summary>
            <returns>The material.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.RenderableComponent.CompareTo(Nez.RenderableComponent)">
            <Docs>To be added.</Docs>
            <para>Returns the sort order of the current instance compared to the specified object.</para>
            <summary>
            sorted first by renderLayer, then layerDepth and finally material
            </summary>
            <returns>The to.</returns>
            <param name="other">Other.</param>
        </member>
        <member name="F:Nez.TiledMapComponent.layerIndicesToRender">
            <summary>
            if null, all layers will be rendered
            </summary>
        </member>
        <member name="M:Nez.TiledMapComponent.setLayerToRender(System.String)">
            <summary>
            sets this component to only render a single layer
            </summary>
            <param name="layerName">Layer name.</param>
        </member>
        <member name="M:Nez.TiledMapComponent.setLayersToRender(System.String[])">
            <summary>
            sets which layers should be rendered by this component by name. If you know the indices you can set layerIndicesToRender directly.
            </summary>
            <param name="layerNames">Layer names.</param>
        </member>
        <member name="M:Nez.TiledMapComponent.getTileAtWorldPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            this method requires that you are using a collision layer setup in the constructor.
            </summary>
            <returns>The tile at world position.</returns>
            <param name="worldPos">World position.</param>
        </member>
        <member name="M:Nez.TiledMapComponent.getTilesIntersectingBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            gets all the non-empty tiles that intersect the passed in bounds for the collision layer. The returned List can be put back in the
            pool via ListPool.free.
            </summary>
            <returns>The tiles intersecting bounds.</returns>
            <param name="bounds">Bounds.</param>
        </member>
        <member name="F:Nez.FramesPerSecondCounter.maximumSamples">
            <summary>
            total number of samples that should be stored and averaged for calculating the FPS
            </summary>
        </member>
        <member name="P:Nez.FramesPerSecondCounter.dockPosition">
            <summary>
            position the FPS counter should be docked
            </summary>
            <value>The dock position.</value>
        </member>
        <member name="P:Nez.FramesPerSecondCounter.dockOffset">
            <summary>
            offset from dockPosition the FPS counter should be drawn
            </summary>
            <value>The dock offset.</value>
        </member>
        <member name="M:Nez.FramesPerSecondCounter.setDockOffset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets how far the fps text will appear from the edges of the screen.
            </summary>
            <param name="dockOffset">Offset from screen edges</param>
        </member>
        <member name="M:Nez.FramesPerSecondCounter.setDockPosition(Nez.FramesPerSecondCounter.FPSDockPosition)">
            <summary>
            Sets which corner of the screen the fps text will show.
            </summary>
            <param name="dockPosition">Corner of the screen</param>
        </member>
        <member name="P:Nez.Text.text">
            <summary>
            text to draw
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Nez.Text.horizontalOrigin">
            <summary>
            horizontal alignment of the text
            </summary>
            <value>The horizontal origin.</value>
        </member>
        <member name="P:Nez.Text.verticalOrigin">
            <summary>
            vertical alignment of the text
            </summary>
            <value>The vertical origin.</value>
        </member>
        <member name="F:Nez.ComponentList._components">
            <summary>
            list of components added to the entity
            </summary>
        </member>
        <member name="F:Nez.ComponentList._updatableComponents">
            <summary>
            list of all Components that want update called
            </summary>
        </member>
        <member name="F:Nez.ComponentList._componentsToAdd">
            <summary>
            The list of components that were added this frame. Used to group the components so we can process them simultaneously
            </summary>
        </member>
        <member name="F:Nez.ComponentList._componentsToRemove">
            <summary>
            The list of components that were marked for removal this frame. Used to group the components so we can process them simultaneously
            </summary>
        </member>
        <member name="F:Nez.ComponentList._isComponentListUnsorted">
            <summary>
            flag used to determine if we need to sort our Components this frame
            </summary>
        </member>
        <member name="M:Nez.ComponentList.removeAllComponents">
            <summary>
            removes all components from the component list immediately
            </summary>
        </member>
        <member name="M:Nez.ComponentList.updateLists">
            <summary>
            handles any Components that need to be removed or added
            </summary>
        </member>
        <member name="M:Nez.ComponentList.getComponent``1(System.Boolean)">
            <summary>
            Gets the first component of type T and returns it. Optionally skips checking un-initialized Components (Components who have not yet had their
            onAddedToEntity method called). If no components are found returns null.
            </summary>
            <returns>The component.</returns>
            <param name="onlyReturnInitializedComponents">If set to <c>true</c> only return initialized components.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.ComponentList.getComponents``1(System.Collections.Generic.List{``0})">
            <summary>
            Gets all the components of type T without a List allocation
            </summary>
            <param name="components">Components.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.ComponentList.getComponents``1">
            <summary>
            Gets all the components of type T. The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The components.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="F:Nez.EntityList._entities">
            <summary>
            list of entities added to the scene
            </summary>
        </member>
        <member name="F:Nez.EntityList._entitiesToAdd">
            <summary>
            The list of entities that were added this frame. Used to group the entities so we can process them simultaneously
            </summary>
        </member>
        <member name="F:Nez.EntityList._entitiesToRemove">
            <summary>
            The list of entities that were marked for removal this frame. Used to group the entities so we can process them simultaneously
            </summary>
        </member>
        <member name="F:Nez.EntityList._isEntityListUnsorted">
            <summary>
            flag used to determine if we need to sort our entities this frame
            </summary>
        </member>
        <member name="F:Nez.EntityList._entityDict">
            <summary>
            tracks entities by tag for easy retrieval
            </summary>
        </member>
        <member name="M:Nez.EntityList.add(Nez.Entity)">
            <summary>
            adds an Entity to the list. All lifecycle methods will be called in the next frame.
            </summary>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:Nez.EntityList.remove(Nez.Entity)">
            <summary>
            removes an Entity from the list. All lifecycle methods will be called in the next frame.
            </summary>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:Nez.EntityList.removeAllEntities">
            <summary>
            removes all entities from the entities list and passes them back to the entity cache
            </summary>
        </member>
        <member name="M:Nez.EntityList.contains(Nez.Entity)">
            <summary>
            checks to see if the Entity is presently managed by this EntityList
            </summary>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:Nez.EntityList.findEntity(System.String)">
            <summary>
            returns the first Entity found with a name of name. If none are found returns null.
            </summary>
            <returns>The entity.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.EntityList.entitiesWithTag(System.Int32)">
            <summary>
            returns a list of all entities with tag. If no entities have the tag an empty list is returned. The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The with tag.</returns>
            <param name="tag">Tag.</param>
        </member>
        <member name="M:Nez.EntityList.entitiesOfType``1">
            <summary>
            returns a List of all Entities of type T. The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The of type.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.EntityList.findComponentOfType``1">
            <summary>
            returns the first Component found in the Scene of type T
            </summary>
            <returns>The component of type.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.EntityList.findComponentsOfType``1">
            <summary>
            returns all Components found in the Scene of type T. The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The components of type.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="F:Nez.RenderableComponentList._components">
            <summary>
            list of components added to the entity
            </summary>
        </member>
        <member name="F:Nez.RenderableComponentList._componentsByRenderLayer">
            <summary>
            tracks components by renderLayer for easy retrieval
            </summary>
        </member>
        <member name="T:Nez.Graphics">
            <summary>
            wrapper class that holds in instance of a Batcher and helpers so that it can be passed around and draw anything.
            </summary>
        </member>
        <member name="F:Nez.Graphics.batcher">
            <summary>
            All 2D rendering is done through this Batcher instance
            </summary>
        </member>
        <member name="F:Nez.Graphics.bitmapFont">
            <summary>
            default font is loaded up and stored here for easy access. Nez uses it for the DebugConsole
            </summary>
        </member>
        <member name="F:Nez.Graphics.pixelTexture">
            <summary>
            A subtexture used to draw rectangles, lines, circles, etc. 
            Will be generated at startup, but you can replace this with a subtexture from your atlas to reduce texture swaps.
            Should be a 1x1 white pixel
            </summary>
        </member>
        <member name="M:Nez.Graphics.createSingleColorTexture(System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            helper method that generates a single color texture of the given dimensions
            </summary>
            <returns>The single color texture.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="color">Color.</param>
        </member>
        <member name="T:Nez.PrimitiveBatch">
            <summary>
            batcher that draws vertex colored triangles
            </summary>
        </member>
        <member name="M:Nez.PrimitiveBatch.begin">
            <summary>
            draws directly in screen space at full viewport size
            </summary>
        </member>
        <member name="M:Nez.PrimitiveBatch.begin(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Begin is called to tell the PrimitiveBatch what kind of primitives will be drawn, and to prepare the graphics card to render those primitives.
            Use camera.projectionMatrix and camera.transformMatrix if the batch should be in camera space.
            </summary>
            <param name="projection">The projection.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:Nez.PrimitiveBatch.begin(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Begin is called to tell the PrimitiveBatch what kind of primitives will be drawn, and to prepare the graphics card to render those primitives.
            Use camera.projectionMatrix and camera.transformMatrix if the batch should be in camera space.
            </summary>
            <param name="projection">The projection.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:Nez.PrimitiveBatch.end">
            <summary>
            End is called once all the primitives have been drawn using AddVertex.
            it will call Flush to actually submit the draw call to the graphics card, and
            then tell the basic effect to end.
            </summary>
        </member>
        <member name="T:Nez.PostProcessor">
            <summary>
            Post Processing step for rendering actions after everthing done.
            </summary>
        </member>
        <member name="F:Nez.PostProcessor.enabled">
            <summary>
            Step is Enabled or not.
            </summary>
        </member>
        <member name="F:Nez.PostProcessor.executionOrder">
            <summary>
            specifies the order in which the Renderers will be called by the scene
            </summary>
        </member>
        <member name="F:Nez.PostProcessor.scene">
            <summary>
            the Scene this PostProcessor resides in
            </summary>
        </member>
        <member name="F:Nez.PostProcessor.effect">
            <summary>
            The effect used to render with
            </summary>
        </member>
        <member name="F:Nez.PostProcessor.samplerState">
            <summary>
            SamplerState used for the drawFullscreenQuad method
            </summary>
        </member>
        <member name="F:Nez.PostProcessor.blendState">
            <summary>
            BlendState used by the drawFullsceenQuad method
            </summary>
        </member>
        <member name="M:Nez.PostProcessor.onAddedToScene">
            <summary>
            called when the PostProcessor is added to the scene. The scene field is not valid until this is called
            </summary>
            <param name="scene">Scene.</param>
        </member>
        <member name="M:Nez.PostProcessor.onSceneBackBufferSizeChanged(System.Int32,System.Int32)">
            <summary>
            called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
            called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
            to create any RenderTextures a PostProcessor might require.
            </summary>
            <param name="newWidth">New width.</param>
            <param name="newHeight">New height.</param>
        </member>
        <member name="M:Nez.PostProcessor.process(Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            this is the meat method here. The source passed in contains the full scene with any previous PostProcessors
            rendering. Render it into the destination RenderTarget. The drawFullScreenQuad methods are there to make
            the process even easier. The default implementation renders source into destination with effect.
            
            Note that destination might have a previous render! If your PostProcessor Effect is discarding you should clear
            the destination before writing to it!
            </summary>
            <param name="source">Source.</param>
            <param name="destination">Destination.</param>
        </member>
        <member name="M:Nez.PostProcessor.unload">
            <summary>
            called when a scene is ended. use this for cleanup.
            </summary>
        </member>
        <member name="M:Nez.PostProcessor.drawFullscreenQuad(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            helper for drawing a texture into a rendertarget, optionally using a custom shader to apply postprocessing effects.
            </summary>
        </member>
        <member name="M:Nez.PostProcessor.drawFullscreenQuad(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            helper for drawing a texture into the current rendertarget, optionally using a custom shader to apply postprocessing effects.
            </summary>
        </member>
        <member name="M:Nez.DefaultRenderer.#ctor(System.Int32,Nez.Camera)">
            <summary>
            renders all renderLayers
            </summary>
            <param name="renderOrder">Render order.</param>
            <param name="camera">Camera.</param>
        </member>
        <member name="T:Nez.RenderLayerExcludeRenderer">
            <summary>
            Renderer that only renders all but one renderLayer. Useful to keep UI rendering separate from the rest of the game when used in conjunction
            with a RenderLayerRenderer. Note that UI would most likely want to be rendered in screen space so the camera matrix shouldn't be passed to
            Batcher.Begin.
            </summary>
        </member>
        <member name="T:Nez.RenderLayerRenderer">
            <summary>
            Renderer that only renders the specified renderLayers. Useful to keep UI rendering separate from the rest of the game when used in conjunction
            with other RenderLayerRenderers rendering different renderLayers.
            </summary>
        </member>
        <member name="F:Nez.RenderLayerRenderer.renderLayers">
            <summary>
            the renderLayers this Renderer will render
            </summary>
        </member>
        <member name="T:Nez.Renderer">
            <summary>
            Renderers are added to a Scene and handle all of the actual calls to RenderableComponent.render and Entity.debugRender.
            A simple Renderer could just start the Graphics.instanceGraphics.batcher or it could create its own local Graphics instance
            if it needs it for some kind of custom rendering.
            
            Note that it is a best practice to ensure all Renderers that render to a RenderTarget have lower renderOrders to avoid issues
            with clearing the back buffer (http://gamedev.stackexchange.com/questions/90396/monogame-setrendertarget-is-wiping-the-backbuffer).
            Giving them a negative renderOrder is a good strategy to deal with this.
            </summary>
        </member>
        <member name="F:Nez.Renderer.material">
            <summary>
            Material used by the Batcher. Any RenderableComponent can override this.
            </summary>
        </member>
        <member name="F:Nez.Renderer.camera">
            <summary>
            the Camera this renderer uses for rendering (really its transformMatrix and bounds for culling). This is a convenience field and isnt
            required. Renderer subclasses can pick the camera used when calling beginRender.
            </summary>
        </member>
        <member name="F:Nez.Renderer.renderOrder">
            <summary>
            specifies the order in which the Renderers will be called by the scene
            </summary>
        </member>
        <member name="F:Nez.Renderer.renderTexture">
            <summary>
            if renderTarget is not null this renderer will render into the RenderTarget instead of to the screen
            </summary>
        </member>
        <member name="F:Nez.Renderer.renderTargetClearColor">
            <summary>
            if renderTarget is not null this Color will be used to clear the screen
            </summary>
        </member>
        <member name="F:Nez.Renderer.shouldDebugRender">
            <summary>
            flag for this renderer that decides if it should debug render or not. The render method receives a bool (debugRenderEnabled)
            letting the renderer know if the global debug rendering is on/off. The renderer then uses the local bool to decide if it
            should debug render or not.
            </summary>
        </member>
        <member name="P:Nez.Renderer.wantsToRenderToSceneRenderTarget">
            <summary>
            if true, the Scene will call SetRenderTarget with the scene RenderTarget. The default implementaiton returns true if the Renderer
            has a renderTexture
            </summary>
            <value><c>true</c> if wants to render to scene render target; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Nez.Renderer.wantsToRenderAfterPostProcessors">
            <summary>
            if true, the Scene will call the render method AFTER all PostProcessors have finished. This must be set to true BEFORE calling
            Scene.addRenderer to take effect and the Renderer should NOT have a renderTexture. The main reason for this type of Renderer
            is so that you can render your UI without post processing on top of the rest of your Scene. The ScreenSpaceRenderer is an
            example Renderer that sets this to true;
            </summary>
        </member>
        <member name="F:Nez.Renderer._currentMaterial">
            <summary>
            holds the current Material of the last rendered Renderable (or the Renderer.material if no changes were made)
            </summary>
        </member>
        <member name="M:Nez.Renderer.beginRender(Nez.Camera)">
            <summary>
            if a RenderTarget is used this will set it up. The Batcher is also started. The passed in Camera will be used to set the ViewPort
            (if a ViewportAdapter is present) and for the Batcher transform Matrix.
            </summary>
            <param name="cam">Cam.</param>
        </member>
        <member name="M:Nez.Renderer.renderAfterStateCheck(Nez.IRenderable,Nez.Camera)">
            <summary>
            renders the RenderableComponent flushing the Batcher and resetting current material if necessary
            </summary>
            <param name="renderable">Renderable.</param>
            <param name="cam">Cam.</param>
        </member>
        <member name="M:Nez.Renderer.flushBatch(Nez.Camera)">
            <summary>
            force flushes the Batcher by calling End then Begin on it.
            </summary>
        </member>
        <member name="M:Nez.Renderer.endRender">
            <summary>
            ends the Batcher and clears the RenderTarget if it had a RenderTarget
            </summary>
        </member>
        <member name="M:Nez.Renderer.debugRender(Nez.Scene,Nez.Camera)">
            <summary>
            default debugRender method just loops through all entities and calls entity.debugRender
            </summary>
            <param name="scene">Scene.</param>
        </member>
        <member name="M:Nez.Renderer.onSceneBackBufferSizeChanged(System.Int32,System.Int32)">
            <summary>
            called when the default scene RenderTarget is resized and when adding a Renderer if the scene has already began. default implementation
            calls through to RenderTexture.onSceneBackBufferSizeChanged
            so that it can size itself appropriately if necessary.
            </summary>
            <param name="newWidth">New width.</param>
            <param name="newHeight">New height.</param>
        </member>
        <member name="M:Nez.Renderer.unload">
            <summary>
            called when a scene is ended. use this for cleanup.
            </summary>
        </member>
        <member name="F:Nez.GamePadData.isLeftStickVertcialInverted">
            <summary>
            toggles inverting the left sticks vertical value
            </summary>
        </member>
        <member name="F:Nez.GamePadData.isRightStickVertcialInverted">
            <summary>
            toggles inverting the right sticks vertical value
            </summary>
        </member>
        <member name="M:Nez.GamePadData.isConnected">
            <summary>
            returns true if this game pad is connected
            </summary>
            <returns><c>true</c>, if connected was ised, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.GamePadData.isButtonPressed(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            only true if down this frame
            </summary>
            <returns><c>true</c>, if button pressed was ised, <c>false</c> otherwise.</returns>
            <param name="button">Button.</param>
        </member>
        <member name="M:Nez.GamePadData.isButtonDown(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            true the entire time the button is down
            </summary>
            <returns><c>true</c>, if button down was ised, <c>false</c> otherwise.</returns>
            <param name="button">Button.</param>
        </member>
        <member name="M:Nez.GamePadData.isButtonReleased(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            true only the frame the button is released
            </summary>
            <returns><c>true</c>, if button released was ised, <c>false</c> otherwise.</returns>
            <param name="button">Button.</param>
        </member>
        <member name="M:Nez.GamePadData.isLeftStickLeftPressed(System.Single)">
            <summary>
            true only the frame the stick passes the deadzone in the direction
            </summary>
            <returns><c>true</c>, if left stick left pressed was ised, <c>false</c> otherwise.</returns>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.GamePadData.isLeftStickRightPressed(System.Single)">
            <summary>
            true only the frame the stick passes the deadzone in the direction
            </summary>
            <returns><c>true</c>, if left stick right pressed was ised, <c>false</c> otherwise.</returns>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.GamePadData.isLeftStickUpPressed(System.Single)">
            <summary>
            true only the frame the stick passes the deadzone in the direction
            </summary>
            <returns><c>true</c>, if left stick up pressed was ised, <c>false</c> otherwise.</returns>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.GamePadData.isLeftStickDownPressed(System.Single)">
            <summary>
            true only the frame the stick passes the deadzone in the direction
            </summary>
            <returns><c>true</c>, if left stick down pressed was ised, <c>false</c> otherwise.</returns>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="P:Nez.GamePadData.DpadLeftDown">
            <summary>
            true the entire time the dpad is down
            </summary>
            <value><c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadLeftPressed">
            <summary>
            true only the first frame the dpad is down
            </summary>
            <value><c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadLeftReleased">
            <summary>
            true only the frame the dpad is released
            </summary>
            <value><c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadRightDown">
            <summary>
            true the entire time the dpad is down
            </summary>
            <value><c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadRightPressed">
            <summary>
            true only the first frame the dpad is down
            </summary>
            <value><c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadRightReleased">
            <summary>
            true only the frame the dpad is released
            </summary>
            <value><c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadUpDown">
            <summary>
            true the entire time the dpad is down
            </summary>
            <value><c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadUpPressed">
            <summary>
            true only the first frame the dpad is down
            </summary>
            <value><c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadUpReleased">
            <summary>
            true only the frame the dpad is released
            </summary>
            <value><c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadDownDown">
            <summary>
            true the entire time the dpad is down
            </summary>
            <value><c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadDownPressed">
            <summary>
            true only the first frame the dpad is down
            </summary>
            <value><c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.GamePadData.DpadDownReleased">
            <summary>
            true only the frame the dpad is released
            </summary>
            <value><c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Nez.GamePadData.isLeftTriggerDown(System.Single)">
            <summary>
            true whenever the trigger is down past the threshold
            </summary>
            <returns><c>true</c>, if left trigger down was ised, <c>false</c> otherwise.</returns>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.GamePadData.isLeftTriggerPressed(System.Single)">
            <summary>
            true only the frame that the trigger passed the threshold
            </summary>
            <returns><c>true</c>, if left trigger pressed was ised, <c>false</c> otherwise.</returns>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.GamePadData.isLeftTriggerReleased(System.Single)">
            <summary>
            true the frame the trigger is released
            </summary>
            <returns><c>true</c>, if left trigger released was ised, <c>false</c> otherwise.</returns>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.GamePadData.isRightTriggerDown(System.Single)">
            <summary>
            true whenever the trigger is down past the threshold
            </summary>
            <returns><c>true</c>, if left trigger down was ised, <c>false</c> otherwise.</returns>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.GamePadData.isRightTriggerPressed(System.Single)">
            <summary>
            true only the frame that the trigger passed the threshold
            </summary>
            <returns><c>true</c>, if left trigger pressed was ised, <c>false</c> otherwise.</returns>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.GamePadData.isRightTriggerReleased(System.Single)">
            <summary>
            true the frame the trigger is released
            </summary>
            <returns><c>true</c>, if left trigger released was ised, <c>false</c> otherwise.</returns>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="F:Nez.Input._resolutionScale">
            <summary>
            set by the Scene and used to scale mouse input
            </summary>
        </member>
        <member name="F:Nez.Input._resolutionOffset">
            <summary>
            set by the Scene and used to scale input
            </summary>
        </member>
        <member name="M:Nez.Input.scaledPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            this takes into account the SceneResolutionPolicy and returns the value scaled to the RenderTargets coordinates
            </summary>
            <value>The scaled position.</value>
        </member>
        <member name="M:Nez.Input.isKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            only true if down this frame
            </summary>
            <returns><c>true</c>, if key pressed was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Input.isKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            true the entire time the key is down
            </summary>
            <returns><c>true</c>, if key down was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Input.isKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            true only the frame the key is released
            </summary>
            <returns><c>true</c>, if key up was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Input.isKeyPressed(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            only true if one of the keys is down this frame
            </summary>
            <returns><c>true</c>, if key pressed was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Input.isKeyDown(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            true while either of the keys are down
            </summary>
            <returns><c>true</c>, if key down was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Input.isKeyReleased(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            true only the frame one of the keys are released
            </summary>
            <returns><c>true</c>, if key up was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Nez.Input.previousMouseState">
            <summary>
            returns the previous mouse state. Use with caution as it only contains raw data and does not take camera scaling into affect like
            Input.mousePosition does.
            </summary>
            <value>The state of the previous mouse.</value>
        </member>
        <member name="P:Nez.Input.leftMouseButtonPressed">
            <summary>
            only true if down this frame
            </summary>
        </member>
        <member name="P:Nez.Input.leftMouseButtonDown">
            <summary>
            true while the button is down
            </summary>
        </member>
        <member name="P:Nez.Input.leftMouseButtonReleased">
            <summary>
            true only the frame the button is released
            </summary>
        </member>
        <member name="P:Nez.Input.rightMouseButtonPressed">
            <summary>
            only true if pressed this frame
            </summary>
        </member>
        <member name="P:Nez.Input.rightMouseButtonDown">
            <summary>
            true while the button is down
            </summary>
        </member>
        <member name="P:Nez.Input.rightMouseButtonReleased">
            <summary>
            true only the frame the button is released
            </summary>
        </member>
        <member name="P:Nez.Input.middleMouseButtonPressed">
            <summary>
            only true if down this frame
            </summary>
        </member>
        <member name="P:Nez.Input.middleMouseButtonDown">
            <summary>
            true while the button is down
            </summary>
        </member>
        <member name="P:Nez.Input.middleMouseButtonReleased">
            <summary>
            true only the frame the button is released
            </summary>
        </member>
        <member name="P:Nez.Input.mouseWheel">
            <summary>
            gets the raw ScrollWheelValue
            </summary>
            <value>The mouse wheel.</value>
        </member>
        <member name="P:Nez.Input.mouseWheelDelta">
            <summary>
            gets the delta ScrollWheelValue
            </summary>
            <value>The mouse wheel delta.</value>
        </member>
        <member name="P:Nez.Input.rawMousePosition">
            <summary>
            unscaled mouse position. This is the actual screen space value
            </summary>
            <value>The raw mouse position.</value>
        </member>
        <member name="P:Nez.Input.mousePosition">
            <summary>
            alias for scaledMousePosition
            </summary>
            <value>The mouse position.</value>
        </member>
        <member name="P:Nez.Input.scaledMousePosition">
            <summary>
            this takes into account the SceneResolutionPolicy and returns the value scaled to the RenderTargets coordinates
            </summary>
            <value>The scaled mouse position.</value>
        </member>
        <member name="T:Nez.InputEventTypeComparer">
            <summary>
            comparer that should be passed to a dictionary constructor to avoid boxing/unboxing when using an enum as a key
            on Mono
            </summary>
        </member>
        <member name="M:Nez.Mathf.fastCeilToInt(System.Single)">
            <summary>
            ceils the float to the nearest int value above y. note that this only works for values in the range of short
            </summary>
            <returns>The ceil to int.</returns>
            <param name="y">F.</param>
        </member>
        <member name="M:Nez.Mathf.fastFloorToInt(System.Single)">
            <summary>
            floors the float to the nearest int value below x. note that this only works for values in the range of short
            </summary>
            <returns>The floor to int.</returns>
            <param name="x">The x coordinate.</param>
        </member>
        <member name="M:Nez.Mathf.truncateToInt(System.Single)">
            <summary>
            Calculates the integral part of a number cast to an int
            </summary>
            <returns>The to int.</returns>
            <param name="f">F.</param>
        </member>
        <member name="M:Nez.Mathf.clamp01(System.Single)">
            <summary>
            clamps value between 0 and 1
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.Mathf.clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Nez.Mathf.lerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            lerps an angle in degrees between a and b. handles wrapping around 360
            </summary>
            <returns>The angle.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Mathf.repeat(System.Single,System.Single)">
            <summary>
            loops t so that it is never larger than length and never smaller than 0
            </summary>
            <param name="t">T.</param>
            <param name="length">Length.</param>
        </member>
        <member name="M:Nez.Mathf.incrementWithWrap(System.Int32,System.Int32)">
            <summary>
            increments t and ensures it is always greater than or equal to 0 and less than length
            </summary>
            <param name="t">T.</param>
            <param name="length">Length.</param>
        </member>
        <member name="M:Nez.Mathf.decrementWithWrap(System.Int32,System.Int32)">
            <summary>
            decrements t and ensures it is always greater than or equal to 0 and less than length
            </summary>
            <returns>The with wrap.</returns>
            <param name="t">T.</param>
            <param name="length">Length.</param>
        </member>
        <member name="M:Nez.Mathf.pingPong(System.Single,System.Single)">
            <summary>
            ping-pongs t so that it is never larger than length and never smaller than 0
            </summary>
            <returns>The pong.</returns>
            <param name="t">T.</param>
            <param name="length">Length.</param>
        </member>
        <member name="M:Nez.Mathf.signThreshold(System.Single,System.Single)">
            <summary>
            if value >= threshold returns its sign else returns 0
            </summary>
            <returns>The threshold.</returns>
            <param name="value">Value.</param>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.Mathf.deltaAngle(System.Single,System.Single)">
            <summary>
            Calculates the shortest difference between two given angles in degrees
            </summary>
            <returns>The angle.</returns>
            <param name="current">Current.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:Nez.Mathf.deltaAngleRadians(System.Single,System.Single)">
            <summary>
            Calculates the shortest difference between two given angles given in radians
            </summary>
            <returns>The angle.</returns>
            <param name="current">Current.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:Nez.Mathf.approach(System.Single,System.Single,System.Single)">
            <summary>
            moves start towards end by shift amount clamping the result. start can be less than or greater than end.
            example: start is 2, end is 10, shift is 4 results in 6
            </summary>
            <param name="start">Start.</param>
            <param name="end">End.</param>
            <param name="shift">Shift.</param>
        </member>
        <member name="M:Nez.Mathf.approachAngle(System.Single,System.Single,System.Single)">
            <summary>
            moves start angle towards end angle by shift amount clamping the result and choosing the shortest path. start can be less than or greater than end.
            example 1: start is 30, end is 100, shift is 25 results in 55
            example 2: start is 340, end is 30, shift is 25 results in 5 (365 is wrapped to 5)
            </summary>
            <param name="start">Start.</param>
            <param name="end">End.</param>
            <param name="shift">Shift.</param>
        </member>
        <member name="M:Nez.Mathf.approachAngleRadians(System.Single,System.Single,System.Single)">
            <summary>
            moves start angle towards end angle by shift amount (all in radians) clamping the result and choosing the shortest path. start can be less than or greater than end.
            this method works very similar to approachAngle, the only difference is use of radians instead of degrees and wrapping at 2*Pi instead of 360.
            </summary>
            <param name="start">Start.</param>
            <param name="end">End.</param>
            <param name="shift">Shift.</param>
        </member>
        <member name="M:Nez.Mathf.approximately(System.Single,System.Single,System.Single)">
            <summary>
            checks to see if two values are approximately the same using an acceptable tolerance for the check
            </summary>
            <param name="value1">Value1.</param>
            <param name="value2">Value2.</param>
            <param name="tolerance">Tolerance.</param>
        </member>
        <member name="M:Nez.Mathf.minOf(System.Single,System.Single,System.Single)">
            <summary>
            returns the minimum of the passed in values
            </summary>
            <returns>The of.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="c">C.</param>
        </member>
        <member name="M:Nez.Mathf.maxOf(System.Single,System.Single,System.Single)">
            <summary>
            returns the maximum of the passed in values
            </summary>
            <returns>The of.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="c">C.</param>
        </member>
        <member name="M:Nez.Mathf.minOf(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            returns the minimum of the passed in values
            </summary>
            <returns>The of.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="c">C.</param>
            <param name="d">D.</param>
        </member>
        <member name="M:Nez.Mathf.minOf(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            returns the minimum of the passed in values
            </summary>
            <returns>The of.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="c">C.</param>
            <param name="d">D.</param>
        </member>
        <member name="M:Nez.Mathf.maxOf(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            returns the maximum of the passed in values
            </summary>
            <returns>The of.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="c">C.</param>
            <param name="d">D.</param>
        </member>
        <member name="M:Nez.Mathf.maxOf(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            returns the maximum of the passed in values
            </summary>
            <returns>The of.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="c">C.</param>
            <param name="d">D.</param>
        </member>
        <member name="M:Nez.Mathf.between(System.Single,System.Single,System.Single)">
            <summary>
            checks to see if value is between min/max inclusive of min/max
            </summary>
            <param name="value">Value.</param>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.Mathf.between(System.Int32,System.Int32,System.Int32)">
            <summary>
            checks to see if value is between min/max inclusive of min/max
            </summary>
            <param name="value">Value.</param>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.Mathf.isEven(System.Int32)">
            <summary>
            returns true if value is even
            </summary>
            <returns><c>true</c>, if even was ised, <c>false</c> otherwise.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.Mathf.isOdd(System.Int32)">
            <summary>
            returns true if value is odd
            </summary>
            <returns><c>true</c>, if odd was ised, <c>false</c> otherwise.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.Mathf.roundWithRoundedAmount(System.Single,System.Single@)">
            <summary>
            rounds value and returns it and the amount that was rounded
            </summary>
            <returns>The with remainder.</returns>
            <param name="value">Value.</param>
            <param name="roundedAmount">roundedAmount.</param>
        </member>
        <member name="M:Nez.Mathf.map01(System.Single,System.Single,System.Single)">
            <summary>
            Maps a value from some arbitrary range to the 0 to 1 range
            </summary>
            <param name="value">Value.</param>
            <param name="min">Lminimum value.</param>
            <param name="max">maximum value</param>
        </member>
        <member name="M:Nez.Mathf.map10(System.Single,System.Single,System.Single)">
            <summary>
            Maps a value from some arbitrary range to the 1 to 0 range. this is just the reverse of map01
            </summary>
            <param name="value">Value.</param>
            <param name="min">Lminimum value.</param>
            <param name="max">maximum value</param>
        </member>
        <member name="M:Nez.Mathf.map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            mapps value (which is in the range leftMin - leftMax) to a value in the range rightMin - rightMax
            </summary>
            <param name="value">Value.</param>
            <param name="leftMin">Left minimum.</param>
            <param name="leftMax">Left max.</param>
            <param name="rightMin">Right minimum.</param>
            <param name="rightMax">Right max.</param>
        </member>
        <member name="M:Nez.Mathf.roundToNearest(System.Single,System.Single)">
            <summary>
            rounds value to the nearest number in steps of roundToNearest. Ex: found 127 to nearest 5 results in 125
            </summary>
            <returns>The to nearest.</returns>
            <param name="value">Value.</param>
            <param name="roundToNearest">Round to nearest.</param>
        </member>
        <member name="M:Nez.Mathf.hypotenuse(System.Single,System.Single)">
            <summary>
            returns sqrt( x * x + y * y )
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Mathf.sqrt(System.Single)">
            <summary>
            Returns the square root
            </summary>
            <param name="val">Value.</param>
        </member>
        <member name="M:Nez.Mathf.sin(System.Single)">
            <summary>
            Returns the sine of angle in radians
            </summary>
            <param name="f">F.</param>
        </member>
        <member name="M:Nez.Mathf.cos(System.Single)">
            <summary>
            Returns the cosine of angle in radians
            </summary>
            <param name="f">F.</param>
        </member>
        <member name="M:Nez.Mathf.acos(System.Single)">
            <summary>
            Returns the arc-cosine of f: the angle in radians whose cosine is f
            </summary>
            <param name="f">F.</param>
        </member>
        <member name="M:Nez.Mathf.atan2(System.Single,System.Single)">
            <summary>
            returns the angle whose tangent is the quotient (y/x) of two specified numbers
            </summary>
            <param name="y">The y coordinate.</param>
            <param name="x">The x coordinate.</param>
        </member>
        <member name="M:Nez.Mathf.rotateAround(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            helper for moving a value around in a circle.
            </summary>
        </member>
        <member name="M:Nez.Mathf.rotateAround(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            the rotation is relative to the current position not the total rotation. For example, if you are currently at 90 degrees and
            want to rotate to 135 degrees, you would use an angle of 45, not 135.
            </summary>
            <returns>The around.</returns>
            <param name="point">Point.</param>
            <param name="center">Center.</param>
            <param name="angleInDegrees">Angle in degrees.</param>
        </member>
        <member name="M:Nez.Mathf.pointOnCircle(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            gets a point on the circumference of the circle given its center, radius and angle. 0 degrees is 3 o'clock.
            </summary>
            <returns>The on circle.</returns>
            <param name="circleCenter">Circle center.</param>
            <param name="radius">Radius.</param>
            <param name="angleInDegrees">Angle in degrees.</param>
        </member>
        <member name="M:Nez.Mathf.lissajou(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            lissajou curve
            </summary>
            <param name="xFrequency">X frequency.</param>
            <param name="yFrequency">Y frequency.</param>
            <param name="xMagnitude">X magnitude.</param>
            <param name="yMagnitude">Y magnitude.</param>
            <param name="phase">Phase.</param>
        </member>
        <member name="M:Nez.Mathf.lissajouDamped(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            damped version of a lissajou curve with oscillation between 0 and max magnitude over time. Damping should be between 0 and 1 for best
            results. oscillationInterval is the time in seconds for half of the animation loop to complete.
            </summary>
            <returns>The damped.</returns>
            <param name="xFrequency">X frequency.</param>
            <param name="yFrequency">Y frequency.</param>
            <param name="xMagnitude">X magnitude.</param>
            <param name="yMagnitude">Y magnitude.</param>
            <param name="phase">Phase.</param>
            <param name="damping">Damping.</param>
            <param name="oscillationInterval">Oscillation interval.</param>
        </member>
        <member name="F:Nez.Physics.allLayers">
            <summary>
            default value for all methods that accept a layerMask
            </summary>
        </member>
        <member name="F:Nez.Physics.gravity">
            <summary>
            convenience field for storing a gravity value globally 
            </summary>
        </member>
        <member name="F:Nez.Physics.spatialHashCellSize">
            <summary>
            cell size used when reset is called and a new SpatialHash is created
            </summary>
        </member>
        <member name="F:Nez.Physics.raycastsHitTriggers">
            <summary>
            Do raycasts detect Colliders configured as triggers?
            </summary>
        </member>
        <member name="F:Nez.Physics.raycastsStartInColliders">
            <summary>
            Do ray/line casts that start inside a collider detect those colliders?
            </summary>
        </member>
        <member name="F:Nez.Physics._hitArray">
            <summary>
            we keep this around to avoid allocating it every time a raycast happens
            </summary>
        </member>
        <member name="F:Nez.Physics._colliderArray">
            <summary>
            allocation avoidance for overlap checks and shape casts
            </summary>
        </member>
        <member name="M:Nez.Physics.clear">
            <summary>
            removes all colliders from the SpatialHash
            </summary>
        </member>
        <member name="M:Nez.Physics.debugDraw(System.Single)">
            <summary>
            debug draws the contents of the spatial hash. Note that Core.debugRenderEnabled must be true or nothing will be displayed.
            </summary>
            <param name="secondsToDisplay">Seconds to display.</param>
        </member>
        <member name="M:Nez.Physics.getAllColliders">
            <summary>
            gets all the Colliders managed by the SpatialHash
            </summary>
            <returns>The all colliders.</returns>
        </member>
        <member name="M:Nez.Physics.addCollider(Nez.Collider)">
            <summary>
            adds the collider to the physics system
            </summary>
            <param name="collider">Collider.</param>
        </member>
        <member name="M:Nez.Physics.removeCollider(Nez.Collider)">
            <summary>
            removes the collider from the physics system
            </summary>
            <returns>The collider.</returns>
            <param name="collider">Collider.</param>
        </member>
        <member name="M:Nez.Physics.updateCollider(Nez.Collider)">
            <summary>
            updates the colliders position in the physics system. This essentially just removes then re-adds the Collider with its
            new bounds
            </summary>
            <param name="collider">Collider.</param>
        </member>
        <member name="M:Nez.Physics.linecast(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            casts a line from start to end and returns the first hit of a collider that matches layerMask
            </summary>
            <param name="start">Start.</param>
            <param name="end">End.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.linecastAll(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Nez.RaycastHit[],System.Int32)">
            <summary>
            casts a line through the spatial hash and fills the hits array up with any colliders that the line hits
            </summary>
            <returns>The all.</returns>
            <param name="start">Start.</param>
            <param name="end">End.</param>
            <param name="hits">Hits.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.overlapRectangle(Nez.RectangleF,System.Int32)">
            <summary>
            check if any collider falls within a rectangular area
            </summary>
            <returns>The rectangle.</returns>
            <param name="rect">Rect.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.overlapRectangle(Nez.RectangleF@,System.Int32)">
            <summary>
            check if any collider falls within a rectangular area
            </summary>
            <returns>The rectangle.</returns>
            <param name="rect">Rect.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.overlapRectangleAll(Nez.RectangleF@,Nez.Collider[],System.Int32)">
            <summary>
            gets all the colliders that fall within the specified rect
            </summary>
            <returns>the number of Colliders returned</returns>
            <param name="rect">Rect.</param>
            <param name="results">Results.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.overlapCircle(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32)">
            <summary>
            check if any collider falls within a circular area. Returns the first Collider encountered.
            </summary>
            <returns>The circle.</returns>
            <param name="center">Center.</param>
            <param name="radius">Radius.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.overlapCircleAll(Microsoft.Xna.Framework.Vector2,System.Single,Nez.Collider[],System.Int32)">
            <summary>
            gets all the colliders that fall within the specified circle
            </summary>
            <returns>the number of Colliders returned</returns>
            <param name="center">Center.</param>
            <param name="radius">Radius.</param>
            <param name="results">Results.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.boxcastBroadphase(Nez.RectangleF,System.Int32)">
            <summary>
            returns all colliders with bounds that are intersected by collider.bounds. Note that this is a broadphase check so it
            only checks bounds and does not do individual Collider-to-Collider checks!
            </summary>
            <param name="bounds">Bounds.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.boxcastBroadphase(Nez.RectangleF@,System.Int32)">
            <summary>
            returns all colliders with bounds that are intersected by collider.bounds. Note that this is a broadphase check so it
            only checks bounds and does not do individual Collider-to-Collider checks!
            </summary>
            <param name="bounds">Bounds.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Physics.boxcastBroadphaseExcludingSelf(Nez.Collider,System.Int32)">
            <summary>
            returns all colliders with bounds that are intersected by collider.bounds excluding the passed-in collider (self)
            </summary>
            <returns>The neighbors excluding self.</returns>
            <param name="collider">Collider.</param>
        </member>
        <member name="M:Nez.Physics.boxcastBroadphaseExcludingSelf(Nez.Collider,Nez.RectangleF@,System.Int32)">
            <summary>
            returns all colliders that are intersected by bounds excluding the passed-in collider (self).
            this method is useful if you want to create the swept bounds on your own for other queries
            </summary>
            <returns>The excluding self.</returns>
            <param name="collider">Collider.</param>
            <param name="bounds">Bounds.</param>
        </member>
        <member name="M:Nez.Physics.boxcastBroadphaseExcludingSelf(Nez.Collider,System.Single,System.Single,System.Int32)">
            <summary>
            returns all colliders that are intersected by collider.bounds expanded to incorporate deltaX/deltaY
            excluding the passed-in collider (self)
            </summary>
            <returns>The neighbors excluding self.</returns>
            <param name="collider">Collider.</param>
        </member>
        <member name="T:Nez.Ray2D">
            <summary>
            while technically not a ray (rays are just start and direction) it does double duty as both a line and a ray.
            </summary>
        </member>
        <member name="F:Nez.Spatial.SpatialHash._cellSize">
            <summary>
            the size of each cell in the hash
            </summary>
        </member>
        <member name="F:Nez.Spatial.SpatialHash._inverseCellSize">
            <summary>
            1 over the cell size. cached result due to it being used a lot.
            </summary>
        </member>
        <member name="F:Nez.Spatial.SpatialHash._overlapTestBox">
            <summary>
            cached box used for overlap checks
            </summary>
        </member>
        <member name="F:Nez.Spatial.SpatialHash._overlapTestCirce">
            <summary>
            cached circle used for overlap checks
            </summary>
        </member>
        <member name="F:Nez.Spatial.SpatialHash._cellDict">
            <summary>
            the Dictionary that holds all of the data
            </summary>
        </member>
        <member name="F:Nez.Spatial.SpatialHash._tempHashset">
            <summary>
            shared HashSet used to return collision info
            </summary>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.cellCoords(System.Int32,System.Int32)">
            <summary>
            gets the cell x,y values for a world-space x,y value
            </summary>
            <returns>The coords.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.cellCoords(System.Single,System.Single)">
            <summary>
            gets the cell x,y values for a world-space x,y value
            </summary>
            <returns>The coords.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.cellAtPosition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            gets the cell at the world-space x,y value. If the cell is empty and createCellIfEmpty is true a new cell will be created.
            </summary>
            <returns>The at position.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="createCellIfEmpty">If set to <c>true</c> create cell if empty.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.register(Nez.Collider)">
            <summary>
            adds the object to the SpatialHash
            </summary>
            <param name="collider">Object.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.remove(Nez.Collider)">
            <summary>
            removes the object from the SpatialHash
            </summary>
            <param name="collider">Collider.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.removeWithBruteForce(Nez.Collider)">
            <summary>
            removes the object from the SpatialHash using a brute force approach
            </summary>
            <param name="obj">Object.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.debugDraw(System.Single,System.Single)">
            <summary>
            debug draws the contents of the spatial hash. Note that Core.debugRenderEnabled must be true or nothing will be displayed.
            </summary>
            <param name="secondsToDisplay">Seconds to display.</param>
            <param name="textScale">Text scale.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.getAllObjects">
            <summary>
            returns all the Colliders in the SpatialHash
            </summary>
            <returns>The all objects.</returns>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.aabbBroadphase(Nez.RectangleF@,Nez.Collider,System.Int32)">
            <summary>
            returns all objects in cells that the bounding box intersects
            </summary>
            <returns>The neighbors.</returns>
            <param name="bounds">Bounds.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.linecast(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Nez.RaycastHit[],System.Int32)">
            <summary>
            casts a line through the spatial hash and fills the hits array up with any colliders that the line hits
            </summary>
            <returns>the number of Colliders returned</returns>
            <param name="start">Start.</param>
            <param name="end">End.</param>
            <param name="hits">Hits.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.overlapRectangle(Nez.RectangleF@,Nez.Collider[],System.Int32)">
            <summary>
            gets all the colliders that fall within the specified rect
            </summary>
            <returns>the number of Colliders returned</returns>
            <param name="rect">Rect.</param>
            <param name="results">Results.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <member name="M:Nez.Spatial.SpatialHash.overlapCircle(Microsoft.Xna.Framework.Vector2,System.Single,Nez.Collider[],System.Int32)">
            <summary>
            gets all the colliders that fall within the specified circle
            </summary>
            <returns>the number of Colliders returned</returns>
            <param name="circleCenter">Circle center.</param>
            <param name="radius">Radius.</param>
            <param name="results">Results.</param>
            <param name="layerMask">Layer mask.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Nez.Spatial.IntIntDictionary" -->
        <member name="M:Nez.Spatial.IntIntDictionary.getKey(System.Int32,System.Int32)">
            <summary>
            computes and returns a hash key based on the x and y value. basically just packs the 2 ints into a long.
            </summary>
            <returns>The key.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Spatial.IntIntDictionary.remove(Nez.Collider)">
            <summary>
            removes the collider from the Lists the Dictionary stores using a brute force approach
            </summary>
            <param name="obj">Object.</param>
        </member>
        <member name="M:Nez.Spatial.IntIntDictionary.getAllObjects">
            <summary>
            gets all the Colliders currently in the dictionary
            </summary>
            <returns>The all objects.</returns>
        </member>
        <member name="M:Nez.Spatial.IntIntDictionary.clear">
            <summary>
            clears the backing dictionary
            </summary>
        </member>
        <member name="M:Nez.Spatial.RaycastResultParser.checkRayIntersection(System.Int32,System.Int32,System.Collections.Generic.List{Nez.Collider})">
            <summary>
            returns true if the hits array gets filled. cell must not be null!
            </summary>
            <returns><c>true</c>, if ray intersection was checked, <c>false</c> otherwise.</returns>
            <param name="ray">Ray.</param>
            <param name="cellX">Cell x.</param>
            <param name="cellY">Cell y.</param>
            <param name="cell">Cell.</param>
            <param name="hits">Hits.</param>
            <param name="hitCounter">Hit counter.</param>
        </member>
        <member name="T:Nez.Spatial.QuadTree`1">
            <summary>
            A QuadTree Object that provides fast and efficient storage of objects in a world space.
            </summary>
            <typeparam name="T">Any object implementing IQuadStorable.</typeparam>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="rect">The area this QuadTree object will encompass.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="x">The top-left position of the area rectangle.</param>
            <param name="y">The top-right position of the area rectangle.</param>
            <param name="width">The width of the area rectangle.</param>
            <param name="height">The height of the area rectangle.</param>
        </member>
        <member name="P:Nez.Spatial.QuadTree`1.quadRect">
            <summary>
            Gets the rectangle that bounds this QuadTree
            </summary>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.getObjects(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="rect">The rectangle to find objects in.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.getObjects(Microsoft.Xna.Framework.Rectangle,System.Collections.Generic.List{`0}@)">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="rect">The rectangle to find objects in.</param>
            <param name="results">A reference to a list that will be populated with the results.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.getAllObjects">
            <summary>
            Get all objects in this Quad, and it's children.
            </summary>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.move(`0)">
            <summary>
            Moves the object in the tree
            </summary>
            <param name="item">The item that has moved</param>
        </member>
        <member name="P:Nez.Spatial.QuadTree`1.rootQuad">
            <summary>
            The top left child for this QuadTree, only usable in debug mode
            </summary>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.Add(`0)">
            <summary>
             Adds an item to the QuadTree
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.Contains(`0)">
            <summary>
            Determines whether the QuadTree contains a specific value.
            </summary>
            
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.CopyTo(`0[],System.Int32)">
            <summary>
             Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="P:Nez.Spatial.QuadTree`1.Count">
            <summary>
             Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Nez.Spatial.QuadTree`1.IsReadOnly">
            <summary>
             Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.Remove(`0)">
            <summary>
             Removes the first occurrence of a specific object from the QuadTree
            </summary>
            <returns>
             true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.GetEnumerator">
            <summary>
             Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nez.Spatial.QuadTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
             Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Nez.Spatial.QuadTreeObject`1">
            <summary>
            Used internally to attach an Owner to each object stored in the QuadTree
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Nez.Spatial.QuadTreeObject`1.data">
            <summary>
            The wrapped data value
            </summary>
        </member>
        <member name="F:Nez.Spatial.QuadTreeObject`1.owner">
            <summary>
            The QuadTreeNode that owns this object
            </summary>
        </member>
        <member name="M:Nez.Spatial.QuadTreeObject`1.#ctor(`0)">
            <summary>
            Wraps the data value
            </summary>
            <param name="data">The data value to wrap</param>
        </member>
        <member name="T:Nez.Spatial.QuadTreeNode`1">
            <summary>
            A QuadTree Object that provides fast and efficient storage of objects in a world space.
            </summary>
            <typeparam name="T">Any object implementing IQuadStorable.</typeparam>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.quadRect">
            <summary>
            The area this QuadTree represents.
            </summary>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.topLeftChild">
            <summary>
            The top left child for this QuadTree
            </summary>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.topRightChild">
            <summary>
            The top right child for this QuadTree
            </summary>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.bottomLeftChild">
            <summary>
            The bottom left child for this QuadTree
            </summary>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.bottomRightChild">
            <summary>
            The bottom right child for this QuadTree
            </summary>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.parent">
            <summary>
            This QuadTree's parent
            </summary>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.count">
            <summary>
            How many total objects are contained within this QuadTree (ie, includes children)
            </summary>
        </member>
        <member name="P:Nez.Spatial.QuadTreeNode`1.isEmptyLeaf">
            <summary>
            Returns true if this is a empty leaf node
            </summary>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="rect">The area this QuadTree object will encompass.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a QuadTree for the specified area.
            </summary>
            <param name="x">The top-left position of the area rectangle.</param>
            <param name="y">The top-right position of the area rectangle.</param>
            <param name="width">The width of the area rectangle.</param>
            <param name="height">The height of the area rectangle.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.add(Nez.Spatial.QuadTreeObject{`0})">
            <summary>
            Add an item to the object list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.remove(Nez.Spatial.QuadTreeObject{`0})">
            <summary>
            Remove an item from the object list.
            </summary>
            <param name="item">The object to remove.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.objectCount">
            <summary>
            Get the total for all objects in this QuadTree, including children.
            </summary>
            <returns>The number of objects contained within this QuadTree and its children.</returns>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.subdivide">
            <summary>
            Subdivide this QuadTree and move it's children into the appropriate Quads where applicable.
            </summary>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.getDestinationTree(Nez.Spatial.QuadTreeObject{`0})">
            <summary>
            Get the child Quad that would contain an object.
            </summary>
            <param name="item">The object to get a child for.</param>
            <returns></returns>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.clear">
            <summary>
            Clears the QuadTree of all objects, including any objects living in its children.
            </summary>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.delete(Nez.Spatial.QuadTreeObject{`0},System.Boolean)">
            <summary>
            Deletes an item from this QuadTree. If the object is removed causes this Quad to have no objects in its children, it's children will be removed as well.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="clean">Whether or not to clean the tree</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.insert(Nez.Spatial.QuadTreeObject{`0})">
            <summary>
            Insert an item into this QuadTree object.
            </summary>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.getObjects(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="searchRect">The rectangle to find objects in.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.getObjects(Microsoft.Xna.Framework.Rectangle,System.Collections.Generic.List{`0}@)">
            <summary>
            Get the objects in this tree that intersect with the specified rectangle.
            </summary>
            <param name="searchRect">The rectangle to find objects in.</param>
            <param name="results">A reference to a list that will be populated with the results.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.getAllObjects(System.Collections.Generic.List{`0}@)">
            <summary>
            Get all objects in this Quad, and it's children.
            </summary>
            <param name="results">A reference to a list in which to store the objects.</param>
        </member>
        <member name="M:Nez.Spatial.QuadTreeNode`1.move(Nez.Spatial.QuadTreeObject{`0})">
            <summary>
            Moves the QuadTree object in the tree
            </summary>
            <param name="item">The item that has moved</param>
        </member>
        <member name="T:Nez.Spatial.IQuadTreeStorable">
            <summary>
            Interface to define Rect, so that QuadTree knows how to store the object.
            </summary>
        </member>
        <member name="P:Nez.Spatial.IQuadTreeStorable.bounds">
            <summary>
            The rectangle that defines the object's boundaries.
            </summary>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.populateTilePositions">
            <summary>
            loops through the tiles and sets each tiles x/y value
            </summary>
            <returns>The tile positions.</returns>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.getTile(System.Int32,System.Int32)">
            <summary>
            gets the TiledTile at the x/y coordinates. Note that these are tile coordinates not world coordinates!
            </summary>
            <returns>The tile.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.getTile``1(System.Int32,System.Int32)">
            <summary>
            gets the TiledTile at the x/y coordinates. Note that these are tile coordinates not world coordinates!
            </summary>
            <returns>The tile.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.setTile(Nez.Tiled.TiledTile)">
            <summary>
            sets the tile and updates its tileset
            </summary>
            <returns>The tile.</returns>
            <param name="tile">Tile.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.removeTile(System.Int32,System.Int32)">
            <summary>
            nulls out the tile at the x/y coordinates
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.getBoundsForTile(Nez.Tiled.TiledTile,Nez.Tiled.TiledMap)">
            <summary>
            returns the bounds Rectangle of the passed in tile
            </summary>
            <returns>The bounds for tile.</returns>
            <param name="tile">Tile.</param>
            <param name="tilemap">Tilemap.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.getTileAtWorldPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            note that world position assumes that the Vector2 was normalized to be in the tilemaps coordinates. i.e. if the tilemap
            is not at 0,0 then the world position should be moved so that it takes into consideration the tilemap offset from 0,0.
            Example: if the tilemap is at 300,300 then the passed in value should be worldPos - (300,300)
            </summary>
            <returns>The tile at world position.</returns>
            <param name="pos">Position.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.getCollisionRectangles">
            <summary>
            Returns a list of rectangles in tile space, where any non-null tile is combined into bounding regions
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.findBoundsRect(System.Int32,System.Int32,System.Int32,System.Nullable{System.Boolean}[])">
            <summary>
            Finds the largest bounding rect around tiles between startX and endX, starting at startY and going
            down as far as possible
            </summary>
            <returns>The bounds rect.</returns>
            <param name="startX">Start x.</param>
            <param name="endX">End x.</param>
            <param name="startY">Start y.</param>
            <param name="checkedIndexes">Checked indexes.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.getTilesIntersectingBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            gets a List of all the TiledTiles that intersect the passed in Rectangle. The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The tiles intersecting bounds.</returns>
            <param name="bounds">Bounds.</param>
        </member>
        <member name="M:Nez.Tiled.TiledIsometricTiledLayer.linecast(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            casts a line from start to end returning the first solid tile it intersects. Note that start and end and clamped to the tilemap
            bounds so make sure you pass in valid positions else you may get odd results!
            </summary>
            <param name="start">Start.</param>
            <param name="end">End.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getTilesetForTileId(System.Int32)">
            <summary>
            gets the TiledTileset for the given tileId
            </summary>
            <returns>The tileset for tile identifier.</returns>
            <param name="tileId">Identifier.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getTilesetTile(System.Int32)">
            <summary>
            returns the TiledTilesetTile for the given id or null if none exists. TiledTilesetTiles exist only for animated tiles and tiles with
            properties set.
            </summary>
            <returns>The tileset tile.</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getLayerIndex(System.String)">
            <summary>
            gets the index in the layers List of the layer with name
            </summary>
            <returns>The layer index.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getLayer(System.String)">
            <summary>
            gets the TiledLayer by name
            </summary>
            <returns>The layer.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getLayer(System.Int32)">
            <summary>
            gets the TiledLayer at the specified index
            </summary>
            <param name="index"></param>
            <returns>The Layer.</returns>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getLayer``1(System.Int32)">
            <summary>
            gets the TiledLayer by index
            </summary>
            <returns>The layer.</returns>
            <param name="index">Index.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getLayer``1(System.String)">
            <summary>
            gets the TiledLayer by name
            </summary>
            <returns>The layer.</returns>
            <param name="name">Name.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Tiled.TiledMap.getObjectGroup(System.String)">
            <summary>
            gets the TiledObjectGroup with the given name
            </summary>
            <returns>The object group.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.update">
            <summary>
            handles calling update on all animated tiles
            </summary>
        </member>
        <member name="M:Nez.Tiled.TiledMap.draw(Nez.Batcher,Microsoft.Xna.Framework.Vector2,System.Single,Nez.RectangleF)">
            <summary>
            calls draw on each visible layer
            </summary>
            <param name="batcher">Sprite batch.</param>
            <param name="position">Position.</param>
            <param name="layerDepth">Layer depth.</param>
            <param name="cameraClipBounds">Camera clip bounds.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.worldToTilePosition(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            converts from world to tile position clamping to the tilemap bounds
            </summary>
            <returns>The to tile position.</returns>
            <param name="pos">Position.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.isometricWorldToTilePosition(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            converts from world to tile position for isometric map clamping to the tilemap bounds
            </summary>
            <returns>The to tile position.</returns>
            <param name="pos">Position.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.isometricWorldToTilePosition(System.Single,System.Single,System.Boolean)">
            <summary>
            converts from world to tile position for isometric map clamping to the tilemap bounds
            </summary>
            <returns>The to tile position.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nez.Tiled.TiledMap.isometricTileToWorldPosition(Microsoft.Xna.Framework.Point)" -->
        <member name="M:Nez.Tiled.TiledMap.isometricTileToWorldPosition(System.Int32,System.Int32)">
            <summary>
            converts from isometric tile to world position
            </summary>
            <returns>The to world position.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.worldToTilePositionX(System.Single,System.Boolean)">
            <summary>
            converts from world to tile position clamping to the tilemap bounds
            </summary>
            <returns>The to tile position x.</returns>
            <param name="x">The x coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.worldToTilePositionY(System.Single,System.Boolean)">
            <summary>
            converts from world to tile position clamping to the tilemap bounds
            </summary>
            <returns>The to tile position y.</returns>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.tileToWorldPosition(Microsoft.Xna.Framework.Point)">
            <summary>
            converts from tile to world position
            </summary>
            <returns>The to world position.</returns>
            <param name="pos">Position.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.tileToWorldPositionX(System.Int32)">
            <summary>
            converts from tile to world position
            </summary>
            <returns>The to world position x.</returns>
            <param name="x">The x coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMap.tileToWorldPositionY(System.Int32)">
            <summary>
            converts from tile to world position
            </summary>
            <returns>The to world position y.</returns>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="P:Nez.Tiled.TiledObject.position">
            <summary>
            wraps the x/y fields in a Vector
            </summary>
        </member>
        <member name="M:Nez.Tiled.TiledObjectGroup.objectWithName(System.String)">
            <summary>
            gets the first TiledObject with the given name
            </summary>
            <returns>The with name.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Tiled.TiledObjectGroup.objectsWithName(System.String)">
            <summary>
            gets all the TiledObjects with the given name
            </summary>
            <returns>The objects with matching names.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Tiled.TiledObjectGroup.objectsWithType(System.String)">
            <summary>
            gets all the TiledObjects with the given type
            </summary>
            <returns>The objects with matching types.</returns>
            <param name="type">Type.</param>
        </member>
        <member name="P:Nez.Tiled.TiledTile.textureRegion">
            <summary>
            returns the Subtexture that maps to this particular tile
            </summary>
            <value>The texture region.</value>
        </member>
        <member name="P:Nez.Tiled.TiledTile.tilesetTile">
            <summary>
            gets the TiledtilesetTile for this TiledTile if it exists. TiledtilesetTile only exist for animated tiles and tiles with attached
            properties.
            </summary>
            <value>The tileset tile.</value>
        </member>
        <member name="F:Nez.Tiled.TiledTile._tilesetTileIndex">
            <summary>
            we use this for 3 states: HasValue is false means we havent yet checked for the TiledTilesetTile, less than 0 means there is no
            TiledTilesetTile for this, and 0+ means we have a TiledTilesetTile.
            </summary>
        </member>
        <member name="M:Nez.Tiled.TiledTile.setTileId(System.Int32)">
            <summary>
            sets a new Tile id for this tile and invalidates the previous tilesetTileIndex
            </summary>
            <returns>The tile identifier.</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTile.getTileRectangle(Nez.Tiled.TiledMap)">
            <summary>
            Rectangle that encompases this tile with origin on the top left
            </summary>
            <returns>The tile rectangle.</returns>
            <param name="tilemap">Tilemap.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTile.getWorldPosition(Nez.Tiled.TiledMap)">
            <summary>
            note that the origin is the top left so this position will represent that
            </summary>
            <returns>The world position.</returns>
            <param name="tilemap">Tilemap.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.populateTilePositions">
            <summary>
            loops through the tiles and sets each tiles x/y value
            </summary>
            <returns>The tile positions.</returns>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.getTile(System.Int32,System.Int32)">
            <summary>
            gets the TiledTile at the x/y coordinates. Note that these are tile coordinates not world coordinates!
            </summary>
            <returns>The tile.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.getTile``1(System.Int32,System.Int32)">
            <summary>
            gets the TiledTile at the x/y coordinates. Note that these are tile coordinates not world coordinates!
            </summary>
            <returns>The tile.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.setTile(Nez.Tiled.TiledTile)">
            <summary>
            sets the tile and updates its tileset
            </summary>
            <returns>The tile.</returns>
            <param name="tile">Tile.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.removeTile(System.Int32,System.Int32)">
            <summary>
            nulls out the tile at the x/y coordinates
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.getBoundsForTile(Nez.Tiled.TiledTile,Nez.Tiled.TiledMap)">
            <summary>
            returns the bounds Rectangle of the passed in tile
            </summary>
            <returns>The bounds for tile.</returns>
            <param name="tile">Tile.</param>
            <param name="tilemap">Tilemap.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.getTileAtWorldPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            note that world position assumes that the Vector2 was normalized to be in the tilemaps coordinates. i.e. if the tilemap
            is not at 0,0 then the world position should be moved so that it takes into consideration the tilemap offset from 0,0.
            Example: if the tilemap is at 300,300 then the passed in value should be worldPos - (300,300)
            </summary>
            <returns>The tile at world position.</returns>
            <param name="pos">Position.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.getCollisionRectangles">
            <summary>
            Returns a list of rectangles in tile space, where any non-null tile is combined into bounding regions
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.findBoundsRect(System.Int32,System.Int32,System.Int32,System.Nullable{System.Boolean}[])">
            <summary>
            Finds the largest bounding rect around tiles between startX and endX, starting at startY and going
            down as far as possible
            </summary>
            <returns>The bounds rect.</returns>
            <param name="layer">Layer.</param>
            <param name="startX">Start x.</param>
            <param name="endX">End x.</param>
            <param name="startY">Start y.</param>
            <param name="checkedIndexes">Checked indexes.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.getTilesIntersectingBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            gets a List of all the TiledTiles that intersect the passed in Rectangle. The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The tiles intersecting bounds.</returns>
            <param name="layer">Layer.</param>
            <param name="bounds">Bounds.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileLayer.linecast(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            casts a line from start to end returning the first solid tile it intersects. Note that start and end and clamped to the tilemap
            bounds so make sure you pass in valid positions else you may get odd results!
            </summary>
            <param name="start">Start.</param>
            <param name="end">End.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileset.getTileTextureRegion(System.Int32)">
            <summary>
            gets the Subtexture for the tile with id
            </summary>
            <returns>The tile texture region.</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="T:Nez.Tiled.TiledTilesetTile">
            <summary>
            these exist only for tiles with properties or animations
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledTilesetTile.isDestructable">
            <summary>
            returns the value of an "nez:isDestructable" property if present in the properties dictionary
            </summary>
            <value><c>true</c> if is destructable; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Nez.Tiled.TiledTilesetTile.isSlope">
            <summary>
            returns the value of a "nez:isSlope" property if present in the properties dictionary
            </summary>
            <value>The is slope.</value>
        </member>
        <member name="F:Nez.Tiled.TiledTilesetTile.isOneWayPlatform">
            <summary>
            returns the value of a "nez:isOneWayPlatform" property if present in the properties dictionary
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledTilesetTile.slopeTopLeft">
            <summary>
            returns the value of a "nez:slopeTopLeft" property if present in the properties dictionary
            </summary>
            <value>The slope top left.</value>
        </member>
        <member name="F:Nez.Tiled.TiledTilesetTile.slopeTopRight">
            <summary>
            returns the value of a "nez:slopeTopRight" property if present in the properties dictionary
            </summary>
            <value>The slope top right.</value>
        </member>
        <member name="F:Nez.Tiled.TiledTileAnimationFrame.tileId">
            <summary>
            tileId for this frame of the animation
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledTileAnimationFrame.duration">
            <summary>
            duration in seconds for this frame of the animation
            </summary>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.isSlope(Nez.Tiled.TiledTile)">
            <summary>
            passthrough to TilesetTile
            </summary>
            <returns>The slope.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.isOneWayPlatform(Nez.Tiled.TiledTile)">
            <summary>
            passthrough to TilesetTile
            </summary>
            <returns>The one way platform.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.getSlopeTopLeft(Nez.Tiled.TiledTile)">
            <summary>
            returns the slope top left taking flipping into account
            </summary>
            <returns>The slope top left.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.getSlopeTopRight(Nez.Tiled.TiledTile)">
            <summary>
            returns the slope top right taking flipping into account
            </summary>
            <returns>The slope top right.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.getSlope(Nez.Tiled.TiledTile)">
            <summary>
            calculates the slope based on the slope top left/right
            </summary>
            <returns>The slope.</returns>
            <param name="self">Self.</param>
            <param name="tileSize">Tile width.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.getSlopeOffset(Nez.Tiled.TiledTile)">
            <summary>
            returns the slope position on the left side of the tile. b in the y = mx + b equation
            </summary>
            <returns>The slope offset.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.getHighestSlopeEdge(Nez.Tiled.TiledTile)">
            <summary>
            returns the edge on the side that has the tallest side
            </summary>
            <returns>The bigest slope edge.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.Tiled.TiledTileExt.getNearestEdge(Nez.Tiled.TiledTile,System.Int32)">
            <summary>
            returns the nearest edge to worldPosition
            </summary>
            <returns>The nearest edge.</returns>
            <param name="self">Self.</param>
            <param name="worldPosition">World position.</param>
        </member>
        <member name="T:Nez.Tiled.TiledMapMover">
            <summary>
            WIP
            The TiledMapMover is a helper for moving objects around in a gravity-based Tiled map. It requires that the Entity it is on has a BoxCollider. The
            BoxCollider will be used in conjuntion with colliderHorizontal/VerticalInset for all collision detection.
            
            One way platforms can be jumped down through by moving your Transform down 1 pixel and calling CollisionState.clearLastGroundTile.
            
            If you plan to use slopes/one way platforms with the TiledMapMover some extra properties need to be added to your tiles in Tiled.
            They are listed below:
            - nez:isOneWayPlatform (bool): one way platforms will ignore all collisions except from above
            - nez:isSlope (bool): signifies if the tile is a slope. Requires the next two properties if it is
            - nez:slopeTopLeft (int): distance in pixels from the tiles top to the slope on the left side. For example, a 45 top-left to bottom-right
            tile |\ would have a slopeTopLeft of 0 and slopeTopRight of 15
            - nez:slopeTopRight (int): distance in pixels from the tiles top to the slope on the right side
            </summary>
        </member>
        <member name="T:Nez.Tiled.TiledMapMover.CollisionState">
            <summary>
            class used to house all the collision information from a call to move
            </summary>
        </member>
        <member name="M:Nez.Tiled.TiledMapMover.CollisionState.reset(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            resets collision state and does sub-pixel movement calculations
            </summary>
            <param name="motion">Motion.</param>
        </member>
        <member name="F:Nez.Tiled.TiledMapMover.colliderHorizontalInset">
            <summary>
            the inset on the horizontal plane that the BoxCollider will be shrunk by when moving vertically
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledMapMover.colliderVerticalInset">
            <summary>
            the inset on the vertical plane that the BoxCollider will be shrunk by when moving horizontally
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledMapMover.collisionLayer">
            <summary>
            the TiledTileLayer used for collision checks
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledMapMover.tiledMap">
            <summary>
            the TiledMap that contains collisionLayer
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledMapMover._collidingTiles">
            <summary>
            temporary storage for all the tiles that intersect the bounds being checked
            </summary>
        </member>
        <member name="F:Nez.Tiled.TiledMapMover._boxColliderBounds">
            <summary>
            temporary storage to avoid having to pass it around
            </summary>
        </member>
        <member name="M:Nez.Tiled.TiledMapMover.move(Microsoft.Xna.Framework.Vector2,Nez.BoxCollider,Nez.Tiled.TiledMapMover.CollisionState)">
            <summary>
            moves the Entity taking into account the tiled map
            </summary>
            <param name="motion">Motion.</param>
            <param name="boxCollider">Box collider.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMapMover.isSlopeCollisionRow(System.Int32)">
            <summary>
            Checks whether collision is occurring with a slope on a given row.
            </summary>
            <returns>Whether collision is occurring with a slope on a given row</returns>
            <param name="rowY">the row to check</param>
        </member>
        <member name="M:Nez.Tiled.TiledMapMover.testTileCollision(Nez.Tiled.TiledTile,Nez.Edge,System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Tests the tile for a collision. Returns via out the position in world space where the collision occured.
            </summary>
            <returns>The tile collision.</returns>
            <param name="tile">Tile.</param>
            <param name="edgeToTest">the opposite side of movement, the side the leading edge will collide with</param>
            <param name="perpindicularPosition">Perpindicular position.</param>
            <param name="leadingPosition">Leading position.</param>
            <param name="shouldTestSlopes">Should test slopes.</param>
            <param name="collisionResponse">Collision response.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMapMover.populateCollidingTiles(Microsoft.Xna.Framework.Rectangle,Nez.Edge)">
            <summary>
            gets a list of all the tiles intersecting bounds. The returned list is ordered for collision detection based on the
            direction passed in so they can be processed in order.
            </summary>
            <returns>The colliding tiles.</returns>
            <param name="bounds">Bounds.</param>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMapMover.worldToTilePosition(System.Single,Nez.Axis)">
            <summary>
            returns the tile position clamped to the tiled map
            </summary>
            <returns>The to tile position.</returns>
            <param name="worldPosition">World position.</param>
            <param name="axis">Axis.</param>
        </member>
        <member name="M:Nez.Tiled.TiledMapMover.collisionRectForSide(Nez.Edge,System.Int32)">
            <summary>
            gets a collision rect for the given side expanded to take into account motion
            </summary>
            <returns>The rect for side.</returns>
            <param name="side">Side.</param>
            <param name="motion">Motion.</param>
        </member>
        <member name="M:Nez.UI.UISkinStyleConfig.getStyleClasses">
            <summary>
            gets all the style class names included in the config object
            </summary>
            <returns>The styles.</returns>
        </member>
        <member name="M:Nez.UI.UISkinStyleConfig.getStyleNames(System.String)">
            <summary>
            gets all the style names in the config object for the given styleType
            </summary>
            <returns>The style names.</returns>
            <param name="styleType">Style type.</param>
        </member>
        <member name="M:Nez.UI.UISkinStyleConfig.getStyleDict(System.String,System.String)">
            <summary>
            gets a style config dict for the styleType -> styleName
            </summary>
            <returns>The style.</returns>
            <param name="styleType">Style type.</param>
            <param name="styleName">Style name.</param>
        </member>
        <member name="M:Nez.UI.Skin.createDefaultSkin">
            <summary>
            creates a default Skin that can be used for quick mockups. Includes button, textu button, checkbox, progress bar and slider styles.
            </summary>
            <returns>The default skin.</returns>
        </member>
        <member name="M:Nez.UI.Skin.#ctor(System.String,Nez.Systems.NezContentManager)">
            <summary>
            creates a UISkin from a UISkinConfig
            </summary>
            <param name="configName">the path of the UISkinConfig xnb</param>
            <param name="contentManager">Content manager.</param>
        </member>
        <member name="M:Nez.UI.Skin.setStylesForStyleClass``1(``0,System.Collections.Generic.Dictionary{System.String,System.Object},Nez.Systems.NezContentManager,System.String)">
            <summary>
            Recursively finds and sets all styles for a specific style config class that are within 
            the dictionary passed in. This allows skins to contain nested, dynamic style declarations.
            For example, it allows a SelectBoxStyle to contain a listStyle that is declared inline 
            (and not a reference).
            </summary>
            <param name="styleClass">The style config class instance that needs to be "filled out"</param>
            <param name="styleDict">A dictionary that represents one style name within the style config class (i.e. 'default').</param>
            <param name="styleName">The style name that the dictionary represents (i.e. 'default').</param>
            <typeparam name="T">The style config class type (i.e. SelectBoxStyle)</typeparam>
        </member>
        <member name="M:Nez.UI.Skin.addSubtextures(Nez.LibGdxAtlases.LibGdxAtlas)">
            <summary>
            Adds all named subtextures from the atlas. If NinePatchSubtextures are found they will be explicitly added as such.
            </summary>
            <param name="atlas">Atlas.</param>
        </member>
        <member name="M:Nez.UI.Skin.addSubtextures(Nez.TextureAtlases.TextureAtlas)">
            <summary>
            Adds all named subtextures from the atlas
            </summary>
            <param name="atlas">Atlas.</param>
        </member>
        <member name="M:Nez.UI.Skin.add``1(System.String,``0)">
            <summary>
            adds the typed resource to this skin
            </summary>
            <param name="name">Name.</param>
            <param name="resource">Resource.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.UI.Skin.add(System.String,System.Object,System.Type)">
            <summary>
            adds the typed resource to this skin
            </summary>
            <param name="name">Name.</param>
            <param name="resource">Resource.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.UI.Skin.remove``1(System.String)">
            <summary>
            removes the typed resource from this skin
            </summary>
            <param name="name">Name.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.UI.Skin.has``1(System.String)">
            <summary>
            checks to see if a typed resource exists with the given name
            </summary>
            <param name="name">Name.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.UI.Skin.get``1">
            <summary>
            First checks for a resource named "default". If it cant find default it will return either the first resource of type T
            or default(T) if none are found.
            </summary>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.UI.Skin.get``1(System.String)">
            <summary>
            Returns a named resource of the specified type or default(T) if it couldnt be found
            </summary>
            <param name="name">Name.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.UI.Skin.getSubtextureDrawable(System.String)">
            <summary>
            Returns a registered subtexture drawable. If no subtexture drawable is found but a Subtexture exists with the name, a
            subtexture drawable is created from the Subtexture and stored in the skin
            </summary>
            <returns>The subtexture drawable.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.UI.Skin.getDrawable(System.String)">
            <summary>
            Returns a registered drawable. If no drawable is found but a Subtexture/NinePatchSubtexture exists with the name, then the
            appropriate drawable is created and stored in the skin. If name is a color a PrimitiveDrawable will be created and stored.
            </summary>
            <returns>The drawable.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.UI.Skin.getTiledDrawable(System.String)">
            <summary>
            Returns a registered tiled drawable. If no tiled drawable is found but a Subtexture exists with the name, a tiled drawable is
            created from the Subtexture and stored in the skin
            </summary>
            <returns>The tiled drawable.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.UI.Skin.getNinePatchDrawable(System.String)">
            <summary>
            Returns a registered ninepatch. If no ninepatch is found but a Subtexture exists with the name, a ninepatch is created from the
            Subtexture and stored in the skin.
            </summary>
            <returns>The nine patch.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.UI.Skin.newTintedDrawable(System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a tinted copy of a drawable found in the skin via getDrawable. Note that the new drawable is NOT
            added to the skin! Tinting is only supported on SubtextureDrawables and NinePatchDrawables.
            </summary>
            <returns>The tinted drawable.</returns>
            <param name="name">Name.</param>
            <param name="tint">Tint.</param>
        </member>
        <member name="F:Nez.UI.Stage.isFullScreen">
            <summary>
            if true, the rawMousePosition will be used else the scaledMousePosition will be used. If your UI is in screen space
            and non-scaled (using the Scene.IFinalRenderDelegate for example) then set this to true so input is not scaled.
            </summary>
        </member>
        <member name="F:Nez.UI.Stage.gamepadActionButton">
            <summary>
            the button on the gamepad that activates the focused control
            </summary>
        </member>
        <member name="F:Nez.UI.Stage.keyboardEmulatesGamepad">
            <summary>
            if true (default) keyboard arrow keys and the keyboardActionKey will emulate a gamepad
            </summary>
        </member>
        <member name="F:Nez.UI.Stage.keyboardActionKey">
            <summary>
            the key that activates the focused control
            </summary>
        </member>
        <member name="M:Nez.UI.Stage.addElement``1(``0)">
            <summary>
            Adds an element to the root of the stage
            </summary>
            <param name="element">element.</param>
        </member>
        <member name="M:Nez.UI.Stage.disableDebug(Nez.UI.Element,Nez.UI.Element)">
            <summary>
            Disables debug on all elements recursively except the specified element and any children
            </summary>
            <param name="element">element.</param>
            <param name="except">Except.</param>
        </member>
        <member name="M:Nez.UI.Stage.getMousePosition">
            <summary>
            gets the appropriate mouse position (scaled vs raw) based on if this isFullScreen and if we have an entity
            </summary>
            <returns>The mouse position.</returns>
        </member>
        <member name="M:Nez.UI.Stage.updateInputMouse">
            <summary>
            Handle mouse input events.
            </summary>
        </member>
        <member name="M:Nez.UI.Stage.updateInputTouch">
            <summary>
            Handle all the touch input events.
            </summary>
        </member>
        <member name="M:Nez.UI.Stage.updateInputPoint(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,System.Boolean,Nez.UI.Element@)">
            <summary>
            Process events for Mouse or Touch input.
            </summary>
            <param name="inputPos">location of cursor</param>
            <param name="inputPressed">down this frame</param>
            <param name="inputReleased">up this frame</param>
            <param name="inputMoved">cursor in a different location</param>
            <param name="lastOver">last element that the cursor was over, ref is saved here for next update</param>
        </member>
        <member name="M:Nez.UI.Stage.updateInputDown(Microsoft.Xna.Framework.Vector2,Nez.UI.Element)">
            <summary>
            Mouse or touch is down this frame.
            </summary>
            <param name="inputPos">location of cursor</param>
            <param name="over">element under cursor</param>
        </member>
        <member name="M:Nez.UI.Stage.updateInputMoved(Microsoft.Xna.Framework.Vector2,Nez.UI.Element,Nez.UI.Element)">
            <summary>
            Mouse or touch is being moved.
            </summary>
            <param name="inputPos">location of cursor</param>
            <param name="over">element under cursor</param>
            <param name="lastOver">element that was previously under the cursor</param>
        </member>
        <member name="M:Nez.UI.Stage.updateInputReleased(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Mouse or touch is being released this frame.
            </summary>
            <param name="inputPos">location under cursor</param>
        </member>
        <member name="M:Nez.UI.Stage.handleMouseWheel(Nez.UI.Element)">
            <summary>
            bubbles the onMouseScrolled event from mouseOverElement to all parents until one of them handles it
            </summary>
            <returns>The mouse wheel.</returns>
            <param name="mouseOverElement">Mouse over element.</param>
        </member>
        <member name="M:Nez.UI.Stage.removeInputFocusListener(Nez.UI.Element)">
            <summary>
            Removes the listener from being notified for all touchDragged and touchUp events for the specified pointer and button. Note
            the listener may never receive a touchUp event if this method is used.
            </summary>
        </member>
        <member name="M:Nez.UI.Stage.clearKeyRepeatTimer">
            <summary>
            stops and nulls the keyRepeatTimer if it is running
            </summary>
        </member>
        <member name="M:Nez.UI.Stage.dispose">
            <summary>
            this should be called when the Component is removed to ensure all objects are freed
            </summary>
        </member>
        <member name="M:Nez.UI.Stage.getRoot">
            <summary>
            Returns the root group which holds all elements in the stageCoords
            </summary>
            <returns>The root.</returns>
        </member>
        <member name="M:Nez.UI.Stage.getWidth">
            <summary>
            The Stages world width
            </summary>
            <returns>The width.</returns>
        </member>
        <member name="M:Nez.UI.Stage.getHeight">
            <summary>
            The Stages world height
            </summary>
            <returns>The height.</returns>
        </member>
        <member name="M:Nez.UI.Stage.setDebugAll(System.Boolean)">
            <summary>
            If true, debug lines are shown for all elements
            </summary>
            <param name="debugAll">If set to <c>true</c> debug all.</param>
        </member>
        <member name="M:Nez.UI.Stage.setDebugUnderMouse(System.Boolean)">
            <summary>
            If true, debug is enabled only for the element under the mouse. Can be combined with {@link #setDebugAll(bool)}
            </summary>
            <param name="debugUnderMouse">If set to <c>true</c> debug under mouse.</param>
        </member>
        <member name="M:Nez.UI.Stage.setDebugParentUnderMouse(System.Boolean)">
            <summary>
            If true, debug is enabled only for the parent of the element under the mouse. Can be combined with {@link #setDebugAll(bool)}
            </summary>
            <param name="debugParentUnderMouse">If set to <c>true</c> debug parent under mouse.</param>
        </member>
        <member name="M:Nez.UI.Stage.setDebugTableUnderMouse(Nez.UI.Table.TableDebug)">
            <summary>
            If not {@link TableDebug#none}, debug is enabled only for the first ascendant of the element under the mouse that is a table. Can
            be combined with {@link #setDebugAll(bool)}
            </summary>
            <param name="debugTableUnderMouse">Debug table under mouse.</param>
        </member>
        <member name="M:Nez.UI.Stage.setDebugTableUnderMouse(System.Boolean)">
            <summary>
            If true, debug is enabled only for the first ascendant of the element under the mouse that is a table. Can be combined with
            {@link #setDebugAll(bool)}
            </summary>
            <param name="debugTableUnderMouse">If set to <c>true</c> debug table under mouse.</param>
        </member>
        <member name="M:Nez.UI.Stage.unfocusAll">
            <summary>
            Removes the touch, keyboard, and scroll focused elements
            </summary>
        </member>
        <member name="M:Nez.UI.Stage.setKeyboardFocus(Nez.UI.IKeyboardListener)">
            <summary>
            Sets the element that will receive key events
            </summary>
            <param name="element">element.</param>
        </member>
        <member name="M:Nez.UI.Stage.setGamepadFocusElement(Nez.UI.IGamepadFocusable)">
            <summary>
            sets the gamepad focus element and also turns on gamepad focus for this Stage. For gamepad focus to work you must set an initially
            focused element.
            </summary>
            <param name="focusable">Focusable.</param>
        </member>
        <member name="M:Nez.UI.Stage.getKeyboardFocus">
            <summary>
            Gets the element that will receive key events.
            </summary>
            <returns>The keyboard focus.</returns>
        </member>
        <member name="M:Nez.UI.Stage.screenToStageCoordinates(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms the screen coordinates to stage coordinates
            </summary>
            <returns>The to stage coordinates.</returns>
            <param name="screenCoords">Screen coords.</param>
        </member>
        <member name="M:Nez.UI.Stage.stageToScreenCoordinates(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms the stage coordinates to screen coordinates
            </summary>
            <returns>The to screen coordinates.</returns>
            <param name="stageCoords">Stage coords.</param>
        </member>
        <member name="M:Nez.UI.Stage.findAllElementsOfType``1">
            <summary>
            finds all the Elements of type T in the Stage
            </summary>
            <returns>The all elements of type.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Nez.UI.AlignInternal">
            <summary>
            used internally so that alignment can be stored as an int and can have an unlimited number of options by just setting it outside
            the bounds of the flags
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.getElement``1">
            <summary>
            Returns the element for this cell casted to T, or null.
            </summary>
            <returns>The element.</returns>
        </member>
        <member name="M:Nez.UI.Cell.hasElement">
            <summary>
            Returns true if the cell's element is not null.
            </summary>
            <returns><c>true</c>, if element was hased, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.UI.Cell.setElement(Nez.UI.Element)">
            <summary>
            Sets the element in this cell and adds the element to the cell's table. If null, removes any current element.
            </summary>
            <returns>The element.</returns>
            <param name="newelement">New element.</param>
        </member>
        <member name="M:Nez.UI.Cell.clearElement">
            <summary>
            Removes the current element for the cell, if any.
            </summary>
            <returns>The element.</returns>
        </member>
        <member name="M:Nez.UI.Cell.size(Nez.UI.Value)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value.
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.size(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.size(System.Single)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value.
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.size(System.Single,System.Single)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.width(Nez.UI.Value)">
            <summary>
            Sets the minWidth, prefWidth, and maxWidth to the specified value.
            </summary>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.UI.Cell.width(System.Single)">
            <summary>
            Sets the minWidth, prefWidth, and maxWidth to the specified value.
            </summary>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.UI.Cell.height(Nez.UI.Value)">
            <summary>
            Sets the minHeight, prefHeight, and maxHeight to the specified value.
            </summary>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.height(System.Single)">
            <summary>
            Sets the minHeight, prefHeight, and maxHeight to the specified value.
            </summary>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.minSize(Nez.UI.Value)">
            <summary>
            Sets the minWidth and minHeight to the specified value.
            </summary>
            <returns>The size.</returns>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.minSize(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the minWidth and minHeight to the specified values.
            </summary>
            <returns>The size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.minSize(System.Single)">
            <summary>
            Sets the minWidth and minHeight to the specified value.
            </summary>
            <returns>The size.</returns>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.minSize(System.Single,System.Single)">
            <summary>
            Sets the minWidth and minHeight to the specified values.
            </summary>
            <returns>The size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.prefSize(Nez.UI.Value)">
            <summary>
            Sets the prefWidth and prefHeight to the specified value.
            </summary>
            <returns>The size.</returns>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.prefSize(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the prefWidth and prefHeight to the specified values.
            </summary>
            <returns>The size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.prefSize(System.Single,System.Single)">
            <summary>
            Sets the prefWidth and prefHeight to the specified value.
            </summary>
            <returns>The size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.prefSize(System.Single)">
            <summary>
            Sets the prefWidth and prefHeight to the specified values.
            </summary>
            <returns>The size.</returns>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.maxSize(Nez.UI.Value)">
            <summary>
            Sets the maxWidth and maxHeight to the specified value.
            </summary>
            <returns>The size.</returns>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.maxSize(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the maxWidth and maxHeight to the specified values.
            </summary>
            <returns>The size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.maxSize(System.Single)">
            <summary>
            Sets the maxWidth and maxHeight to the specified value.
            </summary>
            <returns>The size.</returns>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Cell.maxSize(System.Single,System.Single)">
            <summary>
            Sets the maxWidth and maxHeight to the specified values.
            </summary>
            <returns>The size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Cell.space(Nez.UI.Value)">
            <summary>
            Sets the spaceTop, spaceLeft, spaceBottom, and spaceRight to the specified value.
            </summary>
            <param name="space">Space.</param>
        </member>
        <member name="M:Nez.UI.Cell.space(System.Single)">
            <summary>
            Sets the spaceTop, spaceLeft, spaceBottom, and spaceRight to the specified value.
            </summary>
            <param name="space">Space.</param>
        </member>
        <member name="M:Nez.UI.Cell.pad(Nez.UI.Value)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight to the specified value.
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.Cell.pad(System.Single)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight to the specified value.
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.Cell.fill">
            <summary>
            Sets fillX and fillY to 1
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.setFillX">
            <summary>
            Sets fillX to 1
            </summary>
            <returns>The fill x.</returns>
        </member>
        <member name="M:Nez.UI.Cell.setFillY">
            <summary>
            Sets fillY to 1
            </summary>
            <returns>The fill y.</returns>
        </member>
        <member name="M:Nez.UI.Cell.fill(System.Boolean,System.Boolean)">
            <summary>
            Sets fillX and fillY to 1 if true, 0 if false.
            </summary>
            <param name="x">If set to <c>true</c> x.</param>
            <param name="y">If set to <c>true</c> y.</param>
        </member>
        <member name="M:Nez.UI.Cell.fill(System.Boolean)">
            <summary>
            Sets fillX and fillY to 1 if true, 0 if false.
            </summary>
            <param name="fill">If set to <c>true</c> fill.</param>
        </member>
        <member name="M:Nez.UI.Cell.setAlign(Nez.UI.Align)">
            <summary>
            Sets the alignment of the element within the cell. Set to {@link Align#center}, {@link Align#top}, {@link Align#bottom},
            {@link Align#left}, {@link Align#right}, or any combination of those.
            </summary>
            <returns>The align.</returns>
            <param name="align">Align.</param>
        </member>
        <member name="M:Nez.UI.Cell.center">
            <summary>
            Sets the alignment of the element within the cell to {@link Align#center}. This clears any other alignment.
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.top">
            <summary>
            Adds {@link Align#top} and clears {@link Align#bottom} for the alignment of the element within the cell.
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.left">
            <summary>
            Adds {@link Align#left} and clears {@link Align#right} for the alignment of the element within the cell
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.bottom">
            <summary>
            Adds {@link Align#bottom} and clears {@link Align#top} for the alignment of the element within the cell
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.right">
            <summary>
            Adds {@link Align#right} and clears {@link Align#left} for the alignment of the element within the cell
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.grow">
            <summary>
            Sets expandX, expandY, fillX, and fillY to 1
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.growX">
            <summary>
            Sets expandX and fillX to 1
            </summary>
            <returns>The x.</returns>
        </member>
        <member name="M:Nez.UI.Cell.growY">
            <summary>
            Sets expandY and fillY to 1
            </summary>
            <returns>The y.</returns>
        </member>
        <member name="M:Nez.UI.Cell.expand">
            <summary>
            Sets expandX and expandY to 1
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.setExpandX">
            <summary>
            Sets expandX to 1
            </summary>
            <returns>The expand x.</returns>
        </member>
        <member name="M:Nez.UI.Cell.setExpandY">
            <summary>
            Sets expandY to 1
            </summary>
            <returns>The expand y.</returns>
        </member>
        <member name="M:Nez.UI.Cell.expand(System.Boolean,System.Boolean)">
            <summary>
            Sets expandX and expandY to 1 if true, 0 if false
            </summary>
            <param name="x">If set to <c>true</c> x.</param>
            <param name="y">If set to <c>true</c> y.</param>
        </member>
        <member name="M:Nez.UI.Cell.uniform">
            <summary>
            Sets uniformX and uniformY to true
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.setUniformX">
            <summary>
            Sets uniformX to true
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.setUniformY">
            <summary>
            Sets uniformY to true
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.getMinWidthValue">
            <summary>
            May be null if this cell is row defaults.
            </summary>
            <returns>The minimum width value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getMinHeightValue">
            <summary>
            May be null if this cell is row defaults
            </summary>
            <returns>The minimum height value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPrefWidthValue">
            <summary>
            May be null if this cell is row defaults.
            </summary>
            <returns>The preference width value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPrefHeightValue">
            <summary>
            May be null if this cell is row defaults.
            </summary>
            <returns>The preference height value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getMaxWidthValue">
            <summary>
            May be null if this cell is row defaults
            </summary>
            <returns>The max width value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getMaxHeightValue">
            <summary>
            May be null if this cell is row defaults
            </summary>
            <returns>The max height value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getSpaceTopValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The space top value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getSpaceLeftValue">
            <summary>
            May be null if this value is not set.
            </summary>
            <returns>The space left value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getSpaceBottomValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The space bottom value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getSpaceRightValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The space right value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPadTopValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad top value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPadLeftValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad left value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPadBottomValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad bottom value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPadRightValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad right value.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPadX">
            <summary>
            Returns {@link #getPadLeft()} plus {@link #getPadRight()}
            </summary>
            <returns>The pad x.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getPadY">
            <summary>
            Returns {@link #getPadTop()} plus {@link #getPadBottom()}
            </summary>
            <returns>The pad y.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getFillX">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The fill x.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getFillY">
            <summary>
            May be null
            </summary>
            <returns>The fill y.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getAlign">
            <summary>
            May be null
            </summary>
            <returns>The align.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getExpandX">
            <summary>
            May be null
            </summary>
            <returns>The expand x.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getExpandY">
            <summary>
            May be null
            </summary>
            <returns>The expand y.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getColspan">
            <summary>
            May be null
            </summary>
            <returns>The colspan.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getUniformX">
            <summary>
            May be null
            </summary>
            <returns>The uniform x.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getUniformY">
            <summary>
            May be null
            </summary>
            <returns>The uniform y.</returns>
        </member>
        <member name="M:Nez.UI.Cell.isEndRow">
            <summary>
            May be null
            </summary>
            <returns><c>true</c>, if end row was ised, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getComputedPadTop">
            <summary>
            The actual amount of combined padding and spacing from the last layout.
            </summary>
            <returns>The computed pad top.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getComputedPadLeft">
            <summary>
            The actual amount of combined padding and spacing from the last layout.
            </summary>
            <returns>The computed pad left.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getComputedPadBottom">
            <summary>
            The actual amount of combined padding and spacing from the last layout
            </summary>
            <returns>The computed pad bottom.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getComputedPadRight">
            <summary>
            The actual amount of combined padding and spacing from the last layout
            </summary>
            <returns>The computed pad right.</returns>
        </member>
        <member name="M:Nez.UI.Cell.getDefaults">
            <summary>
            Returns the defaults to use for all cells. This can be used to avoid needing to set the same defaults for every table (eg,
            for spacing).
            </summary>
            <returns>The defaults.</returns>
        </member>
        <member name="M:Nez.UI.Cell.clear">
            <summary>
            Sets all constraint fields to null
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.reset">
            <summary>
            Reset state so the cell can be reused, setting all constraints to their {@link #defaults() default} values.
            </summary>
        </member>
        <member name="M:Nez.UI.Cell.merge(Nez.UI.Cell)">
            <summary>
            cell may be null
            </summary>
            <param name="cell">Cell.</param>
        </member>
        <member name="P:Nez.UI.Element.needsLayout">
            <summary>
            true if the widget's layout has been {@link #invalidate() invalidated}.
            </summary>
            <value><c>true</c> if needs layout; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Nez.UI.Element.draw(Nez.Graphics,System.Single)">
            <summary>
            If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="parentAlpha">Parent alpha.</param>
        </member>
        <member name="M:Nez.UI.Element.getStage">
            <summary>
            Returns the stage that this element is currently in, or null if not in a stage.
            </summary>
            <returns>The stage.</returns>
        </member>
        <member name="M:Nez.UI.Element.setStage(Nez.UI.Stage)">
            <summary>
            Called by the framework when this element or any parent is added to a group that is in the stage.
            stage May be null if the element or any parent is no longer in a stage
            </summary>
            <param name="stage">Stage.</param>
        </member>
        <member name="M:Nez.UI.Element.hasParent">
            <summary>
            Returns true if the element's parent is not null
            </summary>
            <returns><c>true</c>, if parent was hased, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.UI.Element.getParent">
            <summary>
            Returns the parent element, or null if not in a group
            </summary>
            <returns>The parent.</returns>
        </member>
        <member name="M:Nez.UI.Element.setParent(Nez.UI.Group)">
            <summary>
            Called by the framework when an element is added to or removed from a group.
            </summary>
            <param name="parent">parent May be null if the element has been removed from the parent</param>
        </member>
        <member name="M:Nez.UI.Element.isTouchable">
            <summary>
            Returns true if input events are processed by this element.
            </summary>
            <returns>The touchable.</returns>
        </member>
        <member name="M:Nez.UI.Element.setTouchable(Nez.UI.Touchable)">
            <summary>
            Determines how touch events are distributed to this element. Default is {@link Touchable#enabled}.
            </summary>
            <param name="touchable">Touchable.</param>
        </member>
        <member name="M:Nez.UI.Element.setVisible(System.Boolean)">
            <summary>
            If false, the element will not be drawn and will not receive touch events. Default is true.
            </summary>
            <param name="visible">Visible.</param>
        </member>
        <member name="M:Nez.UI.Element.getX">
            <summary>
            Returns the X position of the element's left edge
            </summary>
            <returns>The x.</returns>
        </member>
        <member name="M:Nez.UI.Element.getX(System.Int32)">
            <summary>
            Returns the X position of the specified {@link Align alignment}.
            </summary>
            <returns>The x.</returns>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="M:Nez.UI.Element.getY">
            <summary>
            Returns the Y position of the element's bottom edge
            </summary>
            <returns>The y.</returns>
        </member>
        <member name="M:Nez.UI.Element.getY(System.Int32)">
            <summary>
            Returns the Y position of the specified {@link Align alignment}
            </summary>
            <returns>The y.</returns>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="M:Nez.UI.Element.setPosition(System.Single,System.Single)">
            <summary>
            Sets the position of the element's bottom left corner
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.Element.setPosition(System.Single,System.Single,System.Int32)">
            <summary>
            Sets the position using the specified {@link Align alignment}. Note this may set the position to non-integer coordinates
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="M:Nez.UI.Element.moveBy(System.Single,System.Single)">
            <summary>
            Add x and y to current position
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.Element.getBottom">
            <summary>
            Returns y plus height
            </summary>
            <returns>The top.</returns>
        </member>
        <member name="M:Nez.UI.Element.getRight">
            <summary>
            Returns x plus width
            </summary>
            <returns>The right.</returns>
        </member>
        <member name="M:Nez.UI.Element.setBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the x, y, width, and height.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Element.setOrigin(System.Single,System.Single)">
            <summary>
            Sets the origin position which is relative to the element's bottom left corner
            </summary>
            <param name="originX">Origin x.</param>
            <param name="originY">Origin y.</param>
        </member>
        <member name="M:Nez.UI.Element.setOrigin(System.Int32)">
            <summary>
            Sets the origin position to the specified {@link Align alignment}.
            </summary>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="M:Nez.UI.Element.setScale(System.Single)">
            <summary>
            Sets the scale for both X and Y
            </summary>
            <param name="scaleXY">Scale X.</param>
        </member>
        <member name="M:Nez.UI.Element.setScale(System.Single,System.Single)">
            <summary>
            Sets the scale X and scale Y
            </summary>
            <param name="scaleX">Scale x.</param>
            <param name="scaleY">Scale y.</param>
        </member>
        <member name="M:Nez.UI.Element.scaleBy(System.Single)">
            <summary>
            Adds the specified scale to the current scale
            </summary>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:Nez.UI.Element.scaleBy(System.Single,System.Single)">
            <summary>
            Adds the specified scale to the current scale
            </summary>
            <param name="scaleX">Scale x.</param>
            <param name="scaleY">Scale y.</param>
        </member>
        <member name="M:Nez.UI.Element.rotateBy(System.Single)">
            <summary>
            Adds the specified rotation to the current rotation
            </summary>
            <param name="amountInDegrees">Amount in degrees.</param>
        </member>
        <member name="M:Nez.UI.Element.getColor">
            <summary>
            Returns the color the element will be tinted when drawn
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="M:Nez.UI.Element.toFront">
            <summary>
            Changes the z-order for this element so it is in front of all siblings
            </summary>
        </member>
        <member name="M:Nez.UI.Element.toBack">
            <summary>
            Changes the z-order for this element so it is in back of all siblings
            </summary>
        </member>
        <member name="M:Nez.UI.Element.setZIndex(System.Int32)">
            <summary>
            Sets the z-index of this element. The z-index is the index into the parent's {@link Group#getChildren() children}, where a
            lower index is below a higher index. Setting a z-index higher than the number of children will move the child to the front.
            Setting a z-index less than zero is invalid.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Nez.UI.Element.clipBegin(Nez.Batcher)">
            <summary>
            Calls clipBegin(Batcher, float, float, float, float) to clip this actor's bounds
            </summary>
            <returns>The begin.</returns>
        </member>
        <member name="M:Nez.UI.Element.clipBegin(Nez.Batcher,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Clips the specified screen aligned rectangle, specified relative to the transform matrix of the stage's Batch. The
            transform matrix and the stage's camera must not have rotational components. Calling this method must be followed by a call
            to clipEnd() if true is returned.
            </summary>
        </member>
        <member name="M:Nez.UI.Element.clipEnd(Nez.Batcher)">
            <summary>
            Ends clipping begun by clipBegin(Batcher, float, float, float, float)
            </summary>
            <returns>The end.</returns>
        </member>
        <member name="M:Nez.UI.Element.setDebug(System.Boolean)">
            <summary>
            If true, {@link #debugDraw} will be called for this element
            </summary>
            <param name="enabled">Enabled.</param>
        </member>
        <member name="M:Nez.UI.Element.screenToLocalCoordinates(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms the specified point in screen coordinates to the element's local coordinate system
            </summary>
            <returns>The to local coordinates.</returns>
            <param name="screenCoords">Screen coords.</param>
        </member>
        <member name="M:Nez.UI.Element.stageToLocalCoordinates(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms the specified point in the stage's coordinates to the element's local coordinate system.
            </summary>
            <returns>The to local coordinates.</returns>
            <param name="stageCoords">Stage coords.</param>
        </member>
        <member name="M:Nez.UI.Element.localToStageCoordinates(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms the specified point in the element's coordinates to be in the stage's coordinates
            </summary>
            <returns>The to stage coordinates.</returns>
            <param name="localCoords">Local coords.</param>
        </member>
        <member name="M:Nez.UI.Element.localToAscendantCoordinates(Nez.UI.Element,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts coordinates for this element to those of a parent element. The ascendant does not need to be a direct parent
            </summary>
            <returns>The to ascendant coordinates.</returns>
            <param name="ascendant">Ascendant.</param>
            <param name="localCoords">Local coords.</param>
        </member>
        <member name="M:Nez.UI.Element.parentToLocalCoordinates(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts the coordinates given in the parent's coordinate system to this element's coordinate system.
            </summary>
            <returns>The to local coordinates.</returns>
            <param name="parentCoords">Parent coords.</param>
        </member>
        <member name="M:Nez.UI.Element.localToParentCoordinates(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms the specified point in the element's coordinates to be in the parent's coordinates.
            </summary>
            <returns>The to parent coordinates.</returns>
            <param name="localCoords">Local coords.</param>
        </member>
        <member name="M:Nez.UI.Element.distanceOutsideBoundsToPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            returns the distance from point to the bounds of element in the largest dimension or a negative number if the point is inside the bounds.
            Note that point should be in the element's coordinate system already.
            </summary>
            <returns>The outside bounds to point.</returns>
            <param name="Point">Point.</param>
        </member>
        <member name="M:Nez.UI.Element.debugRender(Nez.Graphics)">
            <summary>
            Draws this element's debug lines
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="M:Nez.UI.Element.areParentsVisible">
            <summary>
            returns true if this Element and all parent Elements are visible
            </summary>
            <returns><c>true</c>, if parents visible was ared, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.UI.Element.remove">
            <summary>
            Removes this element from its parent, if it has a parent
            </summary>
        </member>
        <member name="M:Nez.UI.Group.getChildren">
            <summary>
            Returns an ordered list of child elements in this group
            </summary>
            <returns>The children.</returns>
        </member>
        <member name="M:Nez.UI.Group.setStage(Nez.UI.Stage)">
            <summary>
            sets the stage on all children in case the Group is added to the Stage after it is configured
            </summary>
            <param name="stage">Stage.</param>
        </member>
        <member name="M:Nez.UI.Group.clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nez.UI.Group.clearChildren">
            <summary>
            Removes all elements from this group
            </summary>
        </member>
        <member name="M:Nez.UI.Group.onChildrenChanged">
            <summary>
            Called when elements are added to or removed from the group.
            </summary>
        </member>
        <member name="M:Nez.UI.Group.computeTransform">
            <summary>
            Returns the transform for this group's coordinate system
            </summary>
            <returns>The transform.</returns>
        </member>
        <member name="M:Nez.UI.Group.applyTransform(Nez.Graphics,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Set the batch's transformation matrix, often with the result of {@link #computeTransform()}. Note this causes the batch to 
            be flushed. {@link #resetTransform(Batch)} will restore the transform to what it was before this call.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="transform">Transform.</param>
        </member>
        <member name="M:Nez.UI.Group.resetTransform(Nez.Graphics)">
            <summary>
            Restores the batch transform to what it was before {@link #applyTransform(Batch, Matrix4)}. Note this causes the batch to
            be flushed
            </summary>
            <param name="batch">Batch.</param>
        </member>
        <member name="M:Nez.UI.Group.setDebug(System.Boolean,System.Boolean)">
            <summary>
            If true, drawDebug() will be called for this group and, optionally, all children recursively.
            </summary>
            <param name="enabled">If set to <c>true</c> enabled.</param>
            <param name="recursively">If set to <c>true</c> recursively.</param>
        </member>
        <member name="M:Nez.UI.Group.debugAll">
            <summary>
            Calls {setDebug(true, true)
            </summary>
            <returns>The all.</returns>
        </member>
        <member name="M:Nez.UI.IInputListener.onMousePressed(Microsoft.Xna.Framework.Vector2)">
            <summary>
            if true is returned then onMouseDown/Up will be called else they will not be called
            </summary>
            <returns><c>true</c>, if mouse pressed was oned, <c>false</c> otherwise.</returns>
            <param name="mousePos">Mouse position.</param>
        </member>
        <member name="M:Nez.UI.IInputListener.onMouseMoved(Microsoft.Xna.Framework.Vector2)">
            <summary>
            called when the mouse moves only on an element that returned true for onMousePressed. It is safe to call stage.removeInputFocusListener
            here if you are uninterested in the onMouseUp event.
            </summary>
            <param name="mousePos">Mouse position.</param>
        </member>
        <member name="M:Nez.UI.IInputListener.onMouseUp(Microsoft.Xna.Framework.Vector2)">
            <summary>
            called when the mouse button is released
            </summary>
            <param name="mousePos">Mouse position.</param>
        </member>
        <member name="M:Nez.UI.IInputListener.onMouseScrolled(System.Int32)">
            <summary>
            if true is returned the scroll event will be consumed by the Element
            </summary>
            <returns>The mouse scrolled.</returns>
        </member>
        <member name="M:Nez.UI.IKeyboardListener.keyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            called when a key is first pressed
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Nez.UI.IKeyboardListener.keyPressed(Microsoft.Xna.Framework.Input.Keys,System.Char)">
            <summary>
            called the same frame as keyDown and for repeating keys (key held down). This is only called for non-modifier keys.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Nez.UI.IKeyboardListener.keyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            called when a key is released
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Nez.UI.IKeyboardListener.gainedFocus">
            <summary>
            called when keyboard focus is gained
            </summary>
        </member>
        <member name="M:Nez.UI.IKeyboardListener.lostFocus">
            <summary>
            called when keyboard focus is lost
            </summary>
        </member>
        <member name="T:Nez.UI.ILayout">
            <summary>
            Provides methods for an element to participate in layout and to provide a minimum, preferred, and maximum size.
            </summary>
        </member>
        <member name="P:Nez.UI.ILayout.fillParent">
            <summary>
            If true, this element will be sized to the parent in {@link #validate()}. If the parent is the stage, the element will be sized 
            to the stage. This method is for convenience only when the widget's parent does not set the size of its children (such as
            the stage).
            </summary>
            <value><c>true</c> if fill parent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.UI.ILayout.layoutEnabled">
            <summary>
            Enables or disables the layout for this element and all child elements, recursively. When false, {@link #validate()} will not
            cause a layout to occur. This can be useful when an element will be manipulated externally, such as with actions.
            Default is true.
            </summary>
            <value><c>true</c> if layout enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.UI.ILayout.maxWidth">
            <summary>
            Zero indicates no max width
            </summary>
            <value>The width of the max.</value>
        </member>
        <member name="P:Nez.UI.ILayout.maxHeight">
            <summary>
            Zero indicates no max height
            </summary>
            <value>The height of the max.</value>
        </member>
        <member name="M:Nez.UI.ILayout.layout">
            <summary>
            Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child, 
            calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
            This method should almost never be called directly, instead {@link #validate()} should be used
            </summary>
        </member>
        <member name="M:Nez.UI.ILayout.invalidate">
            <summary>
            Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
            method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
            maximum, or actual size of the element (meaning it does not affect the parent element's layout).
            </summary>
        </member>
        <member name="M:Nez.UI.ILayout.invalidateHierarchy">
            <summary>
            Invalidates this element and all its parents, calling {@link #invalidate()} on each. This method should be called when state
            changes in the element that affects the minimum, preferred, maximum, or actual size of the element (meaning it it potentially
            affects the parent element's layout).
            </summary>
        </member>
        <member name="M:Nez.UI.ILayout.validate">
            <summary>
            Ensures the element has been laid out. Calls {@link #layout()} if {@link #invalidate()} has been called since the last time
            {@link #validate()} was called, or if the element otherwise needs to be laid out. This method is usually called in
            {@link element#draw(Batch, float)} before drawing is performed.
            </summary>
        </member>
        <member name="M:Nez.UI.ILayout.pack">
            <summary>
            Sizes this element to its preferred width and height, then calls {@link #validate()}.
            Generally this method should not be called in an element's constructor because it calls {@link #layout()}, which means a
            subclass would have layout() called before the subclass' constructor. Instead, in constructors simply set the element's size
            to {@link #getPrefWidth()} and {@link #getPrefHeight()}. This allows the element to have a size at construction time for more
            convenient use with groups that do not layout their children.
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.Fit">
            <summary>
            Scales the source to fit the target while keeping the same aspect ratio. This may cause the source to be smaller than the
            target in one direction
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.Fill">
            <summary>
            Scales the source to fill the target while keeping the same aspect ratio. This may cause the source to be larger than the
            target in one direction.
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.FillX">
            <summary>
            Scales the source to fill the target in the x direction while keeping the same aspect ratio. This may cause the source to be
            smaller or larger than the target in the y direction.
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.FillY">
            <summary>
            Scales the source to fill the target in the y direction while keeping the same aspect ratio. This may cause the source to be
            smaller or larger than the target in the x direction.
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.Stretch">
            <summary>
            Scales the source to fill the target. This may cause the source to not keep the same aspect ratio.
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.StretchX">
            <summary>
            Scales the source to fill the target in the x direction, without changing the y direction. This may cause the source to not
            keep the same aspect ratio.
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.StretchY">
            <summary>
            Scales the source to fill the target in the y direction, without changing the x direction. This may cause the source to not
            keep the same aspect ratio.
            </summary>
        </member>
        <member name="F:Nez.UI.Scaling.None">
            <summary>
            The source is not scaled.
            </summary>
        </member>
        <member name="M:Nez.UI.ScalingExt.apply(Nez.UI.Scaling,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the size of the source scaled to the target
            </summary>
            <param name="self">Self.</param>
            <param name="sourceWidth">Source width.</param>
            <param name="sourceHeight">Source height.</param>
            <param name="targetWidth">Target width.</param>
            <param name="targetHeight">Target height.</param>
        </member>
        <member name="F:Nez.UI.Touchable.Enabled">
            <summary>
            All touch input events will be received by the element and any children.
            </summary>
        </member>
        <member name="F:Nez.UI.Touchable.Disabled">
            <summary>
            No touch input events will be received by the element or any children.
            </summary>
        </member>
        <member name="F:Nez.UI.Touchable.ChildrenOnly">
            <summary>
            No touch input events will be received by the element, but children will still receive events. Note that events on the
            children will still bubble to the parent.
            </summary>
        </member>
        <member name="T:Nez.UI.Value">
            <summary>
            Value placeholder, allowing the value to be computed on request. Values are provided an element for context which reduces the
            number of value instances that need to be created and reduces verbosity in code that specifies values
            </summary>
        </member>
        <member name="M:Nez.UI.Value.get(Nez.UI.Element)">
            <summary>
            context May be null
            </summary>
            <param name="context">Context.</param>
        </member>
        <member name="F:Nez.UI.Value.zero">
            <summary>
            A value that is always zero.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.Fixed">
            <summary>
            A fixed value that is not computed each time it is used.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.MinWidthValue">
            <summary>
            Value that is the minWidth of the element in the cell.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.MinHeightValue">
            <summary>
            Value that is the minHeight of the element in the cell.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.PrefWidthValue">
            <summary>
            Value that is the prefWidth of the element in the cell.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.PrefHeightValue">
            <summary>
            Value that is the prefHeight of the element in the cell.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.MaxWidthValue">
            <summary>
            Value that is the maxWidth of the element in the cell.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.MaxHeightValue">
            <summary>
            Value that is the maxHeight of the element in the cell.
            </summary>
        </member>
        <member name="M:Nez.UI.Value.percentWidth(System.Single)">
            <summary>
            Value that is the maxHeight of the element in the cell.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.PercentWidthValue">
            <summary>
            Returns a value that is a percentage of the element's width.
            </summary>
        </member>
        <member name="M:Nez.UI.Value.percentWidth(System.Single,Nez.UI.Element)">
            <summary>
            Returns a value that is a percentage of the specified elements's width. The context element is ignored.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.PercentWidthDelegateValue">
            <summary>
            Returns a value that is a percentage of the specified elements's width. The context element is ignored.
            </summary>
        </member>
        <member name="M:Nez.UI.Value.percentHeight(System.Single)">
            <summary>
            Returns a value that is a percentage of the element's height.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.PercentageHeightValue">
            <summary>
            Returns a value that is a percentage of the element's height.
            </summary>
        </member>
        <member name="M:Nez.UI.Value.percentHeight(System.Single,Nez.UI.Element)">
            <summary>
            Returns a value that is a percentage of the specified elements's height. The context element is ignored.
            </summary>
        </member>
        <member name="T:Nez.UI.Value.PercentHeightDelegateValue">
            <summary>
            Returns a value that is a percentage of the specified elements's height. The context element is ignored.
            </summary>
        </member>
        <member name="T:Nez.UI.Container">
            <summary>
            A group with a single child that sizes and positions the child using constraints. This provides layout similar to a
            {@link Table} with a single cell but is more lightweight.
            </summary>
        </member>
        <member name="M:Nez.UI.Container.#ctor">
            <summary>
            Creates a container with no element
            </summary>
        </member>
        <member name="M:Nez.UI.Container.drawBackground(Nez.Graphics,System.Single,System.Single,System.Single)">
            <summary>
            Called to draw the background, before clipping is applied (if enabled). Default implementation draws the background drawable.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="parentAlpha">Parent alpha.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.Container.setBackground(Nez.UI.IDrawable)">
            <summary>
            Sets the background drawable and adjusts the container's padding to match the background.
            </summary>
            <param name="background">Background.</param>
        </member>
        <member name="M:Nez.UI.Container.setBackground(Nez.UI.IDrawable,System.Boolean)">
            <summary>
            Sets the background drawable and, if adjustPadding is true, sets the container's padding to
            {@link Drawable#getBottomHeight()} , {@link Drawable#getTopHeight()}, {@link Drawable#getLeftWidth()}, and
            {@link Drawable#getRightWidth()}.
            If background is null, the background will be cleared and padding removed.
            </summary>
            <param name="background">Background.</param>
            <param name="adjustPadding">If set to <c>true</c> adjust padding.</param>
        </member>
        <member name="M:Nez.UI.Container.setElement(Nez.UI.Element)">
            <summary>
            element may be null
            </summary>
            <returns>The element.</returns>
            <param name="element">element.</param>
        </member>
        <member name="M:Nez.UI.Container.getElement``1">
            <summary>
            May be null
            </summary>
            <returns>The element.</returns>
        </member>
        <member name="M:Nez.UI.Container.getElement">
            <summary>
            May be null
            </summary>
            <returns>The element.</returns>
        </member>
        <member name="M:Nez.UI.Container.setSize(Nez.UI.Value)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.setSize(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setSize(System.Single)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.setSize(System.Single,System.Single)">
            <summary>
            Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setWidth(Nez.UI.Value)">
            <summary>
            Sets the minWidth, prefWidth, and maxWidth to the specified value
            </summary>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.UI.Container.setWidth(System.Single)">
            <summary>
            Sets the minWidth, prefWidth, and maxWidth to the specified value
            </summary>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.UI.Container.setHeight(Nez.UI.Value)">
            <summary>
            Sets the minHeight, prefHeight, and maxHeight to the specified value.
            </summary>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setHeight(System.Single)">
            <summary>
            Sets the minHeight, prefHeight, and maxHeight to the specified value
            </summary>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setMinSize(Nez.UI.Value)">
            <summary>
            Sets the minWidth and minHeight to the specified value
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.setMinSize(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the minimum size.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setMinSize(System.Single)">
            <summary>
            Sets the minWidth and minHeight to the specified value
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.setMinSize(System.Single,System.Single)">
            <summary>
            Sets the minWidth and minHeight to the specified values
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.prefSize(Nez.UI.Value)">
            <summary>
            Sets the prefWidth and prefHeight to the specified value.
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.prefSize(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the prefWidth and prefHeight to the specified values.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setPrefSize(System.Single,System.Single)">
            <summary>
            Sets the prefWidth and prefHeight to the specified value.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setPrefSize(System.Single)">
            <summary>
            Sets the prefWidth and prefHeight to the specified values
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.setMaxSize(Nez.UI.Value)">
            <summary>
            Sets the maxWidth and maxHeight to the specified value.
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.setMaxSize(Nez.UI.Value,Nez.UI.Value)">
            <summary>
            Sets the maxWidth and maxHeight to the specified values
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setMaxSize(System.Single)">
            <summary>
            Sets the maxWidth and maxHeight to the specified value
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.UI.Container.setMaxSize(System.Single,System.Single)">
            <summary>
            Sets the maxWidth and maxHeight to the specified values
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.Container.setPad(Nez.UI.Value)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight to the specified value.
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.Container.setPad(System.Single)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight to the specified value
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.Container.setFill">
            <summary>
            Sets fillX and fillY to 1
            </summary>
        </member>
        <member name="M:Nez.UI.Container.setFillX">
            <summary>
            Sets fillX to 1
            </summary>
        </member>
        <member name="M:Nez.UI.Container.setFillY">
            <summary>
            Sets fillY to 1
            </summary>
        </member>
        <member name="M:Nez.UI.Container.setFill(System.Boolean,System.Boolean)">
            <summary>
            Sets fillX and fillY to 1 if true, 0 if false
            </summary>
            <param name="x">If set to <c>true</c> x.</param>
            <param name="y">If set to <c>true</c> y.</param>
        </member>
        <member name="M:Nez.UI.Container.setFill(System.Boolean)">
            <summary>
            Sets fillX and fillY to 1 if true, 0 if false
            </summary>
            <param name="fill">If set to <c>true</c> fill.</param>
        </member>
        <member name="M:Nez.UI.Container.setAlign(Nez.UI.Align)">
            <summary>
            Sets the alignment of the element within the container. Set to {@link Align#center}, {@link Align#top}, {@link Align#bottom},
            {@link Align#left}, {@link Align#right}, or any combination of those.
            </summary>
            <param name="align">Align.</param>
        </member>
        <member name="M:Nez.UI.Container.setAlignCenter">
            <summary>
            Sets the alignment of the element within the container to {@link Align#center}. This clears any other alignment.
            </summary>
        </member>
        <member name="M:Nez.UI.Container.setTop">
            <summary>
            Sets {@link Align#top} and clears {@link Align#bottom} for the alignment of the element within the container.
            </summary>
        </member>
        <member name="M:Nez.UI.Container.setLeft">
            <summary>
            Sets {@link Align#left} and clears {@link Align#right} for the alignment of the element within the container.
            </summary>
        </member>
        <member name="M:Nez.UI.Container.setBottom">
            <summary>
            Sets {@link Align#bottom} and clears {@link Align#top} for the alignment of the element within the container.
            </summary>
        </member>
        <member name="M:Nez.UI.Container.setRight">
            <summary>
            Sets {@link Align#right} and clears {@link Align#left} for the alignment of the element within the container.
            </summary>
        </member>
        <member name="M:Nez.UI.Container.getPadTopValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad top value.</returns>
        </member>
        <member name="M:Nez.UI.Container.getPadLeftValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad left value.</returns>
        </member>
        <member name="M:Nez.UI.Container.getPadBottomValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad bottom value.</returns>
        </member>
        <member name="M:Nez.UI.Container.getPadRightValue">
            <summary>
            May be null if this value is not set
            </summary>
            <returns>The pad right value.</returns>
        </member>
        <member name="M:Nez.UI.Container.getPadX">
            <summary>
            Returns {@link #getPadLeft()} plus {@link #getPadRight()}.
            </summary>
            <returns>The pad x.</returns>
        </member>
        <member name="M:Nez.UI.Container.getPadY">
            <summary>
            Returns {@link #getPadTop()} plus {@link #getPadBottom()}
            </summary>
            <returns>The pad y.</returns>
        </member>
        <member name="M:Nez.UI.Container.setRound(System.Boolean)">
            <summary>
            If true (the default), positions and sizes are rounded to integers
            </summary>
            <param name="round">If set to <c>true</c> round.</param>
        </member>
        <member name="M:Nez.UI.Container.setClip(System.Boolean)">
            <summary>
            Causes the contents to be clipped if they exceed the container bounds. Enabling clipping will set
            {@link #setTransform(bool)} to true
            </summary>
            <param name="enabled">If set to <c>true</c> enabled.</param>
        </member>
        <member name="M:Nez.UI.HorizontalGroup.setAlignment(Nez.UI.Align)">
            <summary>
            Sets the alignment of widgets within the vertical group. Set to {@link Align#center}, {@link Align#top},
            {@link Align#bottom}, {@link Align#left}, {@link Align#right}, or any combination of those
            </summary>
            <param name="align">Align.</param>
        </member>
        <member name="M:Nez.UI.HorizontalGroup.setReverse(System.Boolean)">
            <summary>
            If true, the children will be ordered from bottom to top rather than the default top to bottom.
            </summary>
            <param name="reverse">If set to <c>true</c> reverse.</param>
        </member>
        <member name="M:Nez.UI.HorizontalGroup.setSpacing(System.Single)">
            <summary>
            Sets the space between children
            </summary>
            <param name="spacing">Spacing.</param>
        </member>
        <member name="M:Nez.UI.HorizontalGroup.setPad(System.Single)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight to the specified value
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.HorizontalGroup.setRound(System.Boolean)">
            <summary>
            If true (the default), positions and sizes are rounded to integers.
            </summary>
            <param name="round">If set to <c>true</c> round.</param>
        </member>
        <member name="M:Nez.UI.HorizontalGroup.setFill(System.Single)">
            <summary>
            fill 0 will use pref width
            </summary>
            <param name="fill">Fill.</param>
        </member>
        <member name="M:Nez.UI.SplitPane.setSplitAmount(System.Single)">
            <summary>
            The split amount between the min and max amount
            </summary>
            <param name="amount">Amount.</param>
        </member>
        <member name="T:Nez.UI.Stack">
            <summary>
            A stack is a container that sizes its children to its size and positions them at 0,0 on top of each other.
            
            The preferred and min size of the stack is the largest preferred and min size of any children. The max size of the stack is the
            smallest max size of any children.
            </summary>
        </member>
        <member name="T:Nez.UI.Table">
            <summary>
            A group that sizes and positions children using table constraints. By default, {@link #getTouchable()} is
            {@link Touchable#childrenOnly}.
            
            The preferred and minimum sizes are that of the chdebugn when laid out in columns and rows.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.drawBackground(Nez.Graphics,System.Single,System.Single,System.Single)">
            <summary>
            Called to draw the background, before clipping is applied (if enabled). Default implementation draws the background
            drawable.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="parentAlpha">Parent alpha.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.Table.add(Nez.UI.Element)">
            <summary>
            Adds a new cell to the table with the specified element.
            </summary>
            <param name="element">element.</param>
        </member>
        <member name="M:Nez.UI.Table.add(System.String)">
            <summary>
            Adds a new cell with a label
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.UI.Table.add">
            <summary>
            Adds a cell without an element
            </summary>
        </member>
        <member name="M:Nez.UI.Table.stack(Nez.UI.Element[])">
            <summary>
            Adds a new cell to the table with the specified elements in a {@link Stack}.
            </summary>
            <param name="elements">Elements.</param>
        </member>
        <member name="M:Nez.UI.Table.clearChildren">
            <summary>
            Removes all elements and cells from the table
            </summary>
        </member>
        <member name="M:Nez.UI.Table.reset">
            <summary>
            Removes all elements and cells from the table (same as {@link #clear()}) and additionally resets all table properties and
            cell, column, and row defaults.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.row">
            <summary>
            Indicates that subsequent cells should be added to a new row and returns the cell values that will be used as the defaults
            for all cells in the new row.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.getColumnDefaults(System.Int32)">
            <summary>
            Gets the cell values that will be used as the defaults for all cells in the specified column. Columns are indexed starting at 0
            </summary>
            <returns>The column defaults.</returns>
            <param name="column">Column.</param>
        </member>
        <member name="M:Nez.UI.Table.defaults">
            <summary>
            The cell values that will be used as the defaults for all cells.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.setBackground(Nez.UI.IDrawable)">
            <summary>
            background may be null to clear the background.
            </summary>
            <param name="background">Background.</param>
        </member>
        <member name="M:Nez.UI.Table.round(System.Boolean)">
            <summary>
            If true (the default), positions and sizes are rounded to integers.
            </summary>
            <param name="round">If set to <c>true</c> round.</param>
        </member>
        <member name="M:Nez.UI.Table.pad(Nez.UI.Value)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight around the table to the specified value.
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.Table.padTop(Nez.UI.Value)">
            <summary>
            Padding at the top edge of the table.
            </summary>
            <param name="padTop">Pad top.</param>
        </member>
        <member name="M:Nez.UI.Table.padLeft(Nez.UI.Value)">
            <summary>
            Padding at the left edge of the table.
            </summary>
            <param name="padLeft">Pad left.</param>
        </member>
        <member name="M:Nez.UI.Table.padBottom(Nez.UI.Value)">
            <summary>
            Padding at the bottom edge of the table.
            </summary>
            <param name="padBottom">Pad bottom.</param>
        </member>
        <member name="M:Nez.UI.Table.padRight(Nez.UI.Value)">
            <summary>
            Padding at the right edge of the table.
            </summary>
            <param name="padRight">Pad right.</param>
        </member>
        <member name="M:Nez.UI.Table.pad(System.Single)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight around the table to the specified value.
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.Table.padTop(System.Single)">
            <summary>
            Padding at the top edge of the table.
            </summary>
            <param name="padTop">Pad top.</param>
        </member>
        <member name="M:Nez.UI.Table.padLeft(System.Single)">
            <summary>
            Padding at the left edge of the table.
            </summary>
            <param name="padLeft">Pad left.</param>
        </member>
        <member name="M:Nez.UI.Table.padBottom(System.Single)">
            <summary>
            Padding at the bottom edge of the table.
            </summary>
            <param name="padBottom">Pad bottom.</param>
        </member>
        <member name="M:Nez.UI.Table.padRight(System.Single)">
            <summary>
            Padding at the right edge of the table.
            </summary>
            <param name="padRight">Pad right.</param>
        </member>
        <member name="M:Nez.UI.Table.align(System.Int32)">
            <summary>
            Alignment of the logical table within the table element. Set to {@link Align#center}, {@link Align#top}, {@link Align#bottom}
            {@link Align#left}, {@link Align#right}, or any combination of those.
            </summary>
            <param name="align">Align.</param>
        </member>
        <member name="M:Nez.UI.Table.center">
            <summary>
            Sets the alignment of the logical table within the table element to {@link Align#center}. This clears any other alignment.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.top">
            <summary>
            Adds {@link Align#top} and clears {@link Align#bottom} for the alignment of the logical table within the table element.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.left">
            <summary>
            Adds {@link Align#left} and clears {@link Align#right} for the alignment of the logical table within the table element.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.bottom">
            <summary>
            Adds {@link Align#bottom} and clears {@link Align#top} for the alignment of the logical table within the table element.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.right">
            <summary>
            Adds {@link Align#right} and clears {@link Align#left} for the alignment of the logical table within the table element.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.setDebug(System.Boolean)">
            <summary>
            enables/disables all debug lines (table, cell, and widget)
            </summary>
            <param name="enabled">If set to <c>true</c> enabled.</param>
        </member>
        <member name="M:Nez.UI.Table.debugAll">
            <summary>
            Turn on all debug lines (table, cell, and element)
            </summary>
            <returns>The all.</returns>
        </member>
        <member name="M:Nez.UI.Table.debugTable">
            <summary>
            Turns on table debug lines.
            </summary>
            <returns>The table.</returns>
        </member>
        <member name="M:Nez.UI.Table.debugCell">
            <summary>
            Turns on cell debug lines.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.debugElement">
            <summary>
            Turns on element debug lines.
            </summary>
        </member>
        <member name="M:Nez.UI.Table.tableDebug(Nez.UI.Table.TableDebug)">
            <summary>
            Turns debug lines on or off.
            </summary>
            <param name="tableDebug">Table debug.</param>
        </member>
        <member name="M:Nez.UI.Table.getRowDefaults">
            <summary>
            gets the current Cell defaults. This is the same value returned by a call to row()
            </summary>
            <returns>The row defaults.</returns>
        </member>
        <member name="M:Nez.UI.Table.getCell(Nez.UI.Element)">
            <summary>
            Returns the cell for the specified element in this table, or null.
            </summary>
            <returns>The cell.</returns>
            <param name="element">element.</param>
        </member>
        <member name="M:Nez.UI.Table.getCells">
            <summary>
            returns all the Cells in the table
            </summary>
            <returns>The cells.</returns>
        </member>
        <member name="M:Nez.UI.Table.getPadX">
            <summary>
            Returns {@link #getPadLeft()} plus {@link #getPadRight()}.
            </summary>
            <returns>The pad x.</returns>
        </member>
        <member name="M:Nez.UI.Table.getPadY">
            <summary>
            Returns {@link #getPadTop()} plus {@link #getPadBottom()}.
            </summary>
            <returns>The pad y.</returns>
        </member>
        <member name="M:Nez.UI.Table.getRowHeight(System.Int32)">
            <summary>
            Returns the height of the specified row.
            </summary>
            <returns>The row height.</returns>
            <param name="rowIndex">Row index.</param>
        </member>
        <member name="M:Nez.UI.Table.getColumnWidth(System.Int32)">
            <summary>
            Returns the width of the specified column.
            </summary>
            <returns>The column width.</returns>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Nez.UI.Table.layout(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Positions and sizes children of the table using the cell associated with each child. The values given are the position
            within the parent and size of the table.
            </summary>
            <param name="layoutX">Layout x.</param>
            <param name="layoutY">Layout y.</param>
            <param name="layoutWidth">Layout width.</param>
            <param name="layoutHeight">Layout height.</param>
        </member>
        <member name="T:Nez.UI.Table.BackgroundTopValue">
            <summary>
            Value that is the top padding of the table's background
            </summary>
        </member>
        <member name="T:Nez.UI.Table.BackgroundLeftValue">
            <summary>
            Value that is the left padding of the table's background
            </summary>
        </member>
        <member name="T:Nez.UI.Table.BackgroundBottomValue">
            <summary>
            Value that is the bottom padding of the table's background
            </summary>
        </member>
        <member name="T:Nez.UI.Table.BackgroundRightValue">
            <summary>
            Value that is the right padding of the table's background
            </summary>
        </member>
        <member name="T:Nez.UI.VerticalGroup">
            <summary>
            A group that lays out its children on top of each other in a single column. This can be easier than using {@link Table} when
            elements need to be inserted in the middle of the group.
            
            The preferred width is the largest preferred width of any child. The preferred height is the sum of the children's preferred
            heights, plus spacing between them if set. The min size is the preferred size and the max size is 0.
            </summary>
        </member>
        <member name="M:Nez.UI.VerticalGroup.setAlignment(Nez.UI.Align)">
            <summary>
            Sets the alignment of widgets within the vertical group. Set to {@link Align#center}, {@link Align#top},
            {@link Align#bottom}, {@link Align#left}, {@link Align#right}, or any combination of those
            </summary>
            <param name="align">Align.</param>
        </member>
        <member name="M:Nez.UI.VerticalGroup.setReverse(System.Boolean)">
            <summary>
            If true, the children will be ordered from bottom to top rather than the default top to bottom.
            </summary>
            <param name="reverse">If set to <c>true</c> reverse.</param>
        </member>
        <member name="M:Nez.UI.VerticalGroup.setSpacing(System.Single)">
            <summary>
            Sets the space between children
            </summary>
            <param name="spacing">Spacing.</param>
        </member>
        <member name="M:Nez.UI.VerticalGroup.setPad(System.Single)">
            <summary>
            Sets the padTop, padLeft, padBottom, and padRight to the specified value
            </summary>
            <param name="pad">Pad.</param>
        </member>
        <member name="M:Nez.UI.VerticalGroup.setRound(System.Boolean)">
            <summary>
            If true (the default), positions and sizes are rounded to integers.
            </summary>
            <param name="round">If set to <c>true</c> round.</param>
        </member>
        <member name="M:Nez.UI.VerticalGroup.setFill(System.Single)">
            <summary>
            fill 0 will use pref width
            </summary>
            <param name="fill">Fill.</param>
        </member>
        <member name="T:Nez.UI.IDrawable">
            <summary>
            A drawable knows how to draw itself at a given rectangular size. It provides border sizes and a minimum size so that other code
            can determine how to size and position content.
            </summary>
        </member>
        <member name="T:Nez.UI.NinePatchDrawable">
            <summary>
            The drawable sizes are set when the ninepatch is set, but they are separate values. Eg, {@link Drawable#getLeftWidth()} could
            be set to more than {@link NinePatch#getLeftWidth()} in order to provide more space on the left than actually exists in the
            ninepatch.
            
            The min size is set to the ninepatch total size by default. It could be set to the left+right and top+bottom, excluding the
            middle size, to allow the drawable to be sized down as small as possible.
            </summary>
        </member>
        <member name="F:Nez.UI.NinePatchDrawable._finalRenderRect">
            <summary>
            full area in which we will be rendering
            </summary>
        </member>
        <member name="M:Nez.UI.NinePatchDrawable.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            creates a NinePatchDrawable using the full texture
            </summary>
            <param name="texture">Texture.</param>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <param name="top">Top.</param>
            <param name="bottom">Bottom.</param>
        </member>
        <member name="M:Nez.UI.NinePatchDrawable.setPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            sets the padding on the NinePatchSubtexture
            </summary>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <param name="top">Top.</param>
            <param name="bottom">Bottom.</param>
        </member>
        <member name="M:Nez.UI.NinePatchDrawable.newTintedDrawable(Microsoft.Xna.Framework.Color)">
            <summary>
            returns a new drawable with the tint color specified
            </summary>
            <returns>The tinted drawable.</returns>
            <param name="tint">Tint.</param>
        </member>
        <member name="T:Nez.UI.SubtextureDrawable">
            <summary>
            Drawable for a {@link Subtexture}
            </summary>
        </member>
        <member name="P:Nez.UI.SubtextureDrawable.flipX">
            <summary>
            determines if the sprite should be rendered normally or flipped horizontally
            </summary>
            <value><c>true</c> if flip x; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.UI.SubtextureDrawable.flipY">
            <summary>
            determines if the sprite should be rendered normally or flipped vertically
            </summary>
            <value><c>true</c> if flip y; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Nez.UI.SubtextureDrawable.newTintedDrawable(Microsoft.Xna.Framework.Color)">
            <summary>
            returns a new drawable with the tint color specified
            </summary>
            <returns>The tinted drawable.</returns>
            <param name="tint">Tint.</param>
        </member>
        <member name="T:Nez.UI.TiledDrawable">
            <summary>
            Draws a {@link Subtexture} repeatedly to fill the area, instead of stretching it
            </summary>
        </member>
        <member name="F:Nez.UI.Button.buttonBoundaryThreshold">
            <summary>
            the maximum distance outside the button the mouse can move when pressing it to cause it to be unfocused
            </summary>
        </member>
        <member name="M:Nez.UI.Button.toggle">
            <summary>
            Toggles the checked state. This method changes the checked state, which fires a {@link onChangedEvent} (if programmatic change
            events are enabled), so can be used to simulate a button click.
            </summary>
        </member>
        <member name="M:Nez.UI.Button.getStyle">
            <summary>
            Returns the button's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is called.
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="M:Nez.UI.Button.getButtonGroup">
            <summary>
            May be null
            </summary>
            <returns>The button group.</returns>
        </member>
        <member name="T:Nez.UI.ButtonStyle">
            <summary>
            The style for a button
            </summary>
        </member>
        <member name="F:Nez.UI.ButtonStyle.up">
            Optional. 
        </member>
        <member name="F:Nez.UI.ButtonStyle.down">
            Optional. 
        </member>
        <member name="F:Nez.UI.ButtonStyle.over">
            Optional. 
        </member>
        <member name="F:Nez.UI.ButtonStyle.checkked">
            Optional. 
        </member>
        <member name="F:Nez.UI.ButtonStyle.checkedOver">
            Optional. 
        </member>
        <member name="F:Nez.UI.ButtonStyle.disabled">
            Optional. 
        </member>
        <member name="F:Nez.UI.ButtonStyle.pressedOffsetX">
            Optional. offsets children (labels for example). 
        </member>
        <member name="F:Nez.UI.ButtonStyle.pressedOffsetY">
            Optional. offsets children (labels for example). 
        </member>
        <member name="F:Nez.UI.ButtonStyle.unpressedOffsetX">
            Optional. offsets children (labels for example). 
        </member>
        <member name="F:Nez.UI.ButtonStyle.unpressedOffsetY">
            Optional. offsets children (labels for example). 
        </member>
        <member name="F:Nez.UI.ButtonStyle.checkedOffsetX">
            Optional. offsets children (labels for example). 
        </member>
        <member name="F:Nez.UI.ButtonStyle.checkedOffsetY">
            Optional. offsets children (labels for example). 
        </member>
        <member name="T:Nez.UI.ButtonGroup">
            <summary>
            Manages a group of buttons to enforce a minimum and maximum number of checked buttons. This enables "radio button"
            functionality and more. A button may only be in one group at a time.
            
            The {@link #canCheck(Button, boolean)} method can be overridden to control if a button check or uncheck is allowed.
            </summary>
        </member>
        <member name="M:Nez.UI.ButtonGroup.setChecked(System.String)">
            <summary>
            Sets the first {@link TextButton} with the specified text to checked.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.UI.ButtonGroup.canCheck(Nez.UI.Button,System.Boolean)">
            <summary>
            Called when a button is checked or unchecked. If overridden, generally changing button checked states should not be done
            from within this method.
            </summary>
            <returns>True if the new state should be allowed</returns>
            <param name="button">Button.</param>
            <param name="newState">New state.</param>
        </member>
        <member name="M:Nez.UI.ButtonGroup.uncheckAll">
            <summary>
            Sets all buttons' {@link Button#isChecked()} to false, regardless of {@link #setMinCheckCount(int)}.
            </summary>
        </member>
        <member name="M:Nez.UI.ButtonGroup.getChecked">
            <summary>
            The first checked button, or null.
            </summary>
            <returns>The checked.</returns>
        </member>
        <member name="M:Nez.UI.ButtonGroup.getCheckedIndex">
            <summary>
            The first checked button index, or -1
            </summary>
            <returns>The checked index.</returns>
        </member>
        <member name="M:Nez.UI.ButtonGroup.setMinCheckCount(System.Int32)">
            <summary>
            Sets the minimum number of buttons that must be checked. Default is 1.
            </summary>
            <param name="minCheckCount">Minimum check count.</param>
        </member>
        <member name="M:Nez.UI.ButtonGroup.setMaxCheckCount(System.Int32)">
            <summary>
            Sets the maximum number of buttons that can be checked. Set to -1 for no maximum. Default is 1.
            </summary>
            <param name="maxCheckCount">Max check count.</param>
        </member>
        <member name="M:Nez.UI.ButtonGroup.setUncheckLast(System.Boolean)">
            <summary>
            If true, when the maximum number of buttons are checked and an additional button is checked, the last button to be checked
            is unchecked so that the maximum is not exceeded. If false, additional buttons beyond the maximum are not allowed to be
            checked. Default is true.
            </summary>
            <param name="uncheckLast">Uncheck last.</param>
        </member>
        <member name="T:Nez.UI.CheckBox">
            <summary>
            A checkbox is a button that contains an image indicating the checked or unchecked state and a label
            </summary>
        </member>
        <member name="M:Nez.UI.CheckBox.getStyle">
            <summary>
            Returns the checkbox's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is called
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="T:Nez.UI.CheckBoxStyle">
            <summary>
            The style for a select box
            </summary>
        </member>
        <member name="F:Nez.UI.CheckBoxStyle.checkboxOver">
            Optional. 
        </member>
        <member name="F:Nez.UI.CheckBoxStyle.checkboxOnDisabled">
            Optional. 
        </member>
        <member name="F:Nez.UI.CheckBoxStyle.checkboxOffDisabled">
            Optional. 
        </member>
        <member name="T:Nez.UI.Dialog">
            <summary>
            Displays a dialog, which is a modal window containing a content table with a button table underneath it. Methods are provided
            to add a label to the content table and buttons to the button table, but any widgets can be added. When a button is clicked,
            {@link #result(Object)} is called and the dialog is removed from the stage.
            </summary>
        </member>
        <member name="M:Nez.UI.Dialog.addText(System.String)">
            <summary>
            Adds a label to the content table
            </summary>
            <returns>The text.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.UI.Dialog.addText(Nez.UI.Label)">
            <summary>
            Adds the given Label to the content table
            </summary>
            <param name="label">Label.</param>
        </member>
        <member name="M:Nez.UI.Dialog.addButton(System.String,Nez.UI.TextButtonStyle)">
            Adds a text button to the button table.
            @param object The object that will be passed to {@link #result(Object)} if this button is clicked. May be null. 
        </member>
        <member name="M:Nez.UI.Dialog.addButton(Nez.UI.Button)">
            Adds the given button to the button table.
            @param object The object that will be passed to {@link #result(Object)} if this button is clicked. May be null. 
        </member>
        <member name="M:Nez.UI.Dialog.show(Nez.UI.Stage)">
            <summary>
            {@link #pack() Packs} the dialog and adds it to the stage
            </summary>
            <param name="stage">Stage.</param>
        </member>
        <member name="M:Nez.UI.Dialog.hide">
            <summary>
            Hides the dialog
            </summary>
        </member>
        <member name="M:Nez.UI.Image.setAlignment(Nez.UI.Align)">
            <summary>
            
            </summary>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="T:Nez.UI.ImageButton">
            <summary>
            A button with a child {@link Image} to display an image. This is useful when the button must be larger than the image and the
            image centered on the button. If the image is the size of the button, a {@link Button} without any children can be used, where
            the {@link Button.ButtonStyle#up}, {@link Button.ButtonStyle#down}, and {@link Button.ButtonStyle#checked} nine patches define
            the image.
            </summary>
        </member>
        <member name="F:Nez.UI.ImageButtonStyle.imageUp">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageButtonStyle.imageDown">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageButtonStyle.imageOver">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageButtonStyle.imageChecked">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageButtonStyle.imageCheckedOver">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageButtonStyle.imageDisabled">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageTextButtonStyle.imageUp">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageTextButtonStyle.imageDown">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageTextButtonStyle.imageOver">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageTextButtonStyle.imageChecked">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageTextButtonStyle.imageCheckedOver">
            Optional. 
        </member>
        <member name="F:Nez.UI.ImageTextButtonStyle.imageDisabled">
            Optional. 
        </member>
        <member name="M:Nez.UI.Label.getStyle">
            <summary>
            Returns the button's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is called.
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="M:Nez.UI.Label.setBackground(Nez.UI.IDrawable)">
            <summary>
            background may be null to clear the background.
            </summary>
            <returns>this</returns>
            <param name="background">Background.</param>
        </member>
        <member name="M:Nez.UI.Label.setAlignment(Nez.UI.Align)">
            <summary>
            alignment Aligns all the text within the label (default left center) and each line of text horizontally (default left)
            </summary>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="M:Nez.UI.Label.setAlignment(Nez.UI.Align,Nez.UI.Align)">
            <summary>
            labelAlign Aligns all the text within the label (default left center).
            lineAlign Aligns each line of text horizontally (default left).
            </summary>
            <param name="labelAlign">Label align.</param>
            <param name="lineAlign">Line align.</param>
        </member>
        <member name="M:Nez.UI.Label.setEllipsis(System.String)">
            <summary>
            When non-null the text will be truncated "..." if it does not fit within the width of the label. Wrapping will not occur
            when ellipsis is enabled. Default is null.
            </summary>
            <param name="ellipsis">Ellipsis.</param>
        </member>
        <member name="M:Nez.UI.Label.setEllipsis(System.Boolean)">
            <summary>
            When true the text will be truncated "..." if it does not fit within the width of the label. Wrapping will not occur when
            ellipsis is true. Default is false.
            </summary>
            <param name="ellipsis">Ellipsis.</param>
        </member>
        <member name="M:Nez.UI.Label.setWrap(System.Boolean)">
            <summary>
            should the text be wrapped?
            </summary>
            <param name="shouldWrap">If set to <c>true</c> should wrap.</param>
        </member>
        <member name="T:Nez.UI.LabelStyle">
            <summary>
            the style for a label
            </summary>
        </member>
        <member name="M:Nez.UI.ProgressBar.getStyle">
            <summary>
            Returns the progress bar's style. Modifying the returned style may not have an effect until
            {@link #setStyle(ProgressBarStyle)} is called.
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="M:Nez.UI.ProgressBar.setValue(System.Single,System.Boolean)">
            <summary>
            Sets the progress bar position, rounded to the nearest step size and clamped to the minimum and maximum values.
            </summary>
            <param name="value">Value.</param>
            <param name="ignoreSnap">If set to <c>true</c> we ignore value snapping.</param>
        </member>
        <member name="M:Nez.UI.ProgressBar.setTotalSteps(System.Int32)">
            <summary>
            Sets stepSize to a value that will evenly divide this progress bar into specified amount of steps.
            </summary>
            <param name="totalSteps">Total amount of steps.</param>
        </member>
        <member name="M:Nez.UI.ProgressBar.snap(System.Single)">
            <summary>
            Returns a snapped value
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="T:Nez.UI.ProgressBarStyle">
            <summary>
            The style for a progress bar
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.background">
            <summary>
            The progress bar background, stretched only in one direction. Optional.
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.disabledBackground">
            <summary>
            Optional
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.knob">
            <summary>
            Optional, centered on the background.
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.disabledKnob">
            <summary>
            Optional, centered on the background.
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.knobBefore">
            <summary>
            Optional
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.knobAfter">
            <summary>
            Optional
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.disabledKnobBefore">
            <summary>
            Optional
            </summary>
        </member>
        <member name="F:Nez.UI.ProgressBarStyle.disabledKnobAfter">
            <summary>
            Optional
            </summary>
        </member>
        <member name="F:Nez.UI.Slider.sliderBoundaryThreshold">
            <summary>
            the maximum distance outside the slider the mouse can move when pressing it to cause it to be unfocused
            </summary>
        </member>
        <member name="M:Nez.UI.Slider.#ctor(System.Single,System.Single,System.Single,System.Boolean,Nez.UI.SliderStyle)">
            <summary>
            Creates a new slider. It's width is determined by the given prefWidth parameter, its height is determined by the maximum of
             the height of either the slider {@link NinePatch} or slider handle {@link TextureRegion}. The min and max values determine
            the range the values of this slider can take on, the stepSize parameter specifies the distance between individual values.
            E.g. min could be 4, max could be 10 and stepSize could be 0.2, giving you a total of 30 values, 4.0 4.2, 4.4 and so on.
            </summary>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
            <param name="stepSize">Step size.</param>
            <param name="vertical">If set to <c>true</c> vertical.</param>
            <param name="background">Background.</param>
        </member>
        <member name="M:Nez.UI.Slider.getStyle">
            <summary>
            Returns the slider's style. Modifying the returned style may not have an effect until {@link #setStyle(SliderStyle)} is called
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="F:Nez.UI.SliderStyle.knobOver">
            Optional. 
        </member>
        <member name="F:Nez.UI.SliderStyle.knobDown">
            Optional. 
        </member>
        <member name="T:Nez.UI.TextButtonStyle">
            <summary>
            The style for a text button
            </summary>
        </member>
        <member name="F:Nez.UI.TextButtonStyle.fontColor">
            Optional. 
        </member>
        <member name="T:Nez.UI.TextField">
            <summary>
            A single-line text input field.
            
            The preferred height of a text field is the height of the {@link TextFieldStyle#font} and {@link TextFieldStyle#background}.
            The preferred width of a text field is 150, a relatively arbitrary size.
            
            The text field will copy the currently selected text when ctrl+c is pressed, and paste any text in the clipboard when ctrl+v is
            pressed. Clipboard functionality is provided via the {@link Clipboard} interface.
            
            The text field allows you to specify an {@link OnscreenKeyboard} for displaying a softkeyboard and piping all key events
            generated by the keyboard to the text field. There are two standard implementations, one for the desktop and one for Android.
            The desktop keyboard is a stub, as a softkeyboard is not needed on the desktop. The Android {@link OnscreenKeyboard}
            implementation will bring up the default IME.
            </summary>
        </member>
        <member name="F:Nez.UI.TextField.textFieldBoundaryThreshold">
            <summary>
            the maximum distance outside the TextField the mouse can move when pressing it to cause it to be unfocused
            </summary>
        </member>
        <member name="F:Nez.UI.TextField.shouldIgnoreTextUpdatesWhileFocused">
            <summary>
            if true and setText is called it will be ignored
            </summary>
        </member>
        <member name="M:Nez.UI.TextField.setOnlyFontChars(System.Boolean)">
            <summary>
            When false, text set by {@link #setText(String)} may contain characters not in the font, a space will be displayed instead.
            When true (the default), characters not in the font are stripped by setText. Characters not in the font are always stripped
            when typed or pasted.
            </summary>
            <param name="onlyFontChars">If set to <c>true</c> only font chars.</param>
        </member>
        <member name="M:Nez.UI.TextField.getStyle">
            <summary>
            Returns the text field's style. Modifying the returned style may not have an effect until {@link #setStyle(TextFieldStyle)} is called
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="M:Nez.UI.TextField.drawSelection(Nez.UI.IDrawable,Nez.Graphics,Nez.BitmapFonts.BitmapFont,System.Single,System.Single)">
            <summary>
            Draws selection rectangle
            </summary>
            <param name="selection">Selection.</param>
            <param name="batch">Batch.</param>
            <param name="font">Font.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.TextField.copy">
            <summary>
            Copies the contents of this TextField to the {@link Clipboard} implementation set on this TextField
            </summary>
        </member>
        <member name="M:Nez.UI.TextField.cut">
            <summary>
            Copies the selected contents of this TextField to the {@link Clipboard} implementation set on this TextField, then removes it
            </summary>
        </member>
        <member name="M:Nez.UI.TextField.next(System.Boolean)">
            <summary>
            Focuses the next TextField. If none is found, the keyboard is hidden. Does nothing if the text field is not in a stage
            up: If true, the TextField with the same or next smallest y coordinate is found, else the next highest.
            </summary>
            <param name="up">Up.</param>
        </member>
        <member name="M:Nez.UI.TextField.appendText(System.String)">
            <summary>
            if str is null, "" is used
            </summary>
            <param name="str">String.</param>
        </member>
        <member name="M:Nez.UI.TextField.setText(System.String)">
            <summary>
            str If null, "" is used
            </summary>
            <param name="str">String.</param>
        </member>
        <member name="M:Nez.UI.TextField.setTextForced(System.String)">
            <summary>
            force sets the text without validating or firing change events. Use at your own risk.
            </summary>
            <param name="str">String.</param>
        </member>
        <member name="M:Nez.UI.TextField.getText">
            <summary>
            Never null, might be an empty string
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:Nez.UI.TextField.changeText(System.String,System.String)">
            <summary>
            oldText May be null
            </summary>
            <param name="oldText">Old text.</param>
            <param name="newText">New text.</param>
        </member>
        <member name="M:Nez.UI.TextField.setProgrammaticChangeEvents(System.Boolean)">
            <summary>
            If false, methods that change the text will not fire {@link onTextChanged}, the event will be fired only when user changes the text
            </summary>
            <param name="programmaticChangeEvents">If set to <c>true</c> programmatic change events.</param>
        </member>
        <member name="M:Nez.UI.TextField.setSelection(System.Int32,System.Int32)">
            <summary>
            Sets the selected text
            </summary>
            <param name="selectionStart">Selection start.</param>
            <param name="selectionEnd">Selection end.</param>
        </member>
        <member name="M:Nez.UI.TextField.setCursorPosition(System.Int32)">
            <summary>
            Sets the cursor position and clears any selection
            </summary>
            <param name="cursorPosition">Cursor position.</param>
        </member>
        <member name="M:Nez.UI.TextField.setTextFieldFilter(Nez.UI.TextField.ITextFieldFilter)">
            <summary>
            filter May be null
            </summary>
            <param name="filter">Filter.</param>
        </member>
        <member name="M:Nez.UI.TextField.setFocusTraversal(System.Boolean)">
            <summary>
            If true (the default), tab/shift+tab will move to the next text field
            </summary>
            <param name="focusTraversal">If set to <c>true</c> focus traversal.</param>
        </member>
        <member name="M:Nez.UI.TextField.getMessageText">
            <summary>
            May be null
            </summary>
            <returns>The message text.</returns>
        </member>
        <member name="M:Nez.UI.TextField.setMessageText(System.String)">
            <summary>
            Sets the text that will be drawn in the text field if no text has been entered.
            </summary>
            <param name="messageText">Message text.</param>
        </member>
        <member name="M:Nez.UI.TextField.setAlignment(Nez.UI.Align)">
            <summary>
            Sets text horizontal alignment (left, center or right).
            </summary>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="M:Nez.UI.TextField.setPasswordMode(System.Boolean)">
            <summary>
            If true, the text in this text field will be shown as bullet characters.
            </summary>
            <param name="passwordMode">Password mode.</param>
        </member>
        <member name="M:Nez.UI.TextField.setPasswordCharacter(System.Char)">
            <summary>
            Sets the password character for the text field. The character must be present in the {@link BitmapFont}. Default is 149 (bullet)
            </summary>
            <param name="passwordCharacter">Password character.</param>
        </member>
        <member name="T:Nez.UI.TextField.ITextFieldFilter">
            <summary>
            Interface for filtering characters entered into the text field.
            </summary>
        </member>
        <member name="F:Nez.UI.TextFieldStyle.focusedFontColor">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.disabledFontColor">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.background">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.focusedBackground">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.disabledBackground">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.cursor">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.selection">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.messageFont">
            Optional. 
        </member>
        <member name="F:Nez.UI.TextFieldStyle.messageFontColor">
            Optional. 
        </member>
        <member name="T:Nez.UI.Window">
            <summary>
            A table that can be dragged and resized. The top padding is used as the window's title height.
            
            The preferred size of a window is the preferred size of the title text and the children as laid out by the table. After adding
            children to the window, it can be convenient to call {@link #pack()} to size the window to the size of the children.
            </summary>
        </member>
        <member name="M:Nez.UI.Window.getStyle">
            <summary>
            Returns the window's style. Modifying the returned style may not have an effect until {@link #setStyle(WindowStyle)} is called
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="F:Nez.UI.WindowStyle.background">
            Optional. 
        </member>
        <member name="F:Nez.UI.WindowStyle.titleFontColor">
            Optional. 
        </member>
        <member name="F:Nez.UI.WindowStyle.stageBackground">
            Optional. 
        </member>
        <member name="T:Nez.UI.IGamepadFocusable">
            <summary>
            interface applied to any Element that wants to take part in gamepad focus. By default, the Button class implements this which cascades
            down to Checkbox and TextButton. When using the properties you must set shouldUseExplicitFocusableControl to true. If you want a direction
            to not change focus make that direction null. If shouldUseExplicitFocusableControl the Stage will attempt to find the next focusable
            in the direction pressed.
            </summary>
        </member>
        <member name="M:Nez.UI.IGamepadFocusable.enableExplicitFocusableControl(Nez.UI.IGamepadFocusable,Nez.UI.IGamepadFocusable,Nez.UI.IGamepadFocusable,Nez.UI.IGamepadFocusable)">
            <summary>
            enables shouldUseExplicitFocusableControl and sets the elements corresponding to each direction
            </summary>
            <param name="upEle">Up ele.</param>
            <param name="downEle">Down ele.</param>
            <param name="leftEle">Left ele.</param>
            <param name="rightEle">Right ele.</param>
        </member>
        <member name="M:Nez.UI.IGamepadFocusable.onUnhandledDirectionPressed(Nez.UI.Direction)">
            <summary>
            called only when the following conditions are met:
            - shouldUseExplicitFocusableControl is true
            - this Element is focused
            - a gamepad direction was pressed with a null gamepadDIRECTIONElement
            </summary>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Nez.UI.IGamepadFocusable.onFocused">
            <summary>
            called when gamepad focuses on the Element
            </summary>
        </member>
        <member name="M:Nez.UI.IGamepadFocusable.onUnfocused">
            <summary>
            called when gamepad focus is removed from the Element
            </summary>
        </member>
        <member name="M:Nez.UI.IGamepadFocusable.onActionButtonPressed">
            <summary>
            called when the action button is pressed while the Element is focused
            </summary>
        </member>
        <member name="M:Nez.UI.IGamepadFocusable.onActionButtonReleased">
            <summary>
            called when the action button is released while the Element is focused
            </summary>
        </member>
        <member name="T:Nez.UI.ScrollPane">
            <summary>
            A group that scrolls a child widget using scrollbars and/or mouse or touch dragging.
            
            The widget is sized to its preferred size.If the widget's preferred width or height is less than the size of this scroll pane,
            it is set to the size of this scroll pane. Scrollbars appear when the widget is larger than the scroll pane.
            
            The scroll pane's preferred size is that of the child widget. At this size, the child widget will not need to scroll, so 
            scroll pane is typically sized by ignoring the preferred size in one or both directions.
            </summary>
        </member>
        <member name="M:Nez.UI.ScrollPane.cancel">
            <summary>
            If currently scrolling by tracking a touch down, stop scrolling.
            </summary>
        </member>
        <member name="M:Nez.UI.ScrollPane.getStyle">
            <summary>
            Returns the scroll pane's style. Modifying the returned style may not have an effect until {@link #setStyle(ScrollPaneStyle)} is called.
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.setWidget(Nez.UI.Element)">
            <summary>
            Sets the {@link Element} embedded in this scroll pane
            </summary>
            <param name="widget">Widget.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.getWidget">
            <summary>
            Returns the Element embedded in this scroll pane, or null
            </summary>
            <returns>The widget.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.setScrollSpeed(System.Single)">
            <summary>
            sets the scroll speed when the mouse wheel is used to scroll the ScrollPane
            </summary>
            <param name="scrollSpeed">Scroll speed.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.getScrollSpeed">
            <summary>
            Returns the x scroll speed
            </summary>
            <returns>The scroll x.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.setScrollX(System.Single)">
            <summary>
            sets x scroll amount
            </summary>
            <param name="pixelsX">Pixels x.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.getScrollX">
            <summary>
            Returns the x scroll position in pixels, where 0 is the left of the scroll pane.
            </summary>
            <returns>The scroll x.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.setScrollY(System.Single)">
            <summary>
            Called whenever the y scroll amount is changed
            </summary>
            <param name="pixelsY">Pixels y.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.getScrollY">
            <summary>
            Returns the y scroll position in pixels, where 0 is the top of the scroll pane.
            </summary>
            <returns>The scroll y.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.setUseNaturalScrolling(System.Boolean)">
            <summary>
            sets how the mouse wheel/trackpad operates. Natural scrolling moves the contents of a window the same direction as
            your fingers.
            </summary>
            <param name="useNaturalScrolling">Use natural scrolling.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.updateVisualScroll">
            <summary>
            Sets the visual scroll amount equal to the scroll amount. This can be used when setting the scroll amount without animating.
            </summary>
            <returns>The visual scroll.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.getMaxX">
            <summary>
            Returns the maximum scroll value in the x direction.
            </summary>
            <returns>The max x.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.getMaxY">
            <summary>
            Returns the maximum scroll value in the y direction.
            </summary>
            <returns>The max y.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.getScrollWidth">
            <summary>
            Returns the width of the scrolled viewport.
            </summary>
            <returns>The scroll width.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.getScrollHeight">
            <summary>
            Returns the height of the scrolled viewport.
            </summary>
            <returns>The scroll height.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.isScrollX">
            <summary>
            Returns true if the widget is larger than the scroll pane horizontally.
            </summary>
            <returns>The scroll x.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.isScrollY">
            <summary>
            Returns true if the widget is larger than the scroll pane vertically.
            </summary>
            <returns>The scroll y.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.setScrollingDisabled(System.Boolean,System.Boolean)">
            <summary>
            Disables scrolling in a direction. The widget will be sized to the FlickScrollPane in the disabled direction.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.getVelocityX">
            <summary>
            Gets the flick scroll x velocity
            </summary>
            <returns>The velocity x.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.getVelocityY">
            <summary>
            Gets the flick scroll y velocity
            </summary>
            <returns>The velocity y.</returns>
        </member>
        <member name="M:Nez.UI.ScrollPane.setOverscroll(System.Boolean,System.Boolean)">
            <summary>
            For flick scroll, if true the widget can be scrolled slightly past its bounds and will animate back to its bounds
            when scrolling is stopped. Default is true.
            </summary>
            <param name="overscrollX">Overscroll x.</param>
            <param name="overscrollY">Overscroll y.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setupOverscroll(System.Single,System.Single,System.Single)">
            <summary>
            For flick scroll, sets the overscroll distance in pixels and the speed it returns to the widget's bounds in seconds.
            Default is 50, 30, 200.
            </summary>
            <param name="distance">Distance.</param>
            <param name="speedMin">Speed minimum.</param>
            <param name="speedMax">Speed max.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setForceScroll(System.Boolean,System.Boolean)">
            <summary>
            Forces enabling scrollbars (for non-flick scroll) and overscrolling (for flick scroll) in a direction, even if the
            contents do not exceed the bounds in that direction.
            </summary>
            <returns>The force scroll.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setFlingTime(System.Single)">
            <summary>
            For flick scroll, sets the amount of time in seconds that a fling will continue to scroll. Default is 1.
            </summary>
            <param name="flingTime">Fling time.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setClamp(System.Boolean)">
            <summary>
            For flick scroll, prevents scrolling out of the widget's bounds. Default is true.
            </summary>
            <param name="clamp">Clamp.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setScrollBarPositions(System.Boolean,System.Boolean)">
            <summary>
            Set the position of the vertical and horizontal scroll bars.
            </summary>
            <param name="bottom">Bottom.</param>
            <param name="right">Right.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setFadeScrollBars(System.Boolean)">
            <summary>
            When true the scrollbars don't reduce the scrollable size and fade out after some time of not being used.
            </summary>
            <param name="fadeScrollBars">Fade scroll bars.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setScrollbarsOnTop(System.Boolean)">
            <summary>
            When false (the default), the widget is clipped so it is not drawn under the scrollbars. When true, the widget is clipped
            to the entire scroll pane bounds and the scrollbars are drawn on top of the widget. If {@link #setFadeScrollBars(boolean)}
            is true, the scroll bars are always drawn on top.
            </summary>
            <param name="scrollbarsOnTop">Scrollbars on top.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setVariableSizeKnobs(System.Boolean)">
            <summary>
            If true, the scroll knobs are sized based on getMaxX() or getMaxY(). If false, the scroll knobs are sized
            based on Drawable#getMinWidth() or Drawable#getMinHeight(). Default is true.
            </summary>
            <param name="variableSizeKnobs">Variable size knobs.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.scrollTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the scroll offset so the specified rectangle is fully in view, if possible. Coordinates are in the scroll pane
            widget's coordinate system.
            </summary>
            <returns>The to.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.scrollTo(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Sets the scroll offset so the specified rectangle is fully in view, and optionally centered vertically and/or horizontally,
            if possible. Coordinates are in the scroll pane widget's coordinate system.
            </summary>
            <returns>The to.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="centerHorizontal">Center horizontal.</param>
            <param name="centerVertical">Center vertical.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setVisualScrollX(System.Single)">
            <summary>
            Called whenever the visual x scroll amount is changed
            </summary>
            <returns>The visual scroll x.</returns>
            <param name="pixelsX">Pixels x.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.setVisualScrollY(System.Single)">
            <summary>
            Called whenever the visual y scroll amount is changed
            </summary>
            <returns>The visual scroll y.</returns>
            <param name="pixelsY">Pixels y.</param>
        </member>
        <member name="M:Nez.UI.ScrollPane.fling(System.Single,System.Single,System.Single)">
            <summary>
            Generate fling gesture
            </summary>
            <param name="flingTime">Fling time.</param>
            <param name="velocityX">Velocity x.</param>
            <param name="velocityY">Velocity y.</param>
        </member>
        <member name="F:Nez.UI.ScrollPaneStyle.background">
            Optional. 
        </member>
        <member name="F:Nez.UI.ScrollPaneStyle.corner">
            Optional. 
        </member>
        <member name="F:Nez.UI.ScrollPaneStyle.hScroll">
            Optional. 
        </member>
        <member name="F:Nez.UI.ScrollPaneStyle.hScrollKnob">
            Optional. 
        </member>
        <member name="F:Nez.UI.ScrollPaneStyle.vScroll">
            Optional. 
        </member>
        <member name="F:Nez.UI.ScrollPaneStyle.vScrollKnob">
            Optional. 
        </member>
        <member name="T:Nez.UI.ListBox`1">
            <summary>
            displays textual items and highlights the currently selected item
            </summary>
        </member>
        <member name="M:Nez.UI.ListBox`1.getStyle">
            <summary>
            Returns the list's style. Modifying the returned style may not have an effect until setStyle(ListStyle) is called
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="M:Nez.UI.ListBox`1.getSelected">
            <summary>
            Returns the first selected item, or null
            </summary>
            <returns>The selected.</returns>
        </member>
        <member name="M:Nez.UI.ListBox`1.setSelected(`0)">
            <summary>
            Sets the selection to only the passed item, if it is a possible choice.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Nez.UI.ListBox`1.getSelectedIndex">
            <summary>
            gets the index of the first selected item. The top item has an index of 0. Nothing selected has an index of -1.
            </summary>
            <returns>The selected index.</returns>
        </member>
        <member name="M:Nez.UI.ListBox`1.setSelectedIndex(System.Int32)">
            <summary>
            Sets the selection to only the selected index
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Nez.UI.ListBox`1.setItems(System.Collections.Generic.IList{`0})">
            <summary>
            Sets the items visible in the list, clearing the selection if it is no longer valid. If a selection is
            ArraySelection#getRequired(), the first item is selected.
            </summary>
            <param name="newItems">New items.</param>
        </member>
        <member name="M:Nez.UI.ListBox`1.getItems">
            <summary>
            Returns the internal items array. If modified, {@link #setItems(Array)} must be called to reflect the changes.
            </summary>
            <returns>The items.</returns>
        </member>
        <member name="F:Nez.UI.ListBoxStyle.hoverSelection">
            Optional 
        </member>
        <member name="F:Nez.UI.ListBoxStyle.background">
            Optional 
        </member>
        <member name="M:Nez.UI.Selection`1.setElement(Nez.UI.Element)">
            <summary>
            An Element to fire ChangeEvent on when the selection changes, or null
            </summary>
            <returns>The element.</returns>
            <param name="element">element.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.choose(`0)">
            <summary>
            Selects or deselects the specified item based on how the selection is configured, whether ctrl is currently pressed, etc.
            This is typically invoked by user interaction.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.first">
            <summary>
            Returns the first selected item, or null
            </summary>
        </member>
        <member name="M:Nez.UI.Selection`1.set(`0)">
            <summary>
            Sets the selection to only the specified item
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.add(`0)">
            <summary>
            Adds the item to the selection
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.changed">
            <summary>
            Called after the selection changes. The default implementation does nothing.
            </summary>
        </member>
        <member name="M:Nez.UI.Selection`1.fireChangeEvent">
            <summary>
            Fires a change event on the selection's Element, if any. Called internally when the selection changes, depending on
            setProgrammaticChangeEvents(bool)
            </summary>
        </member>
        <member name="M:Nez.UI.Selection`1.getLastSelected">
            <summary>
            Makes a best effort to return the last item selected, else returns an arbitrary item or null if the selection is empty.
            </summary>
            <returns>The last selected.</returns>
        </member>
        <member name="M:Nez.UI.Selection`1.setDisabled(System.Boolean)">
            <summary>
            If true, prevents choose(Object) from changing the selection. Default is false.
            </summary>
            <param name="isDisabled">Is disabled.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.setToggle(System.Boolean)">
            <summary>
            If true, prevents choose(Object) from clearing the selection. Default is false.
            </summary>
            <param name="toggle">Toggle.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.setMultiple(System.Boolean)">
            <summary>
            If true, allows choose(Object) to select multiple items. Default is false.
            </summary>
            <param name="multiple">Multiple.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.setRequired(System.Boolean)">
            <summary>
            If true, prevents choose(Object) from selecting none. Default is false.
            </summary>
            <param name="required">Required.</param>
        </member>
        <member name="M:Nez.UI.Selection`1.setProgrammaticChangeEvents(System.Boolean)">
            <summary>
            If false, only choose(Object) will fire a change event. Default is true.
            </summary>
            <param name="programmaticChangeEvents">Programmatic change events.</param>
        </member>
        <member name="M:Nez.UI.ArraySelection`1.validate">
            <summary>
            Removes objects from the selection that are no longer in the items array. If getRequired() is true and there is
            no selected item, the first item is selected.
            </summary>
        </member>
        <member name="M:Nez.UI.SelectBox`1.setMaxListCount(System.Int32)">
            <summary>
            Set the max number of items to display when the select box is opened. Set to 0 (the default) to display as many as fit in
            the stage height.
            </summary>
            <returns>The max list count.</returns>
            <param name="maxListCount">Max list count.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nez.UI.SelectBox`1.getMaxListCount" -->
        <member name="M:Nez.UI.SelectBox`1.getStyle">
            <summary>
            Returns the select box's style. Modifying the returned style may not have an effect until setStyle(SelectBoxStyle)
            is called.
            </summary>
            <returns>The style.</returns>
        </member>
        <member name="M:Nez.UI.SelectBox`1.setItems(`0[])">
            <summary>
            Set the backing Array that makes up the choices available in the SelectBox
            </summary>
            <returns>The items.</returns>
            <param name="newItems">New items.</param>
        </member>
        <member name="M:Nez.UI.SelectBox`1.setItems(System.Collections.Generic.List{`0})">
            <summary>
            Sets the items visible in the select box
            </summary>
            <returns>The items.</returns>
            <param name="newItems">New items.</param>
        </member>
        <member name="M:Nez.UI.SelectBox`1.getItems">
            <summary>
            Returns the internal items array. If modified, setItems(Array) must be called to reflect the changes.
            </summary>
            <returns>The items.</returns>
        </member>
        <member name="M:Nez.UI.SelectBox`1.getSelection">
            <summary>
            Get the set of selected items, useful when multiple items are selected returns a Selection object containing the
            selected elements
            </summary>
            <returns>The selection.</returns>
        </member>
        <member name="M:Nez.UI.SelectBox`1.getSelected">
            <summary>
            Returns the first selected item, or null. For multiple selections use SelectBox#getSelection()
            </summary>
            <returns>The selected.</returns>
        </member>
        <member name="M:Nez.UI.SelectBox`1.setSelected(`0)">
            <summary>
            Sets the selection to only the passed item, if it is a possible choice, else selects the first item.
            </summary>
            <returns>The selected.</returns>
            <param name="item">Item.</param>
        </member>
        <member name="M:Nez.UI.SelectBox`1.getSelectedIndex">
            <summary>
            returns The index of the first selected item. The top item has an index of 0. Nothing selected has an index of -1.
            </summary>
            <returns>The selected index.</returns>
        </member>
        <member name="M:Nez.UI.SelectBox`1.setSelectedIndex(System.Int32)">
            <summary>
            Sets the selection to only the selected index
            </summary>
            <returns>The selected index.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Nez.UI.SelectBox`1.getListBox">
            <summary>
            Returns the ListBox shown when the select box is open
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Nez.UI.SelectBox`1.setScrollingDisabled(System.Boolean)">
            <summary>
            Disables scrolling of the list shown when the select box is open.
            </summary>
            <returns>The scrolling disabled.</returns>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Nez.UI.SelectBox`1.getScrollPane">
            <summary>
            Returns the scroll pane containing the list that is shown when the select box is open.
            </summary>
            <returns>The scroll pane.</returns>
        </member>
        <member name="F:Nez.UI.SelectBoxStyle.disabledFontColor">
            Optional 
        </member>
        <member name="F:Nez.UI.SelectBoxStyle.background">
            Optional 
        </member>
        <member name="F:Nez.UI.SelectBoxStyle.backgroundOver">
            Optional 
        </member>
        <member name="F:Nez.UI.SelectBoxStyle.backgroundOpen">
            Optional 
        </member>
        <member name="F:Nez.UI.SelectBoxStyle.backgroundDisabled">
            Optional 
        </member>
        <member name="T:Nez.UI.Tooltip">
            <summary>
            A listener that shows a tooltip Element when another Element is hovered over with the mouse.
            </summary>
        </member>
        <member name="M:Nez.UI.Tooltip.setInstant(System.Boolean)">
            <summary>
            If true, this tooltip is shown without delay when hovered
            </summary>
            <param name="instant">Instant.</param>
        </member>
        <member name="M:Nez.UI.Tooltip.setAlways(System.Boolean)">
            <summary>
            If true, this tooltip is shown even when tooltips are not TooltipManager#enabled
            </summary>
            <param name="always">Always.</param>
        </member>
        <member name="F:Nez.UI.TooltipManager.initialTime">
            <summary>
            Seconds from when an actor is hovered to when the tooltip is shown. Call {hideAll() after changing to reset internal state
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.subsequentTime">
            <summary>
            Once a tooltip is shown, this is used instead of initialTime. Default is 0.
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.resetTime">
            <summary>
            Seconds to use subsequentTime
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.enabled">
            <summary>
            If false, tooltips will not be shown. Default is true.
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.animations">
            <summary>
            If false, tooltips will be shown without animations. Default is true.
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.maxWidth">
            <summary>
            The maximum width of a TextTooltip. The label will wrap if needed. Default is int.MaxValue.
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.offsetX">
            <summary>
            The distance from the mouse position to offset the tooltip actor
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.offsetY">
            <summary>
            The distance from the mouse position to offset the tooltip actor
            </summary>
        </member>
        <member name="F:Nez.UI.TooltipManager.edgeDistance">
            <summary>
            The distance from the tooltip actor position to the edge of the screen where the actor will be shown on the other side of
            the mouse cursor.
            </summary>
        </member>
        <member name="M:Nez.UI.TooltipManager.showAction(Nez.UI.Tooltip)">
            <summary>
            Called when tooltip is shown. Default implementation sets actions to animate showing.
            </summary>
            <returns>The action.</returns>
            <param name="tooltip">Tooltip.</param>
        </member>
        <member name="M:Nez.UI.TooltipManager.hideAction(Nez.UI.Tooltip)">
            <summary>
            Called when tooltip is hidden. Default implementation sets actions to animate hiding and to remove the Element from the stage
            when the actions are complete.
            </summary>
            <returns>The action.</returns>
            <param name="tooltip">Tooltip.</param>
        </member>
        <member name="M:Nez.UI.TooltipManager.instant">
            <summary>
            Shows all tooltips on hover without a delay for resetTime seconds.
            </summary>
        </member>
        <member name="F:Nez.UI.TextTooltipStyle.background">
            Optional. 
        </member>
        <member name="T:Nez.Systems.Emitter`1">
            <summary>
            simple event emitter that is designed to have its generic contraint be either an int or an enum
            </summary>
        </member>
        <member name="M:Nez.Systems.Emitter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            if using an enum as the generic constraint you may want to pass in a custom comparer to avoid boxing/unboxing. See the CoreEventsComparer
            for an example implementation.
            </summary>
            <param name="customComparer">Custom comparer.</param>
        </member>
        <member name="T:Nez.Systems.Emitter`2">
            <summary>
            simple event emitter that is designed to have its generic contraint be either an int or an enum. this variant lets you pass around
            data with each event. See InputEvent for an example.
            </summary>
        </member>
        <member name="M:Nez.Systems.Emitter`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            if using an enum as the generic constraint you may want to pass in a custom comparer to avoid boxing/unboxing. See the CoreEventsComparer
            for an example implementation.
            </summary>
            <param name="customComparer">Custom comparer.</param>
        </member>
        <member name="T:Nez.Systems.CoroutineManager">
            <summary>
            basic CoroutineManager. Coroutines can do the following:
            - yield return null (tick again the next frame)
            - yield return Coroutine.waitForSeconds( 3 ) (tick again after a 3 second delay)
            - yield return Coroutine.waitForSeconds( 5.5f ) (tick again after a 5.5 second delay)
            - yield return startCoroutine( another() ) (wait for the other coroutine before getting ticked again)
            </summary>
        </member>
        <member name="T:Nez.Systems.CoroutineManager.CoroutineImpl">
            <summary>
            internal class used by the CoroutineManager to hide the data it requires for a Coroutine
            </summary>
        </member>
        <member name="F:Nez.Systems.CoroutineManager.CoroutineImpl.waitTimer">
            <summary>
            anytime a delay is yielded it is added to the waitTimer which tracks the delays
            </summary>
        </member>
        <member name="F:Nez.Systems.CoroutineManager._isInUpdate">
            <summary>
            flag to keep track of when we are in our update loop. If a new coroutine is started during the update loop we have to stick
            it in the shouldRunNextFrame List to avoid modifying a List while we iterate.
            </summary>
        </member>
        <member name="M:Nez.Systems.CoroutineManager.startCoroutine(System.Collections.IEnumerator)">
            <summary>
            adds the IEnumerator to the CoroutineManager. Coroutines get ticked before Update is called each frame.
            </summary>
            <returns>The coroutine.</returns>
            <param name="enumerator">Enumerator.</param>
        </member>
        <member name="M:Nez.Systems.CoroutineManager.tickCoroutine(Nez.Systems.CoroutineManager.CoroutineImpl)">
            <summary>
            ticks a coroutine. returns true if the coroutine should continue to run next frame. This method will put finished coroutines
            back in the Pool!
            </summary>
            <returns><c>true</c>, if coroutine was ticked, <c>false</c> otherwise.</returns>
            <param name="coroutine">Coroutine.</param>
        </member>
        <member name="T:Nez.Systems.NezContentManager">
            <summary>
            ContentManager subclass that also manages Effects from ogl files. Adds asynchronous loading of assets as well.
            </summary>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadEffect(System.String)">
            <summary>
            loads an ogl effect directly from file and handles disposing of it when the ContentManager is disposed. Name should be the path
            relative to the Content folder or including the Content folder.
            </summary>
            <returns>The effect.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadNezEffect``1">
            <summary>
            loads an embedded Nez effect. These are any of the Effect subclasses in the Nez/Graphics/Effects folder.
            Note that this will return a unique instance if you attempt to load the same Effect twice to avoid Effect duplication.
            </summary>
            <returns>The nez effect.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadEffect``1(System.String)">
            <summary>
            loads an ogl effect directly from file and handles disposing of it when the ContentManager is disposed. Name should the the path
            relative to the Content folder or including the Content folder. Effects must have a constructor that accepts GraphicsDevice and
            byte[]. Note that this will return a unique instance if you attempt to load the same Effect twice to avoid Effect duplication.
            </summary>
            <returns>The effect.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadEffect``1(System.String,System.Byte[])">
            <summary>
            loads an ogl effect directly from its bytes and handles disposing of it when the ContentManager is disposed. Name should the the path
            relative to the Content folder or including the Content folder. Effects must have a constructor that accepts GraphicsDevice and
            byte[]. Note that this will return a unique instance if you attempt to load the same Effect twice to avoid Effect duplication.
            </summary>
            <returns>The effect.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadMonoGameEffect``1">
            <summary>
            loads and manages any Effect that is built-in to MonoGame such as BasicEffect, AlphaTestEffect, etc. Note that this will
            return a unique instance if you attempt to load the same Effect twice. If you intend to use the same Effect in multiple locations
            keep a reference to it and use it directly.
            </summary>
            <returns>The mono game effect.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadAsync``1(System.String,System.Action{``0})">
            <summary>
            loads an asset on a background thread with optional callback for when it is loaded. The callback will occur on the main thread.
            </summary>
            <param name="assetName">Asset name.</param>
            <param name="onLoaded">On loaded.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadAsync``1(System.String,System.Action{System.Object,``0},System.Object)">
            <summary>
            loads an asset on a background thread with optional callback that includes a context parameter for when it is loaded.
            The callback will occur on the main thread.
            </summary>
            <param name="assetName">Asset name.</param>
            <param name="onLoaded">On loaded.</param>
            <param name="context">Context.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Systems.NezContentManager.loadAsync``1(System.String[],System.Action)">
            <summary>
            loads a group of assets on a background thread with optional callback for when it is loaded
            </summary>
            <param name="assetName">Asset name.</param>
            <param name="onLoaded">On loaded.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Systems.NezContentManager.unloadAsset``1(System.String)">
            <summary>
            removes assetName from LoadedAssets and Disposes of it. Note that this method uses reflection to get at the private ContentManager
            disposeableAssets List.
            </summary>
            <param name="assetName">Asset name.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Systems.NezContentManager.unloadEffect(System.String)">
            <summary>
            unloads an Effect that was loaded via loadEffect, loadNezEffect or loadMonoGameEffect
            </summary>
            <param name="effectName">Effect.name</param>
        </member>
        <member name="M:Nez.Systems.NezContentManager.unloadEffect(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            unloads an Effect that was loaded via loadEffect, loadNezEffect or loadMonoGameEffect
            </summary>
            <param name="effectName">Effect.name</param>
        </member>
        <member name="M:Nez.Systems.NezContentManager.isAssetLoaded(System.String)">
            <summary>
            checks to see if an asset with assetName is loaded
            </summary>
            <returns><c>true</c> if this instance is asset loaded the specified assetName; otherwise, <c>false</c>.</returns>
            <param name="assetName">Asset name.</param>
        </member>
        <member name="M:Nez.Systems.NezContentManager.logLoadedAssets">
            <summary>
            provides a string suitable for logging with all the currently loaded assets and effects
            </summary>
            <returns>The loaded assets.</returns>
        </member>
        <member name="M:Nez.Systems.NezContentManager.Unload">
            <summary>
            override that disposes of all loaded Effects
            </summary>
        </member>
        <member name="T:Nez.Systems.NezGlobalContentManager">
            <summary>
            the only difference between this class and NezContentManager is that this one can load embedded resources from the Nez.dll
            </summary>
        </member>
        <member name="M:Nez.Systems.NezGlobalContentManager.OpenStream(System.String)">
            <summary>
            override that will load embedded resources if they have the "nez://" prefix
            </summary>
            <returns>The stream.</returns>
            <param name="assetName">Asset name.</param>
        </member>
        <member name="T:Nez.Time">
            <summary>
            provides frame timing information
            </summary>
        </member>
        <member name="F:Nez.Time.time">
            <summary>
            total time the game has been running
            </summary>
        </member>
        <member name="F:Nez.Time.deltaTime">
            <summary>
            delta time from the previous frame to the current, scaled by timeScale
            </summary>
        </member>
        <member name="F:Nez.Time.unscaledDeltaTime">
            <summary>
            unscaled version of deltaTime. Not affected by timeScale
            </summary>
        </member>
        <member name="F:Nez.Time.altDeltaTime">
            <summary>
            secondary deltaTime for use when you need to scale two different deltas simultaneously
            </summary>
        </member>
        <member name="F:Nez.Time.timeSinceSceneLoad">
            <summary>
            total time since the Scene was loaded
            </summary>
        </member>
        <member name="F:Nez.Time.timeScale">
            <summary>
            time scale of deltaTime
            </summary>
        </member>
        <member name="F:Nez.Time.altTimeScale">
            <summary>
            time scale of altDeltaTime
            </summary>
        </member>
        <member name="F:Nez.Time.frameCount">
            <summary>
            total number of frames that have passed
            </summary>
        </member>
        <member name="M:Nez.Time.checkEvery(System.Single)">
            <summary>
            Allows to check in intervals. Should only be used with interval values above deltaTime,
            otherwise it will always return true.
            </summary>
        </member>
        <member name="F:Nez.Core.emitter">
            <summary>
            core emitter. emits only Core level events.
            </summary>
        </member>
        <member name="F:Nez.Core.exitOnEscapeKeypress">
            <summary>
            enables/disables if we should quit the app when escape is pressed
            </summary>
        </member>
        <member name="F:Nez.Core.pauseOnFocusLost">
            <summary>
            enables/disables pausing when focus is lost. No update or render methods will be called if true when not in focus.
            </summary>
        </member>
        <member name="F:Nez.Core.debugRenderEnabled">
            <summary>
            enables/disables debug rendering
            </summary>
        </member>
        <member name="F:Nez.Core.graphicsDevice">
            <summary>
            global access to the graphicsDevice
            </summary>
        </member>
        <member name="F:Nez.Core.content">
            <summary>
            global content manager for loading any assets that should stick around between scenes
            </summary>
        </member>
        <member name="F:Nez.Core.defaultSamplerState">
            <summary>
            default SamplerState used by Materials. Note that this must be set at launch! Changing it after that time will result in only
            Materials created after it was set having the new SamplerState
            </summary>
        </member>
        <member name="P:Nez.Core.defaultWrappedSamplerState">
            <summary>
            default wrapped SamplerState. Determined by the Filter of the defaultSamplerState.
            </summary>
            <value>The default state of the wraped sampler.</value>
        </member>
        <member name="P:Nez.Core.services">
            <summary>
            default GameServiceContainer access
            </summary>
            <value>The services.</value>
        </member>
        <member name="F:Nez.Core.entitySystemsEnabled">
            <summary>
            internal flag used to determine if EntitySystems should be used or not
            </summary>
        </member>
        <member name="F:Nez.Core._instance">
            <summary>
            facilitates easy access to the global Content instance for internal classes
            </summary>
        </member>
        <member name="F:Nez.Core._graphicsDeviceChangeTimer">
            <summary>
            used to coalesce GraphicsDeviceReset events
            </summary>
        </member>
        <member name="P:Nez.Core.scene">
            <summary>
            The currently active Scene. Note that if set, the Scene will not actually change until the end of the Update
            </summary>
        </member>
        <member name="M:Nez.Core.onGraphicsDeviceReset(System.Object,System.EventArgs)">
            <summary>
            this gets called whenever the screen size changes
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">E.</param>
        </member>
        <member name="M:Nez.Core.onSceneChanged">
            <summary>
            Called after a Scene ends, before the next Scene begins
            </summary>
        </member>
        <member name="M:Nez.Core.startSceneTransition``1(``0)">
            <summary>
            temporarily runs SceneTransition allowing one Scene to transition to another smoothly with custom effects.
            </summary>
            <param name="sceneTransition">Scene transition.</param>
        </member>
        <member name="M:Nez.Core.registerGlobalManager(Nez.IUpdatableManager)">
            <summary>
            adds a global manager object that will have its update method called each frame before Scene.update is called
            </summary>
            <returns>The global manager.</returns>
            <param name="manager">Manager.</param>
        </member>
        <member name="M:Nez.Core.unregisterGlobalManager(Nez.IUpdatableManager)">
            <summary>
            removes the global manager object
            </summary>
            <returns>The global manager.</returns>
            <param name="manager">Manager.</param>
        </member>
        <member name="M:Nez.Core.getGlobalManager``1">
            <summary>
            gets the global manager of type T
            </summary>
            <returns>The global manager.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Core.startCoroutine(System.Collections.IEnumerator)">
            <summary>
            starts a coroutine. Coroutines can yeild ints/floats to delay for seconds or yeild to other calls to startCoroutine.
            Yielding null will make the coroutine get ticked the next frame.
            </summary>
            <returns>The coroutine.</returns>
            <param name="enumerator">Enumerator.</param>
        </member>
        <member name="M:Nez.Core.schedule(System.Single,System.Boolean,System.Object,System.Action{Nez.ITimer})">
            <summary>
            schedules a one-time or repeating timer that will call the passed in Action
            </summary>
            <param name="timeInSeconds">Time in seconds.</param>
            <param name="repeats">If set to <c>true</c> repeats.</param>
            <param name="context">Context.</param>
            <param name="onTime">On time.</param>
        </member>
        <member name="M:Nez.Core.schedule(System.Single,System.Object,System.Action{Nez.ITimer})">
            <summary>
            schedules a one-time timer that will call the passed in Action after timeInSeconds
            </summary>
            <param name="timeInSeconds">Time in seconds.</param>
            <param name="context">Context.</param>
            <param name="onTime">On time.</param>
        </member>
        <member name="M:Nez.Core.schedule(System.Single,System.Boolean,System.Action{Nez.ITimer})">
            <summary>
            schedules a one-time or repeating timer that will call the passed in Action
            </summary>
            <param name="timeInSeconds">Time in seconds.</param>
            <param name="repeats">If set to <c>true</c> repeats.</param>
            <param name="onTime">On time.</param>
        </member>
        <member name="M:Nez.Core.schedule(System.Single,System.Action{Nez.ITimer})">
            <summary>
            schedules a one-time timer that will call the passed in Action after timeInSeconds
            </summary>
            <param name="timeInSeconds">Time in seconds.</param>
            <param name="onTime">On time.</param>
        </member>
        <member name="F:Nez.CoreEvents.GraphicsDeviceReset">
            <summary>
            fired when the graphics device resets. When this happens, any RenderTargets or other contents of VRAM will be wiped and need
            to be regenerated
            </summary>
        </member>
        <member name="F:Nez.CoreEvents.SceneChanged">
            <summary>
            fired when the scene changes
            </summary>
        </member>
        <member name="F:Nez.CoreEvents.OrientationChanged">
            <summary>
            fired when the device orientation changes
            </summary>
        </member>
        <member name="T:Nez.CoreEventsComparer">
            <summary>
            comparer that should be passed to a dictionary constructor to avoid boxing/unboxing when using an enum as a key
            on Mono
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.lineHeight">
            <summary>
            Gets or sets the line spacing (the distance from baseline to baseline) of the font.
            </summary>
            <value>The height of the line.</value>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.spacing">
            <summary>
            Gets or sets the spacing (tracking) between characters in the font.
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.descent">
            <summary>
            The distance from the bottom of the glyph that extends the lowest to the baseline. This number is negative.
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.padTop">
            <summary>
            these are currently read in from the .fnt file but not used
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.padBottom">
            <summary>
            these are currently read in from the .fnt file but not used
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.padLeft">
            <summary>
            these are currently read in from the .fnt file but not used
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.padRight">
            <summary>
            these are currently read in from the .fnt file but not used
            </summary>
        </member>
        <member name="P:Nez.BitmapFonts.BitmapFont.defaultCharacter">
            <summary>
            Gets or sets the character that will be substituted when a given character is not included in the font.
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.defaultCharacterRegion">
            <summary>
            populated with ' ' by default and reset whenever defaultCharacter is set
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont._transformationMatrix">
            <summary>
            this sucker gets used a lot so we cache it to avoid having to create it every frame
            </summary>
        </member>
        <member name="F:Nez.BitmapFonts.BitmapFont.spaceWidth">
            <summary>
            width of a space
            </summary>
        </member>
        <member name="M:Nez.BitmapFonts.BitmapFont.truncateText(System.String,System.String,System.Single)">
            <summary>
            truncates text and returns a new string with ellipsis appended if necessary. This method ignores all
            line breaks.
            </summary>
            <returns>The text.</returns>
            <param name="text">Text.</param>
            <param name="ellipsis">Ellipsis.</param>
            <param name="maxLineWidth">Max line width.</param>
        </member>
        <member name="M:Nez.BitmapFonts.BitmapFont.measureString(System.String)">
            <summary>
            Returns the size of the contents of a string when rendered in this font.
            </summary>
            <returns>The string.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.BitmapFonts.BitmapFont.measureString(System.Text.StringBuilder)">
            <summary>
            Returns the size of the contents of a StringBuilder when rendered in this font.
            </summary>
            <returns>The string.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.BitmapFonts.BitmapFont.tryGetFontRegionForChar(System.Char,Nez.BitmapFonts.BitmapFontRegion@,System.Boolean)">
            <summary>
            gets the BitmapFontRegion for the given char optionally substituting the default region if it isnt present.
            </summary>
            <returns><c>true</c>, if get font region for char was tryed, <c>false</c> otherwise.</returns>
            <param name="c">C.</param>
            <param name="fontRegion">Font region.</param>
            <param name="useDefaultRegionIfNotPresent">If set to <c>true</c> use default region if not present.</param>
        </member>
        <member name="M:Nez.BitmapFonts.BitmapFont.hasCharacter(System.Char)">
            <summary>
            checks to see if a BitmapFontRegion exists for the char
            </summary>
            <returns><c>true</c>, if region exists for char was fonted, <c>false</c> otherwise.</returns>
            <param name="c">C.</param>
        </member>
        <member name="M:Nez.BitmapFonts.BitmapFont.fontRegionForChar(System.Char,System.Boolean)">
            <summary>
            gets the BitmapFontRegion for char. Returns null if it doesnt exist and useDefaultRegionIfNotPresent is false.
            </summary>
            <returns>The region for char.</returns>
            <param name="c">C.</param>
            <param name="useDefaultRegionIfNotPresent">If set to <c>true</c> use default region if not present.</param>
        </member>
        <member name="M:Nez.BitmapFonts.BitmapFont.drawInto(Microsoft.Xna.Framework.Graphics.SpriteBatch,Nez.FontCharacterSource@,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            old SpriteBatch drawing method. This should probably be removed since SpriteBatch was replaced by Batcher
            </summary>
            <param name="spriteBatch">Sprite batch.</param>
            <param name="text">Text.</param>
            <param name="position">Position.</param>
            <param name="color">Color.</param>
            <param name="rotation">Rotation.</param>
            <param name="origin">Origin.</param>
            <param name="scale">Scale.</param>
            <param name="effect">Effect.</param>
            <param name="depth">Depth.</param>
        </member>
        <member name="F:Nez.Console.DebugConsole.renderScale">
            <summary>
            controls the scale of the console
            </summary>
        </member>
        <member name="F:Nez.Console.DebugConsole._functionKeyActions">
            <summary>
            bind any custom Actions you would like to function keys
            </summary>
        </member>
        <member name="F:Nez.Console.DebugConsole.COMMAND_HISTORY_PADDING">
            <summary>
            separation of the command entry and history boxes
            </summary>
        </member>
        <member name="F:Nez.Console.DebugConsole.HORIZONTAL_PADDING">
            <summary>
            global padding on the left/right of the console
            </summary>
        </member>
        <member name="T:Nez.Console.CommandAttribute">
            <summary>
            add this attribute to any static method
            </summary>
        </member>
        <member name="T:Nez.Tweens.EaseHelper">
            <summary>
            helper with a single method that takes in an EaseType and applies that ease equation with the given
            duration and time parameters. We do this to avoid passing around Funcs which create bogs of trash for
            the garbage collector (function pointers please!)
            </summary>
        </member>
        <member name="M:Nez.Tweens.EaseHelper.oppositeEaseType(Nez.Tweens.EaseType)">
            <summary>
            returns the opposite EaseType of easeType
            </summary>
            <returns>The ease type.</returns>
            <param name="easeType">Ease type.</param>
        </member>
        <member name="T:Nez.Tweens.Easing">
            <summary>
            standard easing equations simplified by replacing the b and c params (begin and change values) with 0 and
            1 then reducing. This is done so that we can get back a raw value between 0 - 1 (except elastic/bounce which
            purposely go over the bounds) and then use that value to lerp anything.
            </summary>
        </member>
        <member name="T:Nez.Tweens.Lerps">
            <summary>
            series of static methods to handle all common tween type structs along with unclamped lerps for them.
            unclamped lerps are required for bounce, elastic or other tweens that exceed the 0 - 1 range.
            </summary>
        </member>
        <member name="M:Nez.Tweens.Lerps.lerpTowards(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            remainingFactorPerSecond is the percentage of the distance it covers every second. should be between 0 and 1.
            if it's 0.25 it means it covers 75% of the remaining distance every second independent of the framerate
            </summary>
            <returns>The towards.</returns>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="remainingFactorPerSecond">Remaining factor per second.</param>
            <param name="deltaTime">Delta time.</param>
        </member>
        <member name="M:Nez.Tweens.Lerps.lerpDamp(System.Single,System.Single,System.Single)">
            <summary>
            A smoothing rate of zero will give you back the target value (i.e. no smoothing), and a rate of 1 is technically not allowed,
            but will just give you back the source value (i.e. infinite smoothing). Note that this is the opposite of the way a lerp
            parameter works, but if you so desire, you can just use additive inverse of the smoothing parameter inside the Pow.
            Smoothing rate dictates the proportion of source remaining after one second
            </summary>
            <param name="source">Source.</param>
            <param name="target">Target.</param>
            <param name="smoothing">Smoothing.</param>
            <param name="dt">Dt.</param>
        </member>
        <member name="M:Nez.Tweens.Lerps.fastSpring(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            uses the semi-implicit euler method. faster, but not always stable.
            see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
            </summary>
            <returns>The spring.</returns>
            <param name="currentValue">Current value.</param>
            <param name="targetValue">Target value.</param>
            <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
            <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
            should be between 0.01f, 1f to avoid unstable systems.</param>
            <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
            full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
        </member>
        <member name="M:Nez.Tweens.Lerps.stableSpring(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            uses the implicit euler method. slower, but always stable.
            see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
            </summary>
            <returns>The spring.</returns>
            <param name="currentValue">Current value.</param>
            <param name="targetValue">Target value.</param>
            <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
            <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
            should be between 0.01f, 1f to avoid unstable systems.</param>
            <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
            full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
        </member>
        <member name="M:Nez.Tweens.Lerps.fastSpring(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single)">
            <summary>
            uses the semi-implicit euler method. slower, but always stable.
            see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
            </summary>
            <returns>The spring.</returns>
            <param name="currentValue">Current value.</param>
            <param name="targetValue">Target value.</param>
            <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
            <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
            should be between 0.01f, 1f to avoid unstable systems.</param>
            <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
            full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
        </member>
        <member name="M:Nez.Tweens.Lerps.stableSpring(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single)">
            <summary>
            uses the implicit euler method. faster, but not always stable.
            see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
            </summary>
            <returns>The spring.</returns>
            <param name="currentValue">Current value.</param>
            <param name="targetValue">Target value.</param>
            <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
            <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
            should be between 0.01f, 1f to avoid unstable systems.</param>
            <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
            full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
        </member>
        <member name="M:Nez.Tweens.ITweenable.tick">
            <summary>
            called by TweenManager each frame like an internal Update
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITweenable.recycleSelf">
            <summary>
            called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
            should first check the _shouldRecycleTween bool in their implementation!
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITweenable.isRunning">
            <summary>
            checks to see if a tween is running
            </summary>
            <returns><c>true</c>, if running was ised, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Tweens.ITweenable.start">
            <summary>
            starts the tween
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITweenable.pause">
            <summary>
            pauses the tween
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITweenable.resume">
            <summary>
            resumes the tween after a pause
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITweenable.stop(System.Boolean)">
            <summary>
            stops the tween optionally bringing it to completion
            </summary>
            <param name="bringToCompletion">If set to <c>true</c> bring to completion.</param>
        </member>
        <member name="T:Nez.Tweens.AbstractTweenable">
            <summary>
            AbstractTweenable serves as a base for any custom classes you might want to make that can be ticked. These differ from
            ITweens in that they dont implement the ITweenT interface. What does that mean? It just says that an AbstractTweenable
            is not just moving a value from start to finish. It can do anything at all that requires a tick each frame.
            
            The TweenChain is one example of AbstractTweenable for reference.
            </summary>
        </member>
        <member name="F:Nez.Tweens.AbstractTweenable._isCurrentlyManagedByTweenManager">
            <summary>
            AbstractTweenable are often kept around after they complete. This flag lets them know internally if they are currently
            being tweened by TweenManager so that they can re-add themselves if necessary.
            </summary>
        </member>
        <member name="T:Nez.Tweens.ITween`1">
            <summary>
            a series of strongly typed, chainable methods to setup various tween properties
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setEaseType(Nez.Tweens.EaseType)">
            <summary>
            sets the ease type used for this tween
            </summary>
            <returns>The ease type.</returns>
            <param name="easeType">Ease type.</param>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setDelay(System.Single)">
            <summary>
            sets the delay before starting the tween
            </summary>
            <returns>The delay.</returns>
            <param name="delay">Delay.</param>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setDuration(System.Single)">
            <summary>
            sets the tween duration
            </summary>
            <returns>The duration.</returns>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setTimeScale(System.Single)">
            <summary>
            sets the timeScale used for this tween. The timeScale will be multiplied with Time.deltaTime/Time.unscaledDeltaTime
            to get the actual delta time used for the tween.
            </summary>
            <returns>The time scale.</returns>
            <param name="timeScale">Time scale.</param>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setIsTimeScaleIndependent">
            <summary>
            sets the tween to use Time.unscaledDeltaTime instead of Time.deltaTime
            </summary>
            <returns>The is time scale independant.</returns>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setCompletionHandler(System.Action{Nez.Tweens.ITween{`0}})">
            <summary>
            chainable. sets the action that should be called when the tween is complete.
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setLoops(Nez.Tweens.LoopType,System.Int32,System.Single)">
            <summary>
            chainable. set the loop type for the tween. a single pingpong loop means going from start-finish-start.
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setLoopCompletionHandler(System.Action{Nez.Tweens.ITween{`0}})">
            <summary>
            chainable. sets the action that should be called when a loop is complete. A loop is either when the first part of
            a ping-pong animation completes or when starting over when using a restart-from-beginning loop type. Note that ping-pong
            loops (which are really two part tweens) will not fire the loop completion handler on the last iteration. The normal
            tween completion handler will fire though
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setFrom(`0)">
            <summary>
            sets the start position for the tween
            </summary>
            <returns>The from.</returns>
            <param name="from">From.</param>
        </member>
        <member name="M:Nez.Tweens.ITween`1.prepareForReuse(`0,`0,System.Single)">
            <summary>
            prepares a tween for reuse by resetting its from/to values and duration
            </summary>
            <returns>The for reuse.</returns>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nez.Tweens.ITween`1.setRecycleTween(System.Boolean)" -->
        <member name="M:Nez.Tweens.ITween`1.setIsRelative">
            <summary>
            helper that just sets the to value of the tween to be to + from making the tween relative
            to its current value.
            </summary>
            <returns>The is relative tween.</returns>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setContext(System.Object)">
            <summary>
            allows you to set any object reference retrievable via tween.context. This is handy for avoiding
            closure allocations for completion handler Actions. You can also search TweenManager for all tweens with a specific
            context.
            </summary>
            <returns>The context.</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:Nez.Tweens.ITween`1.setNextTween(Nez.Tweens.ITweenable)">
            <summary>
            allows you to add a tween that will get run after this tween completes. Note that nextTween must be an ITweenable!
            Also note that all ITweenTs are ITweenable.
            </summary>
            <returns>The next tween.</returns>
            <param name="nextTween">Next tween.</param>
        </member>
        <member name="T:Nez.Tweens.ITweenTarget`1">
            <summary>
            any object that wants to be tweened needs to implement this. TweenManager internally likes to make a simple object
            that implements this interface and stores a reference to the object being tweened. That makes for tiny, simple,
            lightweight implementations that can be handed off to any TweenT
            </summary>
        </member>
        <member name="M:Nez.Tweens.ITweenTarget`1.setTweenedValue(`0)">
            <summary>
            sets the final, tweened value on the object of your choosing.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.Tweens.ITweenTarget`1.getTargetObject">
            <summary>
            gets the target of the tween or null for TweenTargets that arent necessarily all about a single object.
            its only real use is for TweenManager to find a list of tweens by target.
            </summary>
            <returns>The target object.</returns>
        </member>
        <member name="T:Nez.Tweens.ITweenControl">
            <summary>
            more specific tween playback controls here.
            </summary>
        </member>
        <member name="P:Nez.Tweens.ITweenControl.context">
            <summary>
            handy property that you can use in any callbacks (such as a completion handler) to avoid allocations when using
            anonymous Actions
            </summary>
            <value>The context.</value>
        </member>
        <member name="M:Nez.Tweens.ITweenControl.jumpToElapsedTime(System.Single)">
            <summary>
            warps the tween to elapsedTime clamping it between 0 and duration. this will immediately update the tweened
            object whether it is paused, completed or running.
            </summary>
            <param name="elapsedTime">Elapsed time.</param>
        </member>
        <member name="M:Nez.Tweens.ITweenControl.waitForCompletion">
            <summary>
            when called from StartCoroutine it will yield until the tween is complete
            </summary>
            <returns>The for completion.</returns>
        </member>
        <member name="M:Nez.Tweens.ITweenControl.getTargetObject">
            <summary>
            gets the target of the tween or null for TweenTargets that arent necessarily all about a single object.
            its only real use is for TweenManager to find a list of tweens by target.
            </summary>
            <returns>The target object.</returns>
        </member>
        <member name="M:Nez.Tweens.Tween`1.reverseTween">
            <summary>
            reverses the current tween. if it was going forward it will be going backwards and vice versa.
            </summary>
        </member>
        <member name="M:Nez.Tweens.Tween`1.waitForCompletion">
            <summary>
            when called via StartCoroutine this will continue until the tween completes
            </summary>
            <returns>The for completion.</returns>
        </member>
        <member name="M:Nez.Tweens.Tween`1.initialize(Nez.Tweens.ITweenTarget{`0},`0,System.Single)">
            <summary>
            resets all state to defaults and sets the initial state based on the paramaters passed in. This method serves
            as an entry point so that Tween subclasses can call it and so that tweens can be recycled. When recycled,
            the constructor will not be called again so this method encapsulates what the constructor would be doing.
            </summary>
            <param name="target">Target.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.Tweens.Tween`1.handleLooping(System.Single)">
            <summary>
            handles loop logic
            </summary>
        </member>
        <member name="T:Nez.Tweens.PropertyTarget`1">
            <summary>
            generic ITweenTarget used for all property tweens
            </summary>
        </member>
        <member name="F:Nez.Tweens.TweenManager.removeAllTweensOnLevelLoad">
            <summary>
            if true, the active tween list will be cleared when a new level loads
            </summary>
        </member>
        <member name="F:Nez.Tweens.TweenManager.cacheIntTweens">
            <summary>
            automatic caching of various types is supported here. Note that caching will only work when using extension methods to start
            the tweens or if you fetch a tween from the cache when doing custom tweens. See the extension method implementations for
            how to fetch a cached tween.
            </summary>
        </member>
        <member name="F:Nez.Tweens.TweenManager._activeTweens">
            <summary>
            internal list of all the currently active tweens
            </summary>
        </member>
        <member name="F:Nez.Tweens.TweenManager._tempTweens">
            <summary>
            stores tweens marked for removal
            </summary>
        </member>
        <member name="F:Nez.Tweens.TweenManager._isUpdating">
            <summary>
            flag indicating the tween update loop is running
            </summary>
        </member>
        <member name="M:Nez.Tweens.TweenManager.addTween(Nez.Tweens.ITweenable)">
            <summary>
            adds a tween to the active tweens list
            </summary>
            <param name="tween">Tween.</param>
        </member>
        <member name="M:Nez.Tweens.TweenManager.removeTween(Nez.Tweens.ITweenable)">
            <summary>
            removes a tween from the active tweens list
            </summary>
            <param name="tween">Tween.</param>
        </member>
        <member name="M:Nez.Tweens.TweenManager.stopAllTweens(System.Boolean)">
            <summary>
            stops all tweens optionlly bringing them all to completion
            </summary>
            <param name="bringToCompletion">If set to <c>true</c> bring to completion.</param>
        </member>
        <member name="M:Nez.Tweens.TweenManager.allTweensWithContext(System.Object)">
            <summary>
            returns all the tweens that have a specific context. Tweens are returned as ITweenable since that is all
            that TweenManager knows about.
            </summary>
            <returns>The tweens with context.</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:Nez.Tweens.TweenManager.stopAllTweensWithContext(System.Object,System.Boolean)">
            <summary>
            stops all the tweens with a given context
            </summary>
            <returns>The tweens with context.</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:Nez.Tweens.TweenManager.allTweensWithTarget(System.Object)">
            <summary>
            returns all the tweens that have a specific target. Tweens are returned as ITweenControl since that is all
            that TweenManager knows about.
            </summary>
            <returns>The tweens with target.</returns>
            <param name="target">target.</param>
        </member>
        <member name="M:Nez.Tweens.TweenManager.stopAllTweensWithTarget(System.Object,System.Boolean)">
            <summary>
            stops all the tweens that have a specific target
            that TweenManager knows about.
            </summary>
            <param name="target">target.</param>
        </member>
        <member name="F:Nez.Tweens.TransformSpringTween.dampingRatio">
            <summary>
            lower values are less damped and higher values are more damped resulting in less springiness.
            should be between 0.01f, 1f to avoid unstable systems.
            </summary>
        </member>
        <member name="F:Nez.Tweens.TransformSpringTween.angularFrequency">
            <summary>
            An angular frequency of 2pi (radians per second) means the oscillation completes one
            full period over one second, i.e. 1Hz. should be less than 35 or so to remain stableThe angular frequency.
            </summary>
        </member>
        <member name="M:Nez.Tweens.TransformSpringTween.#ctor(Nez.Transform,Nez.Tweens.TransformTargetType,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="!:Prime31.ZestKit.TransformSpringTween"/> class.
            </summary>
            <param name="transform">Transform.</param>
            <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
            should be between 0.01f, 1f to avoid unstable systems.</param>
            <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
            full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
        </member>
        <member name="M:Nez.Tweens.TransformSpringTween.setTargetValue(Microsoft.Xna.Framework.Vector2)">
            <summary>
            you can call setTargetValue at any time to reset the target value to a new Vector2. If you have not called start to add the
            spring tween it will be called for you.
            </summary>
            <param name="targetValue">Target value.</param>
        </member>
        <member name="M:Nez.Tweens.TransformSpringTween.updateDampingRatioWithHalfLife(System.Single)">
            <summary>
            lambda should be the desired duration when the oscillation magnitude is reduced by 50%
            </summary>
            <param name="lambda">Lambda.</param>
        </member>
        <member name="T:Nez.Tweens.TransformTargetType">
            <summary>
            useful enum for any Transform related property tweens
            </summary>
        </member>
        <member name="T:Nez.Tweens.TransformVector2Tween">
            <summary>
            this is a special case since Transforms are by far the most tweened object. we encapsulate the Tween and the ITweenTarget
            in a single, cacheable class
            </summary>
        </member>
        <member name="T:Nez.ReflectionUtils">
            <summary>
            helper class to fetch property delegates
            </summary>
        </member>
        <member name="M:Nez.ReflectionUtils.setterForProperty``1(System.Object,System.String)">
            <summary>
            either returns a super fast Delegate to set the given property or null if it couldn't be found
            via reflection
            </summary>
        </member>
        <member name="M:Nez.ReflectionUtils.getterForProperty``1(System.Object,System.String)">
            <summary>
            either returns a super fast Delegate to get the given property or null if it couldn't be found
            via reflection
            </summary>
        </member>
        <member name="T:Nez.ICoroutine">
            <summary>
            interface returned by startCoroutine which provides the ability to stop the coroutine mid-flight
            </summary>
        </member>
        <member name="M:Nez.ICoroutine.stop">
            <summary>
            stops the Coroutine
            </summary>
        </member>
        <member name="M:Nez.ICoroutine.setUseUnscaledDeltaTime(System.Boolean)">
            <summary>
            sets whether the Coroutine should use deltaTime or unscaledDeltaTime for timing
            </summary>
            <returns>The use unscaled delta time.</returns>
            <param name="useUnscaledDeltaTime">If set to <c>true</c> use unscaled delta time.</param>
        </member>
        <member name="M:Nez.Coroutine.waitForSeconds(System.Single)">
            <summary>
            causes a Coroutine to pause for the specified duration. Yield on Coroutine.waitForSeconds in a coroutine to use.
            </summary>
            <returns>The for seconds.</returns>
            <param name="seconds">Seconds.</param>
        </member>
        <member name="T:Nez.WaitForSeconds">
            <summary>
            helper class for when a coroutine wants to pause for some duration. Returning Coroutine.waitForSeconds returns one of these
            to avoid having to return an int/float and paying the boxing penalty.
            </summary>
        </member>
        <member name="M:Nez.Timers.TimerManager.schedule(System.Single,System.Boolean,System.Object,System.Action{Nez.ITimer})">
            <summary>
            schedules a one-time or repeating timer that will call the passed in Action
            </summary>
            <param name="timeInSeconds">Time in seconds.</param>
            <param name="repeats">If set to <c>true</c> repeats.</param>
            <param name="context">Context.</param>
            <param name="onTime">On time.</param>
        </member>
        <member name="T:Nez.Timers.Timer">
            <summary>
            private class hiding the implementation of ITimer
            </summary>
        </member>
        <member name="M:Nez.Timers.Timer.unload">
            <summary>
            nulls out the object references so the GC can pick them up if needed
            </summary>
        </member>
        <member name="M:Nez.ITimer.stop">
            <summary>
            call stop to stop this timer from being run again. This has no effect on a non-repeating timer.
            </summary>
        </member>
        <member name="M:Nez.ITimer.reset">
            <summary>
            resets the elapsed time of the timer to 0
            </summary>
        </member>
        <member name="M:Nez.ITimer.getContext``1">
            <summary>
            returns the context casted to T as a convenience
            </summary>
            <returns>The context.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Nez.Sprites.SpriteAnimation">
            <summary>
            houses the information that a SpriteT requires for animation
            </summary>
        </member>
        <member name="P:Nez.Sprites.SpriteAnimation.fps">
            <summary>
            frames per second for the animations
            </summary>
            <value>The fps.</value>
        </member>
        <member name="P:Nez.Sprites.SpriteAnimation.loop">
            <summary>
            controls whether the animation should loop
            </summary>
            <value>The loop.</value>
        </member>
        <member name="P:Nez.Sprites.SpriteAnimation.pingPong">
            <summary>
            if loop is true, this controls if an animation loops sequentially or back and forth
            </summary>
            <value>The ping pong.</value>
        </member>
        <member name="M:Nez.Sprites.SpriteAnimation.prepareForUse">
            <summary>
            called by SpriteT to calculate the secondsPerFrame and totalDuration based on the loop details and frame count
            </summary>
            <returns>The for use.</returns>
        </member>
        <member name="M:Nez.Sprites.SpriteAnimation.setOrigin(Microsoft.Xna.Framework.Vector2)">
            <summary>
            sets the origin for all frames in this animation
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:Nez.Sprites.SpriteAnimation.addFrame(Nez.Textures.Subtexture)">
            <summary>
            adds a frame to this animation
            </summary>
            <param name="subtexture">Subtexture.</param>
        </member>
        <member name="M:Nez.Sprites.SpriteAnimation.addFrames(System.Collections.Generic.List{Nez.Textures.Subtexture})">
            <summary>
            adds multiple frames to this animation
            </summary>
            <returns>The frames.</returns>
            <param name="subtextures">Subtextures.</param>
        </member>
        <member name="T:Nez.Sprites.SpriteTrail">
            <summary>
            renders and fades a series of copies of the Sprite on the same Entity. minDistanceBetweenInstances determines how often a trail
            sprite is added.
            </summary>
        </member>
        <member name="T:Nez.Sprites.SpriteTrail.SpriteTrailInstance">
            <summary>
            helper class that houses the data required for the individual trail instances
            </summary>
        </member>
        <member name="M:Nez.Sprites.SpriteTrail.SpriteTrailInstance.update">
            <summary>
            returns true when the fade out is complete
            </summary>
        </member>
        <member name="F:Nez.Sprites.SpriteTrail.minDistanceBetweenInstances">
            <summary>
            how far does the Sprite have to move before a new instance is spawned
            </summary>
        </member>
        <member name="F:Nez.Sprites.SpriteTrail.fadeDuration">
            <summary>
            total duration of the fade from initialColor to fadeToColor
            </summary>
        </member>
        <member name="F:Nez.Sprites.SpriteTrail.fadeDelay">
            <summary>
            delay before starting the color fade
            </summary>
        </member>
        <member name="F:Nez.Sprites.SpriteTrail.initialColor">
            <summary>
            initial color of the trail instances
            </summary>
        </member>
        <member name="F:Nez.Sprites.SpriteTrail.fadeToColor">
            <summary>
            final color that will be lerped to over the course of fadeDuration
            </summary>
        </member>
        <member name="F:Nez.Sprites.SpriteTrail._isFirstInstance">
            <summary>
            flag when true it will always add a new instance regardless of the distance check
            </summary>
        </member>
        <member name="F:Nez.Sprites.SpriteTrail._awaitingDisable">
            <summary>
            if awaitingDisable all instances are allowed to fade out before the component is disabled
            </summary>
        </member>
        <member name="M:Nez.Sprites.SpriteTrail.enableSpriteTrail">
            <summary>
            enables the SpriteTrail
            </summary>
            <returns>The sprite trail.</returns>
        </member>
        <member name="M:Nez.Sprites.SpriteTrail.disableSpriteTrail(System.Boolean)">
            <summary>
            disables the SpriteTrail optionally waiting for the current trail to fade out first
            </summary>
            <param name="completeCurrentTrail">If set to <c>true</c> complete current trail.</param>
        </member>
        <member name="M:Nez.Sprites.SpriteTrail.spawnInstance">
            <summary>
            stores the last position for distance calculations and spawns a new trail instance if there is one available in the stack
            </summary>
        </member>
        <member name="T:Nez.Sprites.Sprite`1">
            <summary>
            Sprite class handles the display and animation of a sprite. It uses a suggested Enum as a key (you can use an int as well if you
            prefer). If you do use an Enum it is recommended to pass in a IEqualityComparer when using an enum like CoreEvents does. See also
            the EnumEqualityComparerGenerator.tt T4 template for automatically generating the IEqualityComparer.
            </summary>
        </member>
        <member name="P:Nez.Sprites.Sprite`1.currentAnimation">
            <summary>
            gets/sets the currently playing animation
            </summary>
            <value>The current animation.</value>
        </member>
        <member name="M:Nez.Sprites.Sprite`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            beware the beast man! If you use this constructor you must set the subtexture or set animations so that this sprite has proper bounds
            when the Scene is running.
            </summary>
            <param name="customComparer">Custom comparer.</param>
        </member>
        <member name="M:Nez.Sprites.Sprite`1.#ctor(Nez.Textures.Subtexture)">
            <summary>
            Sprite needs a Subtexture at constructor time so that it knows how to size itself
            </summary>
            <param name="subtexture">Subtexture.</param>
        </member>
        <member name="M:Nez.Sprites.Sprite`1.#ctor(`0,Nez.Sprites.SpriteAnimation)">
            <summary>
            Sprite needs a Subtexture at constructor time so the first frame of the passed in animation will be used for this constructor
            </summary>
            <param name="animationKey">Animation key.</param>
            <param name="animation">Animation.</param>
        </member>
        <member name="M:Nez.Sprites.Sprite`1.play(`0,System.Int32)">
            <summary>
            plays the animation at the given index. You can cache the indices by calling animationIndexForAnimationName.
            </summary>
            <param name="animationKey">Animation key.</param>
            <param name="startFrame">Start frame.</param>
        </member>
        <member name="T:Nez.Sprites.Sprite">
            <summary>
            the most basic and common Renderable. Renders a Subtexture/Texture.
            </summary>
        </member>
        <member name="P:Nez.Sprites.Sprite.origin">
            <summary>
            the origin of the Sprite. This is set automatically when setting a Subtexture.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:Nez.Sprites.Sprite.originNormalized">
            <summary>
            helper property for setting the origin in normalized fashion (0-1 for x and y)
            </summary>
            <value>The origin normalized.</value>
        </member>
        <member name="P:Nez.Sprites.Sprite.flipX">
            <summary>
            determines if the sprite should be rendered normally or flipped horizontally
            </summary>
            <value><c>true</c> if flip x; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.Sprites.Sprite.flipY">
            <summary>
            determines if the sprite should be rendered normally or flipped vertically
            </summary>
            <value><c>true</c> if flip y; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Nez.Sprites.Sprite.spriteEffects">
            <summary>
            Batchers passed along to the Batcher when rendering. flipX/flipY are helpers for setting this.
            </summary>
        </member>
        <member name="P:Nez.Sprites.Sprite.subtexture">
            <summary>
            the Subtexture that should be displayed by this Sprite. When set, the origin of the Sprite is also set to match Subtexture.origin.
            </summary>
            <value>The subtexture.</value>
        </member>
        <member name="M:Nez.Sprites.Sprite.setSubtexture(Nez.Textures.Subtexture)">
            <summary>
            sets the Subtexture and updates the origin of the Sprite to match Subtexture.origin. If for whatever reason you need
            an origin different from the Subtexture either clone it or set the origin AFTER setting the Subtexture here.
            </summary>
            <returns>The subtexture.</returns>
            <param name="subtexture">Subtexture.</param>
        </member>
        <member name="M:Nez.Sprites.Sprite.setOrigin(Microsoft.Xna.Framework.Vector2)">
            <summary>
            sets the origin for the Renderable
            </summary>
            <returns>The origin.</returns>
            <param name="origin">Origin.</param>
        </member>
        <member name="M:Nez.Sprites.Sprite.setOriginNormalized(Microsoft.Xna.Framework.Vector2)">
            <summary>
            helper for setting the origin in normalized fashion (0-1 for x and y)
            </summary>
            <returns>The origin normalized.</returns>
            <param name="origin">Origin.</param>
        </member>
        <member name="M:Nez.Sprites.Sprite.drawOutline(Nez.Graphics,Nez.Camera,System.Int32)">
            <summary>
            Draws the Renderable with an outline. Note that this should be called on disabled Renderables since they shouldnt take part in default
            rendering if they need an ouline.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="camera">Camera.</param>
            <param name="offset">Offset.</param>
        </member>
        <member name="T:Nez.Sprites.ScrollingSprite">
            <summary>
            Scrolling sprite. Note that ScrollingSprite overrides the Material so that it can wrap the UVs. This class requires the texture
            to not be part of an atlas so that wrapping can work.
            </summary>
        </member>
        <member name="F:Nez.Sprites.ScrollingSprite.scrollSpeedX">
            <summary>
            x speed of automatic scrolling
            </summary>
        </member>
        <member name="F:Nez.Sprites.ScrollingSprite.scrollSpeedY">
            <summary>
            y speed of automatic scrolling
            </summary>
        </member>
        <member name="T:Nez.Sprites.SpriteMime">
            <summary>
            this component will draw the same frame of spriteToMime every frame. The only difference in rendering is that SpriteMime uses its own
            localOffset and color. This allows you to use it for the purpose of shadows (by offsetting via localPosition) or silhouettes (with a
            Material that has a stencil read).
            </summary>
        </member>
        <member name="F:Nez.RaycastHit.collider">
            <summary>
            The collider hit by the ray
            </summary>
        </member>
        <member name="F:Nez.RaycastHit.fraction">
            <summary>
            Fraction of the distance along the ray that the hit occurred.
            </summary>
        </member>
        <member name="F:Nez.RaycastHit.distance">
            <summary>
            The distance from the ray origin to the impact point
            </summary>
        </member>
        <member name="F:Nez.RaycastHit.point">
            <summary>
            The point in world space where the ray hit the collider's surface
            </summary>
        </member>
        <member name="F:Nez.RaycastHit.normal">
            <summary>
            The normal vector of the surface hit by the ray
            </summary>
        </member>
        <member name="F:Nez.RaycastHit.centroid">
            <summary>
            The centroid of the primitive used to perform the cast. Where the shape would be positioned for it to contact.
            </summary>
        </member>
        <member name="T:Nez.Flags">
            <summary>
            utility class to assist with dealing with bitmasks. All methods except isFlagSet expect the flag parameter to be a non-shifted flag.
            This lets you use plain old ints (0, 1, 2, 3, etc) to set/unset your flags.
            </summary>
        </member>
        <member name="M:Nez.Flags.isFlagSet(System.Int32,System.Int32)">
            <summary>
            checks to see if the bit flag is set in the int. This check expects flag to be shifted already!
            </summary>
            <returns><c>true</c>, if flag set was ised, <c>false</c> otherwise.</returns>
            <param name="self">Self.</param>
            <param name="flag">Flag.</param>
        </member>
        <member name="M:Nez.Flags.isUnshiftedFlagSet(System.Int32,System.Int32)">
            <summary>
            checks to see if the bit flag is set in the int
            </summary>
            <returns><c>true</c>, if flag set was ised, <c>false</c> otherwise.</returns>
            <param name="self">Self.</param>
            <param name="flag">Flag.</param>
        </member>
        <member name="M:Nez.Flags.setFlagExclusive(System.Int32@,System.Int32)">
            <summary>
            sets the flag bit of the int removing any already set flags
            </summary>
            <param name="self">Self.</param>
            <param name="flag">Flag.</param>
        </member>
        <member name="M:Nez.Flags.setFlag(System.Int32@,System.Int32)">
            <summary>
            sets the flag bit of the int
            </summary>
            <param name="self">Self.</param>
            <param name="flag">Flag.</param>
        </member>
        <member name="M:Nez.Flags.unsetFlag(System.Int32@,System.Int32)">
            <summary>
            unsets the flag bit of the int
            </summary>
            <param name="self">Self.</param>
            <param name="flag">Flag.</param>
        </member>
        <member name="M:Nez.Flags.invertFlags(System.Int32@)">
            <summary>
            inverts the set bits of the int
            </summary>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.Flags.binaryStringRepresentation(System.Int32,System.Int32)">
            <summary>
            prints the binary representation of the int. Handy for debugging int flag overlaps visually.
            </summary>
            <returns>The string representation.</returns>
            <param name="self">Self.</param>
            <param name="leftPadWidth">Left pad width.</param>
        </member>
        <member name="M:Nez.DebugDrawItem.draw(Nez.Graphics)">
            <summary>
            returns true if we are done with this debug draw item
            </summary>
        </member>
        <member name="M:Nez.Random.getSeed">
            <summary>
            returns current seed value
            </summary>
            <returns>Seed.</returns>
        </member>
        <member name="M:Nez.Random.setSeed(System.Int32)">
            <summary>
            resets rng with new seed
            </summary>
            <param name="seed">Seed.</param>
        </member>
        <member name="M:Nez.Random.nextFloat">
            <summary>
            returns a random float between 0 (inclusive) and 1 (exclusive)
            </summary>
            <returns>The float.</returns>
        </member>
        <member name="M:Nez.Random.nextFloat(System.Single)">
            <summary>
            returns a random float between 0 (inclusive) and max (exclusive)
            </summary>
            <returns>The float.</returns>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.Random.nextInt(System.Int32)">
            <summary>
            returns a random int between 0 (inclusive) and max (exclusive)
            </summary>
            <returns>The float.</returns>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.Random.nextAngle">
            <summary>
            returns a random float between 0 and 2 * PI
            </summary>
            <returns>The angle.</returns>
        </member>
        <member name="M:Nez.Random.nextColor">
            <summary>
            returns a random color
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="M:Nez.Random.range(System.Int32,System.Int32)">
            <summary>
            Returns a random integer between min (inclusive) and max (exclusive)
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Nez.Random.range(System.Single,System.Single)">
            <summary>
            Returns a random float between min (inclusive) and max (exclusive)
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Nez.Random.range(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a random Vector2, and x- and y-values of which are between min (inclusive) and max (exclusive)
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Nez.Random.minusOneToOne">
            <summary>
            returns a random float between -1 and 1
            </summary>
            <returns>The one to one.</returns>
        </member>
        <member name="M:Nez.Random.chance(System.Single)">
            <summary>
            returns true if the next random is less than percent. Percent should be between 0 and 1
            </summary>
            <param name="percent">Percent.</param>
        </member>
        <member name="M:Nez.Random.chance(System.Int32)">
            <summary>
            returns true if the next random is less than value. Value should be between 0 and 100.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.Random.choose``1(``0,``0)">
            <summary>
            randomly returns one of the given values
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Random.choose``1(``0,``0,``0)">
            <summary>
            randomly returns one of the given values
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <param name="third">Third.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Random.choose``1(``0,``0,``0,``0)">
            <summary>
            randomly returns one of the given values
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <param name="third">Third.</param>
            <param name="fourth">Fourth.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Nez.FollowCamera">
            <summary>
            basic follow camera. LockOn mode uses no deadzone and just centers the camera on the target. CameraWindow mode wraps a deadzone
            around the target allowing it to move within the deadzone without moving the camera.
            </summary>
        </member>
        <member name="F:Nez.FollowCamera.followLerp">
            <summary>
            how fast the camera closes the distance to the target position
            </summary>
        </member>
        <member name="F:Nez.FollowCamera.deadzone">
            <summary>
            when in CameraWindow mode the width/height is used as a bounding box to allow movement within it without moving the camera.
            when in LockOn mode only the deadzone x/y values are used. This is set to sensible defaults when you call follow but you are
            free to override it to get a custom deadzone directly or via the helper setCenteredDeadzone.
            </summary>
        </member>
        <member name="F:Nez.FollowCamera.focusOffset">
            <summary>
            offset from the screen center that the camera will focus on
            </summary>
        </member>
        <member name="F:Nez.FollowCamera.mapLockEnabled">
            <summary>
            If true, the camera position will not got out of the map rectangle (0,0, mapwidth, mapheight)
            </summary>
        </member>
        <member name="F:Nez.FollowCamera.mapSize">
            <summary>
            Contains the width and height of the current map.
            </summary>
        </member>
        <member name="M:Nez.FollowCamera.clampToMapSize(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Clamps the camera so it never leaves the visible area of the map.
            </summary>
            <returns>The to map size.</returns>
            <param name="position">Position.</param>
        </member>
        <member name="M:Nez.FollowCamera.setCenteredDeadzone(System.Int32,System.Int32)">
            <summary>
            sets up the deadzone centered in the current cameras bounds with the given size
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="T:Nez.Textures.Subtexture">
            <summary>
            represents a single element in a texture atlas consisting of a texture and the source rectangle for the frame
            </summary>
        </member>
        <member name="F:Nez.Textures.Subtexture.texture2D">
            <summary>
            the actual Texture2D
            </summary>
        </member>
        <member name="F:Nez.Textures.Subtexture.sourceRect">
            <summary>
            rectangle in the Texture2D for this element
            </summary>
        </member>
        <member name="F:Nez.Textures.Subtexture.uvs">
            <summary>
            UVs for the texture region
            </summary>
        </member>
        <member name="F:Nez.Textures.Subtexture.center">
            <summary>
            center of the sourceRect if it had a 0,0 origin. This is basically the center in sourceRect-space.
            </summary>
            <value>The center.</value>
        </member>
        <member name="F:Nez.Textures.Subtexture.origin">
            <summary>
            the origin that a RenderableComponent should use when using this Subtexture. Defaults to the center.
            </summary>
        </member>
        <member name="M:Nez.Textures.Subtexture.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            convenience constructor that casts floats to ints for the sourceRect
            </summary>
            <param name="texture">Texture.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.Textures.Subtexture.generateNinePatchRects(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            generates nine patch Rectangles. destArray should have 9 elements. renderRect is the final area in which the nine patch will be rendered.
            To just get the source rects for rendering pass in the Subtexture.sourceRect. Pass in a larger Rectangle to get final destination
            rendering Rectangles.
            </summary>
            <param name="renderRect">Render rect.</param>
            <param name="destArray">Destination array.</param>
            <param name="marginTop">Margin top.</param>
            <param name="marginBottom">Margin bottom.</param>
            <param name="marginLeft">Margin left.</param>
            <param name="marginRight">Margin right.</param>
        </member>
        <member name="M:Nez.Textures.Subtexture.clone">
            <summary>
            clones the Subtexture
            </summary>
        </member>
        <member name="M:Nez.Textures.Subtexture.subtexturesFromAtlas(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            provides a List of subtextures given an atlas with equally spaced rows/columns of sprites
            </summary>
            <returns>The from atlas.</returns>
            <param name="texture">Texture.</param>
            <param name="cellWidth">Cell width.</param>
            <param name="cellHeight">Cell height.</param>
            <param name="cellOffset">the first cell to include while processing. 0 based indexing.</param>
            <param name="maxCellsToInclude">Max cells to included.</param>
        </member>
        <member name="T:Nez.Textures.RenderTarget.TrackedRenderTarget2D">
            <summary>
            internal class with additional lastFrameUsed field for managing temporary RenderTargets
            </summary>
        </member>
        <member name="M:Nez.Textures.RenderTarget.getTemporary(System.Int32,System.Int32)">
            <summary>
            gets a temporary RenderTarget2D from the pool. When done using it call releaseTemporary to put it back in the pool. Note that the
            contents of the RenderTarget2D could be anything at all so clear it if you need to before using it.
            </summary>
            <returns>The temporary.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.Textures.RenderTarget.getTemporary(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            gets a temporary RenderTarget2D from the pool. When done using it call releaseTemporary to put it back in the pool. Note that the
            contents of the RenderTarget2D could be anything at all so clear it if you need to before using it.
            </summary>
            <returns>The temporary.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="depthFormat">Depth format.</param>
        </member>
        <member name="M:Nez.Textures.RenderTarget.releaseTemporary(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            puts a temporary RenderTarget2D back in the pool. Do not attempt to put RenderTarget2Ds in the pool that were not acquired via getTemporary.
            </summary>
            <param name="renderTarget">Render target.</param>
        </member>
        <member name="M:Nez.Textures.RenderTarget.create">
            <summary>
            helper for creating a full screen RenderTarget2D
            </summary>
        </member>
        <member name="M:Nez.Textures.RenderTarget.create(Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            helper for creating a full screen RenderTarget2D with a specific DepthFormat
            </summary>
            <param name="preferredDepthFormat">Preferred depth format.</param>
        </member>
        <member name="M:Nez.Textures.RenderTarget.create(System.Int32,System.Int32)">
            <summary>
            helper for creating a RenderTarget2D
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.Textures.RenderTarget.create(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            helper for creating a RenderTarget2D
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="preferredDepthFormat">Preferred depth format.</param>
        </member>
        <member name="M:Nez.Textures.RenderTarget.create(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            helper for creating a RenderTarget2D
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="preferredFormat">Preferred format.</param>
            <param name="preferredDepthFormat">Preferred depth format.</param>
        </member>
        <member name="F:Nez.Textures.NinePatchSubtexture.hasPadding">
            <summary>
            used to indicate if this nine patch has additional padding information
            </summary>
        </member>
        <member name="T:Nez.Textures.RenderTexture">
            <summary>
            wrapper for a RenderTarget2D that optionally takes care of resizing itself automatcially when the screen size changes
            </summary>
        </member>
        <member name="T:Nez.Textures.RenderTexture.RenderTextureResizeBehavior">
            <summary>
            handles what should happen when onSceneBackBufferSizeChanged. Defaults to SizeToSceneRenderTarget
            </summary>
        </member>
        <member name="F:Nez.Textures.RenderTexture.renderTarget">
            <summary>
            the RenderTarget2D this RenderTexture manages
            </summary>
        </member>
        <member name="F:Nez.Textures.RenderTexture.resizeBehavior">
            <summary>
            resize behavior that should occur when onSceneBackBufferSizeChanged is called
            </summary>
        </member>
        <member name="M:Nez.Textures.RenderTexture.#ctor">
            <summary>
            helper for creating a full screen RenderTarget2D
            </summary>
        </member>
        <member name="M:Nez.Textures.RenderTexture.#ctor(Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            helper for creating a full screen RenderTarget2D with a specific DepthFormat
            </summary>
            <param name="preferredDepthFormat">Preferred depth format.</param>
        </member>
        <member name="M:Nez.Textures.RenderTexture.#ctor(System.Int32,System.Int32)">
            <summary>
            helper for creating a RenderTarget2D
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.Textures.RenderTexture.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            helper for creating a RenderTarget2D
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="preferredDepthFormat">Preferred depth format.</param>
        </member>
        <member name="M:Nez.Textures.RenderTexture.#ctor(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            helper for creating a RenderTarget2D
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="preferredFormat">Preferred format.</param>
            <param name="preferredDepthFormat">Preferred depth format.</param>
        </member>
        <member name="M:Nez.Textures.RenderTexture.onSceneBackBufferSizeChanged(System.Int32,System.Int32)">
            <summary>
            called by Renderers automatically when appropriate. Lets the resizeBehavior kick in so auto resizing can occur
            </summary>
            <param name="newWidth">New width.</param>
            <param name="newHeight">New height.</param>
        </member>
        <member name="M:Nez.Textures.RenderTexture.resizeToFitBackbuffer">
            <summary>
            resizes the RenderTarget2D to match the back buffer size
            </summary>
        </member>
        <member name="M:Nez.Textures.RenderTexture.resize(System.Int32,System.Int32)">
            <summary>
            resizes the RenderTarget2D to the specified size
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.Textures.GaussianBlur.createBlurredTexture(Microsoft.Xna.Framework.Graphics.Texture2D,System.Double)">
            <summary>
            creates a new texture that is a gaussian blurred version of the original
            </summary>
            <returns>The blurred texture.</returns>
            <param name="image">Image.</param>
            <param name="deviation">Deviation.</param>
        </member>
        <member name="M:Nez.Textures.GaussianBlur.createBlurredGrayscaleTexture(Microsoft.Xna.Framework.Graphics.Texture2D,System.Double)">
            <summary>
            creates a new texture that is a gaussian blurred version of the original in grayscale
            </summary>
            <returns>The blurred texture.</returns>
            <param name="image">Image.</param>
            <param name="deviation">Deviation.</param>
        </member>
        <member name="T:Nez.Textures.TextureUtils">
            <summary>
            various utilties for creating textures on the fly. These can be pretty heavy on the CPU so it's best to not try to use them every frame.
            </summary>
        </member>
        <member name="M:Nez.Textures.TextureUtils.createFlatHeightmap(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            processes each pixel of the passed in Texture and in the output texture transparent pixels will be transparentColor and opaque pixels
            will be opaqueColor. This is useful for creating normal maps for rim lighting by applying a grayscale blur then using createNormalMap*
            by doing something like the following. The first step is used only for making rim lighting normal maps:
            - var maskTex = createFlatHeightmap( tex, Color.White, Color.Black )
            - var blurredTex = createBlurredGrayscaleTexture( maskTex, 1 )
            - createNormalMap( blurredTex, 50f )
            </summary>
            <returns>The flat heightmap.</returns>
            <param name="image">Image.</param>
            <param name="opaqueColor">Opaque color.</param>
            <param name="transparentColor">Transparent color.</param>
        </member>
        <member name="M:Nez.Textures.TextureUtils.createBlurredGrayscaleTexture(Microsoft.Xna.Framework.Graphics.Texture2D,System.Double)">
            <summary>
            creates a new texture that is a gaussian blurred version of the original in grayscale
            </summary>
            <returns>The blurred texture.</returns>
            <param name="image">Image.</param>
            <param name="deviation">Deviation.</param>
        </member>
        <member name="M:Nez.Textures.TextureUtils.createBlurredTexture(Microsoft.Xna.Framework.Graphics.Texture2D,System.Double)">
            <summary>
            creates a new texture that is a gaussian blurred version of the original
            </summary>
            <returns>The blurred texture.</returns>
            <param name="image">Image.</param>
            <param name="deviation">Deviation.</param>
        </member>
        <member name="M:Nez.Textures.TextureUtils.createNormalMap(Microsoft.Xna.Framework.Graphics.Texture2D,Nez.Textures.TextureUtils.EdgeDetectionFilter,System.Single,System.Boolean,System.Boolean)">
            <summary>
            generates a normal map from a height map calculating it with a sobel filter
            </summary>
            <returns>The sobel filter.</returns>
            <param name="image">Image.</param>
            <param name="normalStrength">Normal strength.</param>
        </member>
        <member name="F:Nez.TextureAtlases.TexturePackerAtlas._subtextureMap">
            <summary>
            maps actual image names to the index in the subtextures list
            </summary>
        </member>
        <member name="F:Nez.TextureAtlases.TexturePackerAtlas.spriteAnimationDetails">
            <summary>
            stores a map of the name of the sprite animation (derived from texturepacker filename metadata) to an array. 
            each entry in the list refers to index of the corresponding subtexture
            </summary>
        </member>
        <member name="M:Nez.TextureAtlases.TexturePackerAtlas.getSpriteAnimation(System.String)">
            <summary>
            returns a SpriteAnimation given an animationName where the animationName is the region's "filename" metadata 
            in the TexturePacker atlas minus the framenumbers at the end
            </summary>
            <returns>The sprite animation.</returns>
            <param name="animationName">Animation name.</param>
        </member>
        <member name="T:Nez.TextureAtlases.TextureAtlas">
            <summary>
            runtime component of the TextureAtlasGenerator. Stores the main Texture2D and all relevant metadata
            </summary>
        </member>
        <member name="F:Nez.TextureAtlases.TextureAtlas.subtextures">
            <summary>
            array of all subtextures from the atlas
            </summary>
        </member>
        <member name="F:Nez.TextureAtlases.TextureAtlas.regionNames">
            <summary>
            image names for the subtextures. maps directly to the subtextures array
            </summary>
        </member>
        <member name="F:Nez.TextureAtlases.TextureAtlas._spriteAnimationDetails">
            <summary>
            stores a map of the name of the sprite animation (derived from the folder name) to a Point. The Point x/y values are the
            start/end indexes of the subtextures for the animation frames.
            </summary>
        </member>
        <member name="M:Nez.TextureAtlases.TextureAtlas.getSubtexture(System.String)">
            <summary>
            gets the Subtexture for the passed in image name
            </summary>
            <returns>The subtexture.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.TextureAtlases.TextureAtlas.containsSubtexture(System.String)">
            <summary>
            checks whether the subtexture is contained in this atlas.
            </summary>
            <returns><c>true</c>, if subtexture is containsed, <c>false</c> otherwise.</returns>
            <param name="name">the image name</param>
        </member>
        <member name="M:Nez.TextureAtlases.TextureAtlas.getSpriteAnimation(System.String)">
            <summary>
            returns a SpriteAnimation given an animationName where the animationName is the folder that contains the images
            </summary>
            <returns>The sprite animation.</returns>
            <param name="animationName">Animation name.</param>
        </member>
        <member name="M:Nez.LibGdxAtlases.LibGdxAtlas.get(System.String)">
            <summary>
            gets the Subtexture with name or returns null if it cant be found
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.LibGdxAtlases.LibGdxAtlas.getNinePatch(System.String)">
            <summary>
            gets the Subtexture with name or returns null if it cant be found
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.LibGdxAtlases.LibGdxAtlas.getSubtexture(System.String)">
            <summary>
            alias for LibGdxAtlas.get
            </summary>
            <returns>The subtexture.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.LibGdxAtlases.LibGdxAtlas.getAnimation(System.String)">
            <summary>
            gets the sprite animation frames for a given name
            </summary>
            <param name="name">name of the anmation</param>
            <returns></returns>
        </member>
        <member name="F:Nez.Overlap2D.O2DMainItem.layerDepth">
            <summary>
            layerDepth is calculated by the Pipeline processor. It is derrived by getting the max zIndex and converting it to the MonoGame
            0 - 1 range. If sorting issues arise the CompositeItemVO.calculateLayerDepthForChild method is where to look. The default value
            probably just needs to be increased a bit.
            </summary>
        </member>
        <member name="F:Nez.Overlap2D.O2DMainItem.renderLayer">
            <summary>
            renderLayer is derived from the layer name set in Overlap2D. If the layer name contains an integer that value will be parsed and set.
            </summary>
        </member>
        <member name="M:Nez.Overlap2D.O2DMainItem.orginForImageSize(System.Single,System.Single)">
            <summary>
            translates the bottom-left based origin of Overlap2D to a top-left based origin
            </summary>
            <returns>The for image size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.Overlap2D.O2DMainItem.calculateLayerDepth(System.Single)">
            <summary>
            helper to translate zIndex to layerDepth. zIndexMax should be at least equal to the highest zIndex
            </summary>
            <returns>The depth.</returns>
            <param name="zIndexMax">Z index max.</param>
        </member>
        <member name="M:Nez.Overlap2D.O2DCompositeItem.layerDepthForChild(System.Single,Nez.Overlap2D.O2DMainItem,System.Single)">
            <summary>
            gets the layerDepth for a child composite. It calculates it by first getting the composite (parent) layerDepth the standard way
            (via zIndexMaxComp) and then subtracting the inverse of the child (O2DMainItem) layerDepth which uses zIndexMaxChild. For this to
            work intelligently zIndexMaxComp should be the standard scene.zIndexMax value and zIndexMaxChild should be a much higher number. The
            reason for this is so that the parent component has a small offset to use for each child and so they dont overflow to the next zIndex.
            
            Example: parent is 14. Any children must end up being between 14 and 15 so they dont overflow on top of another composite.
            </summary>
            <returns>The depth for child.</returns>
            <param name="zIndexMaxComp">Z index max comp.</param>
            <param name="child">Child.</param>
            <param name="zIndexMaxChild">Z index max child.</param>
        </member>
        <member name="M:Nez.CameraShake.shake(System.Single,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            if the shake is already running this will overwrite the current values only if shakeIntensity > the current shakeIntensity.
            if the shake is not currently active it will be started.
            </summary>
            <param name="shakeIntensity">how much should we shake it</param>
            <param name="shakeDegredation">higher values cause faster degradation</param>
            <param name="shakeDirection">Vector3.zero will result in a shake on just the x/y axis. any other values will result in the passed
            in shakeDirection * intensity being the offset the camera is moved</param>
        </member>
        <member name="P:Nez.Screen.width">
            <summary>
            width of the GraphicsDevice back buffer
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Nez.Screen.height">
            <summary>
            height of the GraphicsDevice back buffer
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Nez.Screen.center">
            <summary>
            gets the Screen's center
            </summary>
            <value>The center.</value>
        </member>
        <member name="M:Nez.Screen.setSize(System.Int32,System.Int32)">
            <summary>
            sets the preferredBackBuffer then applies the changes
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="P:Nez.Particles.ParticleEmitter.simulateInWorldSpace">
            <summary>
            convenience method for setting ParticleEmitterConfig.simulateInWorldSpace. If true, particles will simulate in world space. ie when the
            parent Transform moves it will have no effect on any already active Particles.
            </summary>
        </member>
        <member name="F:Nez.Particles.ParticleEmitter.collisionConfig">
            <summary>
            config object with various properties to deal with particle collisions
            </summary>
        </member>
        <member name="E:Nez.Particles.ParticleEmitter.onAllParticlesExpired">
            <summary>
            event that's going to be called when particles count becomes 0 after stopping emission.
            emission can stop after either we stop it manually or when we run for entire duration specified in ParticleEmitterConfig.
            </summary>
        </member>
        <member name="E:Nez.Particles.ParticleEmitter.onEmissionDurationReached">
            <summary>
            event that's going to be called when emission is stopped due to reaching duration specified in ParticleEmitterConfig
            </summary>
        </member>
        <member name="F:Nez.Particles.ParticleEmitter._emitCounter">
            <summary>
            keeps track of how many particles should be emitted
            </summary>
        </member>
        <member name="F:Nez.Particles.ParticleEmitter._elapsedTime">
            <summary>
            tracks the elapsed time of the emitter
            </summary>
        </member>
        <member name="F:Nez.Particles.ParticleEmitter._emitting">
            <summary>
            if the emitter is emitting this will be true. Note that emitting can be false while particles are still alive. emitting gets set
            to false and then any live particles are allowed to finish their lifecycle.
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.init">
            <summary>
            creates the Batcher and loads the texture if it is available
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.clear">
            <summary>
            removes all particles from the particle emitter
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.play">
            <summary>
            plays the particle emitter
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.stop">
            <summary>
            stops the particle emitter
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.pause">
            <summary>
            pauses the particle emitter
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.resumeEmission">
            <summary>
            resumes emission of particles.
            this is possible only if stop() wasn't called and emission wasn't stopped due to duration
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.pauseEmission">
            <summary>
            pauses emission of particles while allowing existing particles to expire
            </summary>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.emit(System.Int32)">
            <summary>
            manually emit some particles
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Nez.Particles.ParticleEmitter.addParticle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            adds a Particle to the emitter
            </summary>
        </member>
        <member name="T:Nez.Particles.Particle">
            <summary>
            the internal fields are required for the ParticleEmitter to be able to render the Particle
            </summary>
        </member>
        <member name="F:Nez.Particles.Particle._circleCollisionShape">
            <summary>
            shared Circle used for collisions checks
            </summary>
        </member>
        <member name="F:Nez.Particles.Particle._collided">
            <summary>
            flag indicating if this particle has already collided so that we know not to move it in the normal fashion
            </summary>
        </member>
        <member name="M:Nez.Particles.Particle.update(Nez.Particles.ParticleEmitterConfig,Nez.ParticleCollisionConfig@,Microsoft.Xna.Framework.Vector2)">
            <summary>
            updates the particle. Returns true when the particle is no longer alive
            </summary>
            <param name="emitterConfig">Emitter config.</param>
        </member>
        <member name="M:Nez.Particles.Particle.calculateCollisionResponseVelocity(System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            given the relative velocity between the two objects and the MTV this method modifies the relativeVelocity to make it a collision
            response.
            </summary>
            <param name="relativeVelocity">Relative velocity.</param>
            <param name="minimumTranslationVector">Minimum translation vector.</param>
        </member>
        <member name="F:Nez.Particles.ParticleEmitterConfig.simulateInWorldSpace">
            <summary>
            If true, particles will simulate in world space. ie when the parent Transform moves it will have no effect on any already active Particles.
            </summary>
        </member>
        <member name="F:Nez.Particles.ParticleEmitterConfig.sourcePosition">
            <summary>
            sourcePosition is read in but internally it is not used. The ParticleEmitter.localPosition is what the emitter will use for positioning
            </summary>
        </member>
        <member name="T:Nez.Analysis.Alignment">
            <summary>
            Alignment for layout.
            </summary>
        </member>
        <member name="T:Nez.Analysis.Layout">
            <summary>
            Layout class that supports title safe area.
            </summary>
            <remarks>
            You have to support various resolutions when you develop multi-platform
            games. Also, you have to support title safe area for Xbox 360 games.
            
            This structure places given rectangle with specified alignment and margin
            based on layout area (client area) with safe area.
            
            Margin is percentage of client area size.
            
            Example:
            
            Place( region, 0.1f, 0.2f, Aligment.TopLeft );
            
            Place region at 10% from left side of the client area,
            20% from top of the client area.
            
            
            Place( region, 0.3f, 0.4f, Aligment.BottomRight );
            
            Place region at 30% from right side of client,
            40% from the bottom of the client area.
            
            
            You can individually specify client area and safe area.
            So, it is useful when you have split screen game which layout happens based
            on client and it takes care of the safe at same time.
            
            </remarks>
        </member>
        <member name="F:Nez.Analysis.Layout.clientArea">
            <summary>
            Gets/Sets client area.
            </summary>
        </member>
        <member name="F:Nez.Analysis.Layout.safeArea">
            <summary>
            Gets/Sets safe area.
            </summary>
        </member>
        <member name="M:Nez.Analysis.Layout.#ctor(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Construct layout object by specify both client area and safe area.
            </summary>
            <param name="client">Client area</param>
            <param name="safeArea">safe area</param>
        </member>
        <member name="M:Nez.Analysis.Layout.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Construct layout object by specify client area.
            Safe area becomes same size as client area.
            </summary>
            <param name="client">Client area</param>
        </member>
        <member name="M:Nez.Analysis.Layout.#ctor(Microsoft.Xna.Framework.Graphics.Viewport)">
            <summary>
            Construct layout object by specify viewport.
            Safe area becomes same as Viewpoert.TItleSafeArea.
            </summary>
        </member>
        <member name="M:Nez.Analysis.Layout.place(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Nez.Analysis.Alignment)">
            <summary>
            Layouting specified region
            </summary>
            <param name="region">placing region</param>
            <returns>Placed position</returns>
        </member>
        <member name="M:Nez.Analysis.Layout.place(Microsoft.Xna.Framework.Rectangle,System.Single,System.Single,Nez.Analysis.Alignment)">
            <summary>
            Layouting specified region
            </summary>
            <param name="region">placing rectangle</param>
            <returns>placed rectangle</returns>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.enabled">
            <summary>
            enable/disable particle collision
            </summary>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.radiusScale">
            <summary>
            A multiplier applied to the size of each particle before collisions are processed.
            </summary>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.elasticity">
            <summary>
            0 - 1 range where 0 is no bounce and 1 is perfect reflection
            </summary>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.friction">
            <summary>
            0 - 1 range. 0 means no friction, 1 means the object will stop dead on
            </summary>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.collidesWithLayers">
            <summary>
            control which layers this particle system collides with
            </summary>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.gravity">
            <summary>
            gravity value used for simulation after a collision occurs
            </summary>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.lifetimeLoss">
            <summary>
            how much a particle's lifetime is reduced after a collision. 0 is none and 1 is all of it.
            </summary>
        </member>
        <member name="F:Nez.ParticleCollisionConfig.minKillSpeedSquared">
            <summary>
            kill particles whose squared speed falls below this threshold, after a collision
            </summary>
        </member>
        <member name="T:Nez.BitSet">
            <summary>
            This class can be thought of in two ways.  You can see it as a vector of bits or as a set of non-negative integers. The name
            <code>BitSet</code> is a bit misleading.
            
            It is implemented by a bit vector, but its equally possible to see it as set of non-negative integer; each integer in the set is
            represented by a set bit at the corresponding index. The size of this structure is determined by the highest integer in the set.
            
            You can union, intersect and build (symmetric) remainders, by invoking the logical operations and, or, andNot, resp. xor.
            
            This implementation is NOT synchronized against concurrent access from multiple threads. Specifically, if one thread is reading from a bitset
            while another thread is simultaneously modifying it, the results are undefined.
            
            author Jochen Hoenicke
            author Tom Tromey (tromey@cygnus.com)
            author Eric Blake (ebb9@email.byu.edu)
            status updated to 1.4
            </summary>
        </member>
        <member name="F:Nez.BitSet.LONG_MASK">
            <summary>
            A common mask.
            </summary>
        </member>
        <member name="F:Nez.BitSet.bits">
            <summary>
            The actual bits.
            @serial the i'th bit is in bits[i/64] at position i%64 (where position
            0 is the least significant).
            </summary>
        </member>
        <member name="M:Nez.BitSet.#ctor">
            <summary>
            Create a new empty bit set. All bits are initially false.
            </summary>
        </member>
        <member name="M:Nez.BitSet.#ctor(System.Int32)">
            <summary>
            Create a new empty bit set, with a given size.  This
            constructor reserves enough space to represent the integers
            from <code>0</code> to <code>nbits-1</code>.
            </summary>
            <param name="nbits">nbits the initial size of the bit set</param>
        </member>
        <member name="M:Nez.BitSet.and(Nez.BitSet)">
            <summary>
            Performs the logical AND operation on this bit set and the
            given <code>set</code>.  This means it builds the intersection
            of the two sets.  The result is stored into this bit set.
            </summary>
            <param name="bs">the second bit set</param>
        </member>
        <member name="M:Nez.BitSet.andNot(Nez.BitSet)">
            <summary>
            Performs the logical AND operation on this bit set and the
            complement of the given <code>bs</code>.  This means it
            selects every element in the first set, that isn't in the
            second set.  The result is stored into this bit set and is
            effectively the set difference of the two.
            </summary>
            <param name="bs">the second bit set</param>
        </member>
        <member name="M:Nez.BitSet.cardinality">
            <summary>
            Returns the number of bits set to true.
            </summary>
        </member>
        <member name="M:Nez.BitSet.clear">
            <summary>
            Sets all bits in the set to false.
            </summary>
        </member>
        <member name="M:Nez.BitSet.clear(System.Int32)">
            <summary>
            Removes the integer <code>pos</code> from this set. That is
            the corresponding bit is cleared.  If the index is not in the set,
            this method does nothing.
            </summary>
            <param name="pos">a non-negative integer</param>
        </member>
        <member name="M:Nez.BitSet.clear(System.Int32,System.Int32)">
            <summary>
            Sets the bits between from (inclusive) and to (exclusive) to false.
            </summary>
            <param name="from">the start range (inclusive)</param>
            <param name="to">the end range (exclusive)</param>
        </member>
        <member name="M:Nez.BitSet.clone">
            <summary>
            Create a clone of this bit set, that is an instance of the same
            class and contains the same elements.  But it doesn't change when
            this bit set changes.
            </summary>
            <returns>the clone of this object.</returns>
        </member>
        <member name="M:Nez.BitSet.flip(System.Int32)">
            <summary>
            Sets the bit at the index to the opposite value.
            </summary>
            <param name="index">the index of the bit</param>
        </member>
        <member name="M:Nez.BitSet.flip(System.Int32,System.Int32)">
            <summary>
            Sets a range of bits to the opposite value.
            </summary>
            <param name="from">the low index (inclusive)</param>
            <param name="to">the high index (exclusive)</param>
        </member>
        <member name="M:Nez.BitSet.get(System.Int32)">
            <summary>
            Returns true if the integer <code>bitIndex</code> is in this bit
            set, otherwise false.
            </summary>
            <param name="pos">a non-negative integer</param>
            <returns>the value of the bit at the specified position</returns>
        </member>
        <member name="M:Nez.BitSet.get(System.Int32,System.Int32)">
            <summary>
            Returns a new <code>BitSet</code> composed of a range of bits from
            this one.
            </summary>
            <param name="from">the low index (inclusive)</param>
            <param name="to">the high index (exclusive)</param>
            <returns></returns>
        </member>
        <member name="M:Nez.BitSet.intersects(Nez.BitSet)">
            <summary>
            Returns true if the specified BitSet and this one share at least one
            common true bit.
            </summary>
            <param name="set">the set to check for intersection</param>
            <returns>true if the sets intersect</returns>
        </member>
        <member name="M:Nez.BitSet.isEmpty">
            <summary>
            Returns true if this set contains no true bits.
            </summary>
            <returns>true if all bits are false</returns>
        </member>
        <member name="P:Nez.BitSet.length">
            <summary>
            Gets the logical number of bits actually used by this bit
            set.  It returns the index of the highest set bit plus one.
            Note that this method doesn't return the number of set bits.
            
            Returns the index of the highest set bit plus one.
            </summary>
        </member>
        <member name="P:Nez.BitSet.size">
            <summary>
            Returns the number of bits actually used by this bit set. Note that this method doesn't return the number of set bits, and that
            future requests for larger bits will make this automatically grow.
            
            Returns the number of bits currently used.
            </summary>
        </member>
        <member name="M:Nez.BitSet.nextClearBit(System.Int32)">
            <summary>
            Returns the index of the next false bit, from the specified bit
            (inclusive).
            </summary>
            <param name="from">the start location</param>
            <returns>the first false bit</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nez.BitSet.nextSetBit(System.Int32)" -->
        <member name="M:Nez.BitSet.set(System.Int32)">
            <summary>
            Add the integer <code>bitIndex</code> to this set.  That is
            the corresponding bit is set to true.  If the index was already in
            the set, this method does nothing.  The size of this structure
            is automatically increased as necessary.
            </summary>
            <param name="pos">a non-negative integer.</param>
        </member>
        <member name="M:Nez.BitSet.set(System.Int32,System.Boolean)">
            <summary>
            Sets the bit at the given index to the specified value. The size of
            this structure is automatically increased as necessary.
            </summary>
            <param name="index">the position to set</param>
            <param name="value">the value to set it to</param>
        </member>
        <member name="M:Nez.BitSet.set(System.Int32,System.Int32)">
            <summary>
            Sets the bits between from (inclusive) and to (exclusive) to true.
            </summary>
            <param name="from">the start range (inclusive)</param>
            <param name="to">the end range (exclusive)</param>
        </member>
        <member name="M:Nez.BitSet.set(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the bits between from (inclusive) and to (exclusive) to the
            specified value.
            </summary>
            <param name="from">the start range (inclusive)</param>
            <param name="to">the end range (exclusive)</param>
            <param name="value">the value to set it to</param>
        </member>
        <member name="M:Nez.BitSet.xor(Nez.BitSet)">
            <summary>
            Performs the logical XOR operation on this bit set and the
            given <code>set</code>.  This means it builds the symmetric
            remainder of the two sets (the elements that are in one set,
            but not in the other).  The result is stored into this bit set,
            which grows as necessary.
            </summary>
            <param name="bs">the second bit set</param>
        </member>
        <member name="M:Nez.BitSet.or(Nez.BitSet)">
            <summary>
            Performs the logical OR operation on this bit set and the
            given <code>set</code>.  This means it builds the union
            of the two sets.  The result is stored into this bit set, which
            grows as necessary.
            </summary>
            <param name="bs">the second bit set</param>
        </member>
        <member name="M:Nez.BitSet.ensure(System.Int32)">
            <summary>
            Make sure the vector is big enough.
            </summary>
            <param name="lastElt">the size needed for the bits array</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nez.BitSet.GetHashCode" -->
        <member name="M:Nez.BitSet.Equals(System.Object)">
            <summary>
            Returns true if the <code>obj</code> is a bit set that contains
            exactly the same elements as this bit set, otherwise false.
            </summary>
            <param name="obj">the object to compare to</param>
            <returns>true if obj equals this bit set</returns>
        </member>
        <member name="M:Nez.BitSet.ToString">
            <summary>
            Returns the string representation of this bit set.  This
            consists of a comma separated list of the integers in this set
            surrounded by curly braces.  There is a space after each comma.
            A sample string is thus "{1, 3, 53}".
            </summary>
            <returns>the string representation.</returns>
        </member>
        <member name="T:Nez.EntityProcessingSystem">
            <summary>
            Basic entity processing system. Use this as the base for processing many entities with specific components
            </summary>
        </member>
        <member name="M:Nez.EntityProcessingSystem.process(Nez.Entity)">
            <summary>
            Processes a specific entity. It's called for all the entities in the list.
            </summary>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:Nez.EntityProcessingSystem.process(System.Collections.Generic.List{Nez.Entity})">
            <summary>
            Goes through all the entities of this system and processes them one by one
            </summary>
            <param name="entities">Entities.</param>
        </member>
        <member name="T:Nez.ProcessingSystem">
            <summary>
            A basic processing system that doesn't rely on entities.
            It's got no entities associated but it's still being called each frame.
            Use this as a base class for generic systems that need to coordinate other systems
            </summary>
        </member>
        <member name="M:Nez.ProcessingSystem.process">
            <summary>
            Process our system. This is being called each and every frame.
            </summary>
        </member>
        <member name="F:Nez.PhysicsShapes.Shape.position">
            <summary>
            having a separate position field lets us alter the position of the shape for collisions checks as opposed to having to change the
            Entity.position which triggers collider/bounds/hash updates.
            </summary>
        </member>
        <member name="F:Nez.PhysicsShapes.Shape.center">
            <summary>
            center is kind of a misnomer. This value isnt necessarily the center of an object. It is more accurately the Collider.localOffset
            with any Transform rotations applied
            </summary>
        </member>
        <member name="F:Nez.PhysicsShapes.Shape.bounds">
            <summary>
            cached bounds for the Shape
            </summary>
        </member>
        <member name="F:Nez.PhysicsShapes.Polygon.points">
            <summary>
            the points that make up the Polygon. They should be CW and convex.
            </summary>
        </member>
        <member name="P:Nez.PhysicsShapes.Polygon.edgeNormals">
            <summary>
            edge normals are used for SAT collision detection. We cache them to avoid the squareroots. Note that Boxes will only have
            2 edgeNormals since the other two sides are parallel.
            </summary>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.#ctor(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            constructs a Polygon from points. points should be specified in clockwise fashion without duplicating the first/last point and
            they should be centered around 0,0.
            </summary>
            <param name="points">Points.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.#ctor(System.Int32,System.Single)">
            <summary>
            creates a symmetrical polygon based on the radius and vertCount passed in
            </summary>
            <param name="vertCount">Vert count.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.recalculateCenterAndEdgeNormals">
            <summary>
            recalculates the Polygon centers. This must be called if the points are changed!
            </summary>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.buildEdgeNormals">
            <summary>
            builds the Polygon edge normals. These are lazily created and updated only by the edgeNormals getter
            </summary>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.buildSymmetricalPolygon(System.Int32,System.Single)">
            <summary>
            builds a symmetrical polygon (hexagon, octogon, n-gon) and returns the points
            </summary>
            <returns>The symmetrical polygon.</returns>
            <param name="vertCount">Vert count.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.recenterPolygonVerts(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            recenters the points of the polygon
            </summary>
            <param name="points">Points.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.findPolygonCenter(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            finds the center of the Polygon. Note that this will be accurate for regular polygons. Irregular polygons have no center.
            </summary>
            <returns>The polygon center.</returns>
            <param name="points">Points.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.getClosestPointOnPolygonToPoint(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2,System.Single@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            iterates all the edges of the polygon and gets the closest point on any edge to point. Returns via out the squared distance
            to the closest point and the normal of the edge it is on. point should be in the space of the Polygon (point - poly.position)
            </summary>
            <returns>The closest point on polygon to point.</returns>
            <param name="point">Point.</param>
            <param name="distanceSquared">Distance squared.</param>
            <param name="edgeNormal">Edge normal.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.rotatePolygonVerts(System.Single,Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2[])">
            <summary>
            rotates the originalPoints and copys the rotated values to rotatedPoints
            </summary>
            <param name="radians">Radians.</param>
            <param name="originalPoints">Original points.</param>
            <param name="rotatedPoints">Rotated points.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Polygon.containsPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            essentially what the algorithm is doing is shooting a ray from point out. If it intersects an odd number of polygon sides
            we know it is inside the polygon.
            </summary>
            <returns>The point.</returns>
            <param name="point">Point.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Circle.recalculateBounds(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            internal hack used by Particles so they can reuse a Circle for all collision checks
            </summary>
            <param name="radius">Radius.</param>
            <param name="position">Position.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Circle.containsPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets whether or not the provided point lie within the bounds of this <see cref="T:Nez.PhysicsShapes.Circle"/>.
            </summary>
            <param name="point">the point</param>
            <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.PhysicsShapes.Circle"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.PhysicsShapes.Circle.getPointAlongEdge(System.Single)">
            <summary>
            Gets the point at the edge of this <see cref="T:Nez.PhysicsShapes.Circle"/> from the provided angle
            </summary>
            <param name="angle">an angle in radians</param>
            <returns><see cref="T:Microsoft.Xna.Framework.Vector2"/> representing the point on this <see cref="T:Nez.PhysicsShapes.Circle"/>'s surface at the specified angle</returns>
        </member>
        <member name="M:Nez.PhysicsShapes.Circle.containsPoint(System.Single,System.Single)">
            <summary>
            Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Nez.PhysicsShapes.Circle"/>.
            </summary>
            <param name="x">The x coordinate of the point to check for containment.</param>
            <param name="y">The y coordinate of the point to check for containment.</param>
            <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.PhysicsShapes.Circle"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.PhysicsShapes.Circle.containsPoint(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies within the bounds of this <see cref="T:Nez.PhysicsShapes.Circle"/>.
            </summary>
            <param name="point">Point.</param>
        </member>
        <member name="T:Nez.PhysicsShapes.Box">
            <summary>
            special case of a Polygon. When doing SAT collision checks we only need to check 2 axes instead of 8
            </summary>
        </member>
        <member name="M:Nez.PhysicsShapes.Box.buildBox(System.Single,System.Single)">
            <summary>
            helper that builds the points a Polygon needs in the shape of a box
            </summary>
            <returns>The box.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.Box.updateBox(System.Single,System.Single)">
            <summary>
            updates the Box points, recalculates the center and sets the width/height
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.BETA.RealtimeCollisions.corner(Microsoft.Xna.Framework.Rectangle,System.Int32)">
            <summary>
            support function that returns the rectangle vert with index n
            </summary>
            <param name="b">The blue component.</param>
            <param name="n">N.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.BETA.RealtimeCollisions.testCircleBox(Nez.PhysicsShapes.Circle,Nez.PhysicsShapes.Box,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            checks to see if circle overlaps box and returns (via out param) the point of intersection
            </summary>
            <returns><c>true</c>, if circle box was tested, <c>false</c> otherwise.</returns>
            <param name="circle">Circle.</param>
            <param name="box">Box.</param>
            <param name="point">Point.</param>
        </member>
        <member name="T:Nez.PhysicsShapes.ShapeCollisions">
            <summary>
            various collision routines for Shapes. Most of these expect the first Shape to be in the space of the second (i.e. shape1.pos should
            be set to shape1.pos - shape2.pos).
            </summary>
        </member>
        <member name="M:Nez.PhysicsShapes.ShapeCollisions.polygonToPolygon(Nez.PhysicsShapes.Polygon,Nez.PhysicsShapes.Polygon,Nez.CollisionResult@)">
            <summary>
            checks for a collision between two Polygons
            </summary>
            <returns>The collision.</returns>
            <param name="first">Polygon a.</param>
            <param name="second">Polygon b.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.ShapeCollisions.intervalDistance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the distance between [minA, maxA] and [minB, maxB]. The distance will be negative if the intervals overlap
            </summary>
            <returns>The distance.</returns>
            <param name="minA">Minimum a.</param>
            <param name="maxA">Max a.</param>
            <param name="minB">Minimum b.</param>
            <param name="maxB">Max b.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.ShapeCollisions.getInterval(Microsoft.Xna.Framework.Vector2,Nez.PhysicsShapes.Polygon,System.Single@,System.Single@)">
            <summary>
            Calculates the projection of a polygon on an axis and returns it as a [min, max] interval
            </summary>
            <param name="axis">Axis.</param>
            <param name="polygon">Polygon.</param>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.ShapeCollisions.collide(Nez.PhysicsShapes.Shape,Nez.PhysicsShapes.Shape,Microsoft.Xna.Framework.Vector2,Nez.RaycastHit@)">
            <summary>
            swept collision check
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <param name="deltaMovement">Delta movement.</param>
            <param name="hit">Hit.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.ShapeCollisions.boxToBoxCast(Nez.PhysicsShapes.Box,Nez.PhysicsShapes.Box,Microsoft.Xna.Framework.Vector2,Nez.RaycastHit@)">
            <summary>
            checks the result of a box being moved by deltaMovement with second
            </summary>
            <returns><c>true</c>, if to box cast was boxed, <c>false</c> otherwise.</returns>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <param name="deltaMovement">Delta movement.</param>
            <param name="hit">Hit.</param>
        </member>
        <member name="M:Nez.PhysicsShapes.ShapeCollisions.circleToBox(Nez.PhysicsShapes.Circle,Nez.PhysicsShapes.Box,Nez.CollisionResult@)">
            <summary>
            works for circles whos center is in the box as well as just overlapping with the center out of the box.
            </summary>
            <returns><c>true</c>, if to box was circled, <c>false</c> otherwise.</returns>
            <param name="circle">First.</param>
            <param name="box">Second.</param>
            <param name="result">Result.</param>
        </member>
        <member name="M:Nez.Assert.isNull(System.Object)">
            <summary>
            asserts that obj is null
            </summary>
            <param name="obj">Object.</param>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Nez.Assert.isNull(System.Object,System.String,System.Object[])">
            <summary>
            asserts that obj is null
            </summary>
            <param name="obj">Object.</param>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Nez.Assert.isNotNull(System.Object)">
            <summary>
            asserts that obj is not null
            </summary>
            <param name="obj">Object.</param>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Nez.Assert.isNotNull(System.Object,System.String,System.Object[])">
            <summary>
            asserts that obj is not null
            </summary>
            <param name="obj">Object.</param>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Nez.Assert.areEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            asserts that first is equal to second
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Nez.Assert.areNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            asserts that first is not equal to second
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <param name="message">Message.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="T:Nez.Triangulator">
            <summary>
            simple ear clipping triangulator. the final triangles will be present in the triangleIndices list
            </summary>
        </member>
        <member name="F:Nez.Triangulator.triangleIndices">
            <summary>
            The indexes of triangle list entries for the list of points used in the last triangulate call.
            </summary>
        </member>
        <member name="M:Nez.Triangulator.triangulate(Microsoft.Xna.Framework.Vector2[],System.Boolean)">
            <summary>
            Computes a triangle list that fully covers the area enclosed by the given set of points. If points are not CCW, pass false for
            the arePointsCCW parameter
            </summary>
            <param name="points">A list of points that defines an enclosing path.</param>
            <param name="count">The number of points in the path.</param>
        </member>
        <member name="T:Nez.IFinalRenderDelegate">
            <summary>
            optional interface that can be added to any object for special cases where the final render to screen needs to be overridden. Note that
            the Scene.screenshotRequestCallback will not function if an IFinalRenderDelegate is present.
            </summary>
        </member>
        <member name="T:Nez.PixelMosaicRenderDelegate">
            <summary>
            overlays a mosaic on top of the final render. Useful only for pixel perfect pixel art.
            </summary>
        </member>
        <member name="P:Nez.BloomPostProcessor.settings">
            <summary>
            the settings used by the bloom and blur shaders. If changed, you must call setBloomSettings for the changes to take effect.
            </summary>
        </member>
        <member name="P:Nez.BloomPostProcessor.renderTargetScale">
            <summary>
            scale of the internal RenderTargets. For high resolution renders a half sized RT is usually more than enough. Defaults to 1.
            </summary>
        </member>
        <member name="M:Nez.BloomPostProcessor.setBloomSettings(Nez.BloomSettings)">
            <summary>
            sets the settings used by the bloom and blur shaders
            </summary>
            <param name="settings">Settings.</param>
        </member>
        <member name="M:Nez.BloomPostProcessor.updateBlurEffectDeltas">
            <summary>
            updates the Effect with the new vertical and horizontal deltas
            </summary>
        </member>
        <member name="T:Nez.BloomSettings">
            <summary>
            Class holds all the settings used to tweak the bloom effect.
            </summary>
        </member>
        <member name="M:Nez.BloomSettings.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new bloom settings descriptor.
            </summary>
        </member>
        <member name="F:Nez.BloomSettings.presetSettings">
            <summary>
            Table of preset bloom settings. Note that BaseSat needs to be near 0 if the final render needs transparency!
            </summary>
        </member>
        <member name="T:Nez.PixelBloomPostProcessor">
            <summary>
            this PostProcessor expects that the layerRenderTarget is the top-most layer and that it contains 
            </summary>
        </member>
        <member name="P:Nez.CrosshatchEffect.crosshatchSize">
            <summary>
            size in pixels of the crosshatch. Should be an even number because the half size is also required. Defaults to 16.
            </summary>
            <value>The size of the cross hatch.</value>
        </member>
        <member name="M:Nez.EffectResource.getEmbeddedResourceBytes(System.String)">
            <summary>
            gets the raw byte[] from an EmbeddedResource
            </summary>
            <returns>The embedded resource bytes.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Nez.EffectResource.getFileResourceBytes(System.String)">
            <summary>
            fetches the raw byte data of a file from the Content folder. Used to keep the Effect subclass code simple and clean due to the Effect
            constructor requiring the byte[].
            </summary>
            <returns>The file resource bytes.</returns>
            <param name="path">Path.</param>
        </member>
        <member name="P:Nez.NoiseEffect.noise">
            <summary>
            Intensity of the noise. Defaults to 1.
            </summary>
        </member>
        <member name="P:Nez.SpriteBlinkEffect.blinkColor">
            <summary>
            color to blink the sprite. When the blinkColor has an alpha of 1 only the blink color will be shown. An alpha of 0 will result in
            just the sprite being displayed. Any value in between 0 and 1 will interpolate between the two colors.
            </summary>
            <value>The color of the blink.</value>
        </member>
        <member name="T:Nez.TiledSprite">
            <summary>
            Tiled sprite. Note that TiledSprite overrides the Material so that it can wrap the UVs. This class requires the texture
            to not be part of an atlas so that wrapping can work.
            </summary>
        </member>
        <member name="P:Nez.TiledSprite.scrollX">
            <summary>
            x value of the texture scroll
            </summary>
            <value>The scroll x.</value>
        </member>
        <member name="P:Nez.TiledSprite.scrollY">
            <summary>
            y value of the texture scroll
            </summary>
            <value>The scroll y.</value>
        </member>
        <member name="P:Nez.TiledSprite.textureScale">
            <summary>
            scale of the texture
            </summary>
            <value>The texture scale.</value>
        </member>
        <member name="P:Nez.TiledSprite.width">
            <summary>
            overridden width value so that the TiledSprite can have an independent width than its texture
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Nez.TiledSprite.height">
            <summary>
            overridden height value so that the TiledSprite can have an independent height than its texture
            </summary>
            <value>The height.</value>
        </member>
        <member name="F:Nez.TiledSprite._sourceRect">
            <summary>
            we keep a copy of the sourceRect so that we dont change the Subtexture in case it is used elsewhere
            </summary>
        </member>
        <member name="T:Nez.PostProcessor`1">
            <summary>
            helper subclass for strongly typed Effects loaded from EffectResource. The effect will automatically be unloaded when the scene
            completes.
            </summary>
        </member>
        <member name="F:Nez.PostProcessor`1.effect">
            <summary>
            The effect used to render the scene with
            </summary>
        </member>
        <member name="M:Nez.PostProcessor`1.process(Microsoft.Xna.Framework.Graphics.RenderTarget2D,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            we have to override the default implementation here because we use a custom Effect subclass and the effect field of the base class
            will be null.
            </summary>
            <param name="source">Source.</param>
            <param name="destination">Destination.</param>
        </member>
        <member name="F:Nez.Transform.entity">
            <summary>
            the Entity associated with this transform
            </summary>
        </member>
        <member name="P:Nez.Transform.parent">
            <summary>
            the parent Transform of this Transform
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Nez.Transform.childCount">
            <summary>
            total children of this Transform
            </summary>
            <value>The child count.</value>
        </member>
        <member name="P:Nez.Transform.position">
            <summary>
            position of the transform in world space
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Nez.Transform.localPosition">
            <summary>
            position of the transform relative to the parent transform. If the transform has no parent, it is the same as Transform.position
            </summary>
            <value>The local position.</value>
        </member>
        <member name="P:Nez.Transform.rotation">
            <summary>
            rotation of the transform in world space in radians
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:Nez.Transform.rotationDegrees">
            <summary>
            rotation of the transform in world space in degrees
            </summary>
            <value>The rotation degrees.</value>
        </member>
        <member name="P:Nez.Transform.localRotation">
            <summary>
            the rotation of the transform relative to the parent transform's rotation. If the transform has no parent, it is the same as Transform.rotation
            </summary>
            <value>The local rotation.</value>
        </member>
        <member name="P:Nez.Transform.localRotationDegrees">
            <summary>
            rotation of the transform relative to the parent transform's rotation in degrees
            </summary>
            <value>The rotation degrees.</value>
        </member>
        <member name="P:Nez.Transform.scale">
            <summary>
            global scale of the transform
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Nez.Transform.localScale">
            <summary>
            the scale of the transform relative to the parent. If the transform has no parent, it is the same as Transform.scale
            </summary>
            <value>The local scale.</value>
        </member>
        <member name="M:Nez.Transform.getChild(System.Int32)">
            <summary>
            returns the Transform child at index
            </summary>
            <returns>The child.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Nez.Transform.setParent(Nez.Transform)">
            <summary>
            sets the parent Transform of this Transform
            </summary>
            <returns>The parent.</returns>
            <param name="parent">Parent.</param>
        </member>
        <member name="M:Nez.Transform.setPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            sets the position of the transform in world space
            </summary>
            <returns>The position.</returns>
            <param name="position">Position.</param>
        </member>
        <member name="M:Nez.Transform.setLocalPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            sets the position of the transform relative to the parent transform. If the transform has no parent, it is the same
            as Transform.position
            </summary>
            <returns>The local position.</returns>
            <param name="localPosition">Local position.</param>
        </member>
        <member name="M:Nez.Transform.setRotation(System.Single)">
            <summary>
            sets the rotation of the transform in world space in radians
            </summary>
            <returns>The rotation.</returns>
            <param name="radians">Radians.</param>
        </member>
        <member name="M:Nez.Transform.setRotationDegrees(System.Single)">
            <summary>
            sets the rotation of the transform in world space in degrees
            </summary>
            <returns>The rotation.</returns>
            <param name="radians">Radians.</param>
        </member>
        <member name="M:Nez.Transform.setLocalRotation(System.Single)">
            <summary>
            sets the the rotation of the transform relative to the parent transform's rotation. If the transform has no parent, it is the
            same as Transform.rotation
            </summary>
            <returns>The local rotation.</returns>
            <param name="radians">Radians.</param>
        </member>
        <member name="M:Nez.Transform.setLocalRotationDegrees(System.Single)">
            <summary>
            sets the the rotation of the transform relative to the parent transform's rotation. If the transform has no parent, it is the
            same as Transform.rotation
            </summary>
            <returns>The local rotation.</returns>
            <param name="radians">Radians.</param>
        </member>
        <member name="M:Nez.Transform.setScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            sets the global scale of the transform
            </summary>
            <returns>The scale.</returns>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:Nez.Transform.setScale(System.Single)">
            <summary>
            sets the global scale of the transform
            </summary>
            <returns>The scale.</returns>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:Nez.Transform.setLocalScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            sets the scale of the transform relative to the parent. If the transform has no parent, it is the same as Transform.scale
            </summary>
            <returns>The local scale.</returns>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:Nez.Transform.setLocalScale(System.Single)">
            <summary>
            sets the scale of the transform relative to the parent. If the transform has no parent, it is the same as Transform.scale
            </summary>
            <returns>The local scale.</returns>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:Nez.Transform.roundPosition">
            <summary>
            rounds the position of the Transform
            </summary>
        </member>
        <member name="M:Nez.Transform.setDirty(Nez.Transform.DirtyType)">
            <summary>
            sets the dirty flag on the enum and passes it down to our children
            </summary>
            <param name="dirtyFlagType">Dirty flag type.</param>
        </member>
        <member name="F:Nez.CollisionResult.collider">
            <summary>
            the collider that was collided with
            </summary>
        </member>
        <member name="F:Nez.CollisionResult.normal">
            <summary>
            The normal vector of the surface hit by the shape
            </summary>
        </member>
        <member name="F:Nez.CollisionResult.minimumTranslationVector">
            <summary>
            The translation to apply to the first shape to push the shapes appart
            </summary>
        </member>
        <member name="F:Nez.CollisionResult.point">
            <summary>
            not used for all collisions types! Check the ShapeCollisions class before relying on this field!
            </summary>
        </member>
        <member name="M:Nez.CollisionResult.removeHorizontalTranslation(Microsoft.Xna.Framework.Vector2)">
            <summary>
            alters the minimumTranslationVector so that it removes the x-component of the translation if there was no movement in
            the same direction.
            </summary>
            <param name="deltaMovement">the original movement that caused the collision</param>
        </member>
        <member name="M:Nez.CollisionResult.invertResult">
            <summary>
            inverts the normal and MTV
            </summary>
        </member>
        <member name="T:Nez.Utils">
            <summary>
            utility methods that don't yet have a proper home that makes sense
            </summary>
        </member>
        <member name="M:Nez.Utils.swap``1(``0@,``0@)">
            <summary>
            swaps the two object types
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Nez.TrailRibbon">
            <summary>
            Renders a trail behind a moving object
            Adapted from http://www.paradeofrain.com/2010/01/28/update-on-continuous-2d-trails-in-xna/
            </summary>
        </member>
        <member name="F:Nez.TrailRibbon.startColor">
            <summary>
            starting color of the ribbon
            </summary>
        </member>
        <member name="F:Nez.TrailRibbon.endColor">
            <summary>
            end (tail) color of the ribbon
            </summary>
        </member>
        <member name="F:Nez.TrailRibbon.ribbonRadius">
            <summary>
            max pixel radius of the ribbon
            </summary>
        </member>
        <member name="M:Nez.TrailRibbon.initializeVertices">
            <summary>
            builds the intialial ribbon segments
            </summary>
        </member>
        <member name="M:Nez.TrailRibbon.calculateVertices">
            <summary>
            transfers the data from our segments to the vertices for display
            </summary>
        </member>
        <member name="T:Nez.GooCursor">
            <summary>
            cursor with trails. Note that this should be rendered in screen space (ScreenSpaceRenderer) so it isnt transformed by the camera matrix
            Adapted from: http://www.catalinzima.com/xna/samples/world-of-goo-cursor/
            </summary>
        </member>
        <member name="F:Nez.GooCursor.trailStiffness">
            <summary>
            Gets of Sets the stiffness of the trail A lower number means the trail will be longer
            </summary>
        </member>
        <member name="F:Nez.GooCursor.trailDamping">
            <summary>
            Controls the damping of the velocity of trail nodes
            </summary>
        </member>
        <member name="F:Nez.GooCursor.trailNodeMass">
            <summary>
            Mass of a trails node
            </summary>
        </member>
        <member name="F:Nez.GooCursor.startScale">
            <summary>
            The scaling applied at the tip of the cursor
            </summary>
        </member>
        <member name="F:Nez.GooCursor.endScale">
            <summary>
            The scaling applied at the end of the cursor
            </summary>
        </member>
        <member name="F:Nez.GooCursor.lerpExponent">
            <summary>
            use this to control the rate of change between the StartScale and the EndScale
            </summary>
        </member>
        <member name="F:Nez.GooCursor.fillColor">
            <summary>
            Color used to fill the cursor
            </summary>
        </member>
        <member name="F:Nez.GooCursor.borderColor">
            <summary>
            color used for the cursor border
            </summary>
        </member>
        <member name="F:Nez.GooCursor.borderSize">
            <summary>
            Size of the border (in pixels)
            </summary>
        </member>
        <member name="T:Nez.SpriteOutlineRenderer">
            <summary>
            renders a sprite with an outline in a very inefficient (but simple) way. The sprite is rendered multiple times offset/colored then it
            is rendered normally on top of that.
            </summary>
        </member>
        <member name="F:Nez.SpriteOutlineRenderer.outlineWidth">
            <summary>
            the width of the outline
            </summary>
        </member>
        <member name="F:Nez.SpriteOutlineRenderer.outlineColor">
            <summary>
            the color the sprite will be tinted when it is rendered
            </summary>
        </member>
        <member name="M:Nez.SpriteOutlineRenderer.#ctor(Nez.Sprites.Sprite)">
            <summary>
            the Sprite passed in will be disabled. The SpriteOutlineRenderer will handle manually calling its render method.
            </summary>
            <param name="sprite">Sprite.</param>
        </member>
        <member name="T:Nez.ArcadeRigidbody">
            <summary>
            Note that this is not a full, multi-iteration physics system! This can be used for simple, arcade style physics.
            Based on http://elancev.name/oliver/2D%20polygon.htm#tut5
            </summary>
        </member>
        <member name="P:Nez.ArcadeRigidbody.mass">
            <summary>
            mass of this rigidbody. A 0 mass will make this an immovable object.
            </summary>
            <value>The mass.</value>
        </member>
        <member name="P:Nez.ArcadeRigidbody.elasticity">
            <summary>
            0 - 1 range where 0 is no bounce and 1 is perfect reflection
            </summary>
        </member>
        <member name="P:Nez.ArcadeRigidbody.friction">
            <summary>
            0 - 1 range. 0 means no friction, 1 means the object will stop dead on
            </summary>
        </member>
        <member name="P:Nez.ArcadeRigidbody.glue">
            <summary>
            0 - 9 range. When a collision occurs and it has risidual motion along the surface of collision if its square magnitude is less
            than glue friction will be set to the maximum for the collision resolution.
            </summary>
        </member>
        <member name="F:Nez.ArcadeRigidbody.shouldUseGravity">
            <summary>
            if true, Physics.gravity will be taken into account each frame
            </summary>
        </member>
        <member name="F:Nez.ArcadeRigidbody.velocity">
            <summary>
            velocity of this rigidbody
            </summary>
        </member>
        <member name="P:Nez.ArcadeRigidbody.isImmovable">
            <summary>
            rigidbodies with a mass of 0 are considered immovable. Changing velocity and collisions will have no effect on them.
            </summary>
            <value><c>true</c> if is immovable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Nez.ArcadeRigidbody.setMass(System.Single)">
            <summary>
            mass of this rigidbody. A 0 mass will make this an immovable object.
            </summary>
            <returns>The mass.</returns>
            <param name="mass">Mass.</param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.setElasticity(System.Single)">
            <summary>
            0 - 1 range where 0 is no bounce and 1 is perfect reflection
            </summary>
            <returns>The elasticity.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.setFriction(System.Single)">
            <summary>
            0 - 1 range. 0 means no friction, 1 means the object will stop dead on
            </summary>
            <returns>The friction.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.setGlue(System.Single)">
            <summary>
            0 - 9 range. When a collision occurs and it has risidual motion along the surface of collision if its square magnitude is less
            than glue friction will be set to the maximum for the collision resolution.
            </summary>
            <returns>The glue.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.setVelocity(Microsoft.Xna.Framework.Vector2)">
            <summary>
            velocity of this rigidbody
            </summary>
            <returns>The velocity.</returns>
            <param name="velocity">Velocity.</param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.addImpulse(Microsoft.Xna.Framework.Vector2)">
            <summary>
            add an instant force impulse to the rigidbody using its mass. force is an acceleration in pixels per second per second. The
            force is multiplied by 100000 to make the values more reasonable to use.
            </summary>
            <param name="force">Force.</param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.processOverlap(Nez.ArcadeRigidbody,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            separates two overlapping rigidbodies. Handles the case of either being immovable as well.
            </summary>
            <param name="other">Other.</param>
            <param name="minimumTranslationVector"></param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.processCollision(Nez.ArcadeRigidbody,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            handles the collision of two non-overlapping rigidbodies. New velocities will be assigned to each rigidbody as appropriate.
            </summary>
            <param name="other">Other.</param>
            <param name="inverseMTV">Inverse MT.</param>
        </member>
        <member name="M:Nez.ArcadeRigidbody.calculateResponseVelocity(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            given the relative velocity between the two objects and the MTV this method modifies the relativeVelocity to make it a collision
            response.
            </summary>
            <param name="relativeVelocity">Relative velocity.</param>
            <param name="minimumTranslationVector">Minimum translation vector.</param>
        </member>
        <member name="T:Nez.Mover">
            <summary>
            helper class illustrating one way to handle movement taking into account all Collisions including triggers. The ITriggerListener
            interface is used to manage callbacks to any triggers that are breached while moving. An object must move only via the Mover.move
            method for triggers to be properly reported. Note that multiple Movers interacting with each other will end up calling ITriggerListener
            multiple times.
            </summary>
        </member>
        <member name="M:Nez.Mover.move(Microsoft.Xna.Framework.Vector2,Nez.CollisionResult@)">
            <summary>
            moves the entity taking collisions into account
            </summary>
            <returns><c>true</c>, if move actor was newed, <c>false</c> otherwise.</returns>
            <param name="motion">Motion.</param>
            <param name="collisionResult">Collision result.</param>
        </member>
        <member name="T:Nez.IUpdatable">
            <summary>
            interface that when added to a Component lets Nez know that it wants the update method called each frame as long as the Component
            and Entity are enabled.
            </summary>
        </member>
        <member name="T:Nez.IUpdatableComparer">
            <summary>
            Comparer for sorting IUpdatables
            </summary>
        </member>
        <member name="T:Nez.Pair`1">
            <summary>
            simple DTO for managing a pair of objects
            </summary>
        </member>
        <member name="T:Nez.RectangleF">
            <summary>
            Describes a 2D-rectangle. 
            </summary>
        </member>
        <member name="F:Nez.RectangleF.x">
            <summary>
            The x coordinate of the top-left corner of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="F:Nez.RectangleF.y">
            <summary>
            The y coordinate of the top-left corner of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="F:Nez.RectangleF.width">
            <summary>
            The width of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="F:Nez.RectangleF.height">
            <summary>
            The height of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.empty">
            <summary>
            Returns a <see cref="T:Nez.RectangleF"/> with X=0, Y=0, Width=0, Height=0.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.maxRect">
            <summary>
            returns a RectangleF of float.Min/Max values
            </summary>
            <value>The max rect.</value>
        </member>
        <member name="P:Nez.RectangleF.left">
            <summary>
            Returns the x coordinate of the left edge of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.right">
            <summary>
            Returns the x coordinate of the right edge of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.top">
            <summary>
            Returns the y coordinate of the top edge of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.bottom">
            <summary>
            Returns the y coordinate of the bottom edge of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.max">
            <summary>
            gets the max point of the rectangle, the bottom-right corner
            </summary>
            <value>The max.</value>
        </member>
        <member name="P:Nez.RectangleF.isEmpty">
            <summary>
            Whether or not this <see cref="T:Nez.RectangleF"/> has a <see cref="!:Width"/> and
            <see cref="!:Height"/> of 0, and a <see cref="!:Location"/> of (0, 0).
            </summary>
        </member>
        <member name="P:Nez.RectangleF.location">
            <summary>
            The top-left coordinates of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.size">
            <summary>
            The width-height coordinates of this <see cref="T:Nez.RectangleF"/>.
            </summary>
        </member>
        <member name="P:Nez.RectangleF.center">
            <summary>
            A <see cref="T:Microsoft.Xna.Framework.Point"/> located in the center of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <remarks>
            If <see cref="!:Width"/> or <see cref="!:Height"/> is an odd number,
            the center point will be rounded down.
            </remarks>
        </member>
        <member name="M:Nez.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of <see cref="T:Nez.RectangleF"/> struct, with the specified
            position, width, and height.
            </summary>
            <param name="x">The x coordinate of the top-left corner of the created <see cref="T:Nez.RectangleF"/>.</param>
            <param name="y">The y coordinate of the top-left corner of the created <see cref="T:Nez.RectangleF"/>.</param>
            <param name="width">The width of the created <see cref="T:Nez.RectangleF"/>.</param>
            <param name="height">The height of the created <see cref="T:Nez.RectangleF"/>.</param>
        </member>
        <member name="M:Nez.RectangleF.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new instance of <see cref="T:Nez.RectangleF"/> struct, with the specified
            location and size.
            </summary>
            <param name="location">The x and y coordinates of the top-left corner of the created <see cref="T:Nez.RectangleF"/>.</param>
            <param name="size">The width and height of the created <see cref="T:Nez.RectangleF"/>.</param>
        </member>
        <member name="M:Nez.RectangleF.fromMinMax(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            creates a RectangleF given min/max points (top-left, bottom-right points)
            </summary>
            <returns>The minimum max points.</returns>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.RectangleF.fromMinMax(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            creates a RectangleF given min/max points (top-left, bottom-right points)
            </summary>
            <returns>The minimum max points.</returns>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.RectangleF.rectEncompassingPoints(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            given the points of a polygon calculates the bounds
            </summary>
            <returns>The from polygon points.</returns>
            <param name="points">Points.</param>
        </member>
        <member name="M:Nez.RectangleF.getSide(Nez.Edge)">
            <summary>
            gets the position of the specified edge
            </summary>
            <returns>The side.</returns>
            <param name="edge">Side.</param>
        </member>
        <member name="M:Nez.RectangleF.contains(System.Int32,System.Int32)">
            <summary>
            Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="x">The x coordinate of the point to check for containment.</param>
            <param name="y">The y coordinate of the point to check for containment.</param>
            <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.contains(System.Single,System.Single)">
            <summary>
            Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="x">The x coordinate of the point to check for containment.</param>
            <param name="y">The y coordinate of the point to check for containment.</param>
            <returns><c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.contains(Microsoft.Xna.Framework.Point)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF"/>.</param>
            <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.contains(Microsoft.Xna.Framework.Point@,System.Boolean@)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF"/>.</param>
            <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point"/> lies inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Nez.RectangleF.contains(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF"/>.</param>
            <returns><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.contains(Microsoft.Xna.Framework.Vector2@,System.Boolean@)">
            <summary>
            Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF"/>.</param>
            <param name="result"><c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2"/> lies inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Nez.RectangleF.contains(Nez.RectangleF)">
            <summary>
            Gets whether or not the provided <see cref="T:Nez.RectangleF"/> lies within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="value">The <see cref="T:Nez.RectangleF"/> to check for inclusion in this <see cref="T:Nez.RectangleF"/>.</param>
            <returns><c>true</c> if the provided <see cref="T:Nez.RectangleF"/>'s bounds lie entirely inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.contains(Nez.RectangleF@,System.Boolean@)">
            <summary>
            Gets whether or not the provided <see cref="T:Nez.RectangleF"/> lies within the bounds of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="value">The <see cref="T:Nez.RectangleF"/> to check for inclusion in this <see cref="T:Nez.RectangleF"/>.</param>
            <param name="result"><c>true</c> if the provided <see cref="T:Nez.RectangleF"/>'s bounds lie entirely inside this <see cref="T:Nez.RectangleF"/>; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Nez.RectangleF.inflate(System.Int32,System.Int32)">
            <summary>
            Adjusts the edges of this <see cref="T:Nez.RectangleF"/> by specified horizontal and vertical amounts. 
            </summary>
            <param name="horizontalAmount">Value to adjust the left and right edges.</param>
            <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
        </member>
        <member name="M:Nez.RectangleF.inflate(System.Single,System.Single)">
            <summary>
            Adjusts the edges of this <see cref="T:Nez.RectangleF"/> by specified horizontal and vertical amounts. 
            </summary>
            <param name="horizontalAmount">Value to adjust the left and right edges.</param>
            <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
        </member>
        <member name="M:Nez.RectangleF.intersects(Nez.RectangleF)">
            <summary>
            Gets whether or not the other <see cref="T:Nez.RectangleF"/> intersects with this rectangle.
            </summary>
            <param name="value">The other rectangle for testing.</param>
            <returns><c>true</c> if other <see cref="T:Nez.RectangleF"/> intersects with this rectangle; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.intersects(Nez.RectangleF@,System.Boolean@)">
            <summary>
            Gets whether or not the other <see cref="T:Nez.RectangleF"/> intersects with this rectangle.
            </summary>
            <param name="value">The other rectangle for testing.</param>
            <param name="result"><c>true</c> if other <see cref="T:Nez.RectangleF"/> intersects with this rectangle; <c>false</c> otherwise. As an output parameter.</param>
        </member>
        <member name="M:Nez.RectangleF.intersects(Nez.RectangleF@)">
            <summary>
            returns true if other intersects rect
            </summary>
            <param name="other">other.</param>
        </member>
        <member name="M:Nez.RectangleF.getClosestPointOnRectangleFToPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            returns the closest point that is in or on the RectangleF to the given point
            </summary>
            <returns>The closest point on rectangle to point.</returns>
            <param name="point">Point.</param>
        </member>
        <member name="M:Nez.RectangleF.getClosestPointOnRectangleBorderToPoint(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            gets the closest point that is on the rectangle border to the given point
            </summary>
            <returns>The closest point on rectangle border to point.</returns>
            <param name="point">Point.</param>
        </member>
        <member name="M:Nez.RectangleF.intersect(Nez.RectangleF,Nez.RectangleF)">
            <summary>
            Creates a new <see cref="T:Nez.RectangleF"/> that contains overlapping region of two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Nez.RectangleF"/>.</param>
            <param name="value2">The second <see cref="T:Nez.RectangleF"/>.</param>
            <returns>Overlapping region of the two rectangles.</returns>
        </member>
        <member name="M:Nez.RectangleF.intersect(Nez.RectangleF@,Nez.RectangleF@,Nez.RectangleF@)">
            <summary>
            Creates a new <see cref="T:Nez.RectangleF"/> that contains overlapping region of two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Nez.RectangleF"/>.</param>
            <param name="value2">The second <see cref="T:Nez.RectangleF"/>.</param>
            <param name="result">Overlapping region of the two rectangles as an output parameter.</param>
        </member>
        <member name="M:Nez.RectangleF.offset(System.Int32,System.Int32)">
            <summary>
            Changes the <see cref="!:Location"/> of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="offsetX">The x coordinate to add to this <see cref="T:Nez.RectangleF"/>.</param>
            <param name="offsetY">The y coordinate to add to this <see cref="T:Nez.RectangleF"/>.</param>
        </member>
        <member name="M:Nez.RectangleF.offset(System.Single,System.Single)">
            <summary>
            Changes the <see cref="!:Location"/> of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="offsetX">The x coordinate to add to this <see cref="T:Nez.RectangleF"/>.</param>
            <param name="offsetY">The y coordinate to add to this <see cref="T:Nez.RectangleF"/>.</param>
        </member>
        <member name="M:Nez.RectangleF.offset(Microsoft.Xna.Framework.Point)">
            <summary>
            Changes the <see cref="!:Location"/> of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="amount">The x and y components to add to this <see cref="T:Nez.RectangleF"/>.</param>
        </member>
        <member name="M:Nez.RectangleF.offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Changes the <see cref="!:Location"/> of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="amount">The x and y components to add to this <see cref="T:Nez.RectangleF"/>.</param>
        </member>
        <member name="M:Nez.RectangleF.union(Nez.RectangleF,Nez.RectangleF)">
            <summary>
            Creates a new <see cref="T:Nez.RectangleF"/> that completely contains two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Nez.RectangleF"/>.</param>
            <param name="value2">The second <see cref="T:Nez.RectangleF"/>.</param>
            <returns>The union of the two rectangles.</returns>
        </member>
        <member name="M:Nez.RectangleF.union(Nez.RectangleF@,Nez.RectangleF@,Nez.RectangleF@)">
            <summary>
            Creates a new <see cref="T:Nez.RectangleF"/> that completely contains two other rectangles.
            </summary>
            <param name="value1">The first <see cref="T:Nez.RectangleF"/>.</param>
            <param name="value2">The second <see cref="T:Nez.RectangleF"/>.</param>
            <param name="result">The union of the two rectangles as an output parameter.</param>
        </member>
        <member name="M:Nez.RectangleF.overlap(Nez.RectangleF,Nez.RectangleF)">
            <summary>
            Creates a new <see cref="T:Nez.RectangleF"/> where the rectangles overlap.
            </summary>
            <param name="value1">The first <see cref="T:Nez.RectangleF"/>.</param>
            <param name="value2">The second <see cref="T:Nez.RectangleF"/>.</param>
            <returns>The overlap of the two rectangles.</returns>
        </member>
        <member name="M:Nez.RectangleF.overlap(Nez.RectangleF@,Nez.RectangleF@,Nez.RectangleF@)">
            <summary>
            Creates a new <see cref="T:Nez.RectangleF"/> where the rectangles overlap.
            </summary>
            <param name="value1">The first <see cref="T:Nez.RectangleF"/>.</param>
            <param name="value2">The second <see cref="T:Nez.RectangleF"/>.</param>
            <param name="result">The overlap of the two rectangles as an output parameter.</param>
        </member>
        <member name="M:Nez.RectangleF.getSweptBroadphaseBounds(System.Single,System.Single)">
            <summary>
            returns a RectangleF that spans the current rect and the provided delta positions
            </summary>
            <returns>The swept broadphase box.</returns>
            <param name="velocityX">Velocity x.</param>
            <param name="velocityY">Velocity y.</param>
        </member>
        <member name="M:Nez.RectangleF.collisionCheck(Nez.RectangleF@,System.Single@,System.Single@)">
            <summary>
            returns true if the boxes are colliding
            moveX and moveY will return the movement that b1 must move to avoid the collision
            </summary>
            <param name="other">Other.</param>
            <param name="moveX">Move x.</param>
            <param name="moveY">Move y.</param>
        </member>
        <member name="M:Nez.RectangleF.getIntersectionDepth(Nez.RectangleF@,Nez.RectangleF@)">
            <summary>
            Calculates the signed depth of intersection between two rectangles.
            </summary>
            <returns>
            The amount of overlap between two intersecting rectangles. These depth values can be negative depending on which sides the rectangles
            intersect. This allows callers to determine the correct direction to push objects in order to resolve collisions.
            If the rectangles are not intersecting, Vector2.Zero is returned.
            </returns>
        </member>
        <member name="M:Nez.RectangleF.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.Equals(Nez.RectangleF)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Nez.RectangleF"/>.
            </summary>
            <param name="other">The <see cref="T:Nez.RectangleF"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Nez.RectangleF"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Nez.RectangleF"/>.</returns>
        </member>
        <member name="M:Nez.RectangleF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Nez.RectangleF"/> in the format:
            {X:[<see cref="!:X"/>] Y:[<see cref="!:Y"/>] Width:[<see cref="!:Width"/>] Height:[<see cref="!:Height"/>]}
            </summary>
            <returns><see cref="T:System.String"/> representation of this <see cref="T:Nez.RectangleF"/>.</returns>
        </member>
        <member name="M:Nez.RectangleF.op_Equality(Nez.RectangleF,Nez.RectangleF)">
            <summary>
            Compares whether two <see cref="T:Nez.RectangleF"/> instances are equal.
            </summary>
            <param name="a"><see cref="T:Nez.RectangleF"/> instance on the left of the equal sign.</param>
            <param name="b"><see cref="T:Nez.RectangleF"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.RectangleF.op_Inequality(Nez.RectangleF,Nez.RectangleF)">
            <summary>
            Compares whether two <see cref="T:Nez.RectangleF"/> instances are not equal.
            </summary>
            <param name="a"><see cref="T:Nez.RectangleF"/> instance on the left of the not equal sign.</param>
            <param name="b"><see cref="T:Nez.RectangleF"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Nez.NineSliceSprite._finalRenderRect">
            <summary>
            full area in which we will be rendering
            </summary>
        </member>
        <member name="T:Nez.FadeTransition">
            <summary>
            fades to fadeToColor then fades to the new Scene
            </summary>
        </member>
        <member name="F:Nez.FadeTransition.fadeToColor">
            <summary>
            the color we will fade to/from
            </summary>
        </member>
        <member name="F:Nez.FadeTransition.fadeOutDuration">
            <summary>
            duration to fade to fadeToColor
            </summary>
        </member>
        <member name="F:Nez.FadeTransition.delayBeforeFadeInDuration">
            <summary>
            delay to start fading out
            </summary>
        </member>
        <member name="F:Nez.FadeTransition.fadeInDuration">
            <summary>
            duration to fade from fadeToColor to the new Scene
            </summary>
        </member>
        <member name="F:Nez.FadeTransition.fadeEaseType">
            <summary>
            ease equation to use for the fade
            </summary>
        </member>
        <member name="F:Nez.TransformTransition.duration">
            <summary>
            duration for the animation
            </summary>
        </member>
        <member name="F:Nez.TransformTransition.transitionEaseType">
            <summary>
            ease equation for the transition
            </summary>
        </member>
        <member name="T:Nez.SceneTransition">
            <summary>
            SceneTransition is used to transition from one Scene to another or within a scene with an effect. If sceneLoadAction is null Nez
            will perform an in-Scene transition as opposed to loading a new Scene mid transition.
            
            The general gist of a transition is the following:
            - onBeginTransition will be called allowing you to yield for multipart transitions
            - for two part transitions with Effects you can yield on a call to tickEffectProgressProperty for part one to obscure the screen
            - next, yield a call to loadNextScene to load up the new Scene
            - finally, yield again on tickEffectProgressProperty to un-obscure the screen and show the new Scene
            </summary>
        </member>
        <member name="F:Nez.SceneTransition.previousSceneRender">
            <summary>
            contains the last render of the previous Scene. Can be used to obscure the screen while loading a new Scene.
            </summary>
        </member>
        <member name="F:Nez.SceneTransition.wantsPreviousSceneRender">
            <summary>
            if true, Nez will render the previous scene into previousSceneRender so that you can use it with your transition 
            </summary>
        </member>
        <member name="F:Nez.SceneTransition.loadSceneOnBackgroundThread">
            <summary>
            if true, the next Scene will be loaded on a background thread. Note that if raw PNG files are used they cannot be loaded
            on a background thread.
            </summary>
        </member>
        <member name="F:Nez.SceneTransition.sceneLoadAction">
            <summary>
            function that should return the newly loaded scene
            </summary>
        </member>
        <member name="P:Nez.SceneTransition.hasPreviousSceneRender">
            <summary>
            used internally to decide if the previous Scene should render into previousSceneRender. Does double duty to ensure that the
            render only happens once.
            </summary>
            <value><c>true</c> if has previous scene render; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Nez.SceneTransition.onScreenObscured">
            <summary>
            called when loadNextScene is executing. This is useful when doing inter-Scene transitions so that you know when you can more the
            Camera or reset any Entities
            </summary>
        </member>
        <member name="F:Nez.SceneTransition.onTransitionCompleted">
            <summary>
            called when the Transition has completed it's execution, so that other work can be called, such as Starting another transition.
            </summary>
        </member>
        <member name="F:Nez.SceneTransition._loadsNewScene">
            <summary>
            flag indicating if this transition will load a new scene or not
            </summary>
        </member>
        <member name="F:Nez.SceneTransition._isNewSceneLoaded">
            <summary>
            use this for two part transitions. For example, a fade would fade to black first then when _isNewSceneLoaded becomes true it would
            fade in. For in-Scene transitions _isNewSceneLoaded will be set to true at the midpoint just as if a new Scene was loaded.
            </summary>
        </member>
        <member name="M:Nez.SceneTransition.onBeginTransition">
            <summary>
            called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
            yielding one frame (so the first render call happens before scene loading).
            </summary>
        </member>
        <member name="M:Nez.SceneTransition.preRender(Nez.Graphics)">
            <summary>
            called before the Scene is rendered. This allows a transition to render to a RenderTarget if needed and avoids issues with MonoGame
            clearing the framebuffer when a RenderTarget is used.
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="M:Nez.SceneTransition.render(Nez.Graphics)">
            <summary>
            do all of your rendering here
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="M:Nez.SceneTransition.transitionComplete">
            <summary>
            this should be called when your transition is complete and the new Scene has been set. It will clean up
            </summary>
        </member>
        <member name="M:Nez.SceneTransition.tickEffectProgressProperty(Microsoft.Xna.Framework.Graphics.Effect,System.Single,Nez.Tweens.EaseType,System.Boolean)">
            <summary>
            the most common type of transition seems to be one that ticks progress from 0 - 1. This method takes care of that for you
            if your transition needs to have a _progress property ticked after the scene loads.
            </summary>
            <param name="duration">duration</param>
            <param name="reverseDirection">if true, _progress will go from 1 to 0. If false, it goes form 0 to 1</param>
        </member>
        <member name="T:Nez.ImageMaskTransition">
            <summary>
            uses an image to mask out part of the scene scaling it from max-to-min then from min-to-max with rotation. Note that the Texture
            should be loaded in the main Core.contentManager, not a Scene contentManager. The transition will unload it for you. The Texture
            should be transparent where it should be masked out and white where it should be masked in.
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.duration">
            <summary>
            duration of the transition both in and out
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.delayBeforeMaskOut">
            <summary>
            delay after the mask-in before the mark-out begins
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.minScale">
            <summary>
            minimum scale of the mask
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.maxScale">
            <summary>
            maximum scale of the mask
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.scaleEaseType">
            <summary>
            ease equation to use for the scale animation
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.minRotation">
            <summary>
            minimum rotation of the mask animation
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.maxRotation">
            <summary>
            maximum rotation of the mask animation
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition.rotationEaseType">
            <summary>
            ease equation to use for the rotation animation
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition._maskTexture">
            <summary>
            the Texture used as a mask. It should be white where the mask shows the underlying Scene and transparent elsewhere
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition._maskPosition">
            <summary>
            position of the mask, the center of the screen
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition._maskOrigin">
            <summary>
            origin of the mask, the center of the Texture
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition._blendState">
            <summary>
            multiplicative BlendState used for rendering the mask
            </summary>
        </member>
        <member name="F:Nez.ImageMaskTransition._maskRenderTarget">
            <summary>
            the mask is first rendered into a RenderTarget
            </summary>
        </member>
        <member name="T:Nez.CrossFadeTransition">
            <summary>
            fades from the current Scene to the new Scene
            </summary>
        </member>
        <member name="F:Nez.CrossFadeTransition.fadeDuration">
            <summary>
            duration for the fade
            </summary>
        </member>
        <member name="F:Nez.CrossFadeTransition.fadeEaseType">
            <summary>
            ease equation to use for the cross fade
            </summary>
        </member>
        <member name="T:Nez.SquaresTransition">
            <summary>
            builds up a cover of squares then removes them
            </summary>
        </member>
        <member name="P:Nez.SquaresTransition.squareColor">
            <summary>
            color of the squares
            </summary>
            <value>The color of the square.</value>
        </member>
        <member name="P:Nez.SquaresTransition.size">
            <summary>
            size of the squares. If you want perfect squares use size, size / aspectRatio_of_screen
            </summary>
            <value>The size.</value>
        </member>
        <member name="F:Nez.SquaresTransition.squaresInDuration">
            <summary>
            duration for squares to populate the screen
            </summary>
        </member>
        <member name="F:Nez.SquaresTransition.delayBeforeSquaresInDuration">
            <summary>
            delay before removing squares
            </summary>
        </member>
        <member name="F:Nez.SquaresTransition.squaresOutDuration">
            <summary>
            duration for squares to unpopulate screen
            </summary>
        </member>
        <member name="F:Nez.SquaresTransition.easeType">
            <summary>
            ease equation to use for the animation
            </summary>
        </member>
        <member name="T:Nez.WindTransition">
            <summary>
            sweeps wind accross the screen revealing the new Scene
            </summary>
        </member>
        <member name="P:Nez.WindTransition.windSegments">
            <summary>
            how many wind segments should be used. Defaults to 100. (1 - 1000)
            </summary>
            <value>The wind segments.</value>
        </member>
        <member name="P:Nez.WindTransition.size">
            <summary>
            size of the wind streaks. defaults to 0.3. (0.1 - 1)
            </summary>
            <value>The size.</value>
        </member>
        <member name="F:Nez.WindTransition.duration">
            <summary>
            duration for the wind transition
            </summary>
        </member>
        <member name="F:Nez.WindTransition.easeType">
            <summary>
            ease equation to use for the animation
            </summary>
        </member>
        <member name="M:Nez.TweenExt.tweenPositionTo(Nez.Transform,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.position tween
            </summary>
            <returns>The kposition to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalPositionTo(Nez.Transform,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.localPosition tween
            </summary>
            <returns>The klocal position to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenScaleTo(Nez.Transform,System.Single,System.Single)">
            <summary>
            transform.scale tween
            </summary>
            <returns>The scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenScaleTo(Nez.Transform,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.scale tween
            </summary>
            <returns>The scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalScaleTo(Nez.Transform,System.Single,System.Single)">
            <summary>
            transform.localScale tween
            </summary>
            <returns>The klocal scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalScaleTo(Nez.Transform,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.localScale tween
            </summary>
            <returns>The klocal scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenRotationDegreesTo(Nez.Transform,System.Single,System.Single)">
            <summary>
            transform.rotation tween
            </summary>
            <returns>The rotation to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalRotationDegreesTo(Nez.Transform,System.Single,System.Single)">
            <summary>
            transform.localEulers tween
            </summary>
            <returns>The klocal eulers to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenPositionTo(Nez.Entity,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.position tween
            </summary>
            <returns>The kposition to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalPositionTo(Nez.Entity,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.localPosition tween
            </summary>
            <returns>The klocal position to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenScaleTo(Nez.Entity,System.Single,System.Single)">
            <summary>
            transform.scale tween
            </summary>
            <returns>The scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenScaleTo(Nez.Entity,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.scale tween
            </summary>
            <returns>The scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalScaleTo(Nez.Entity,System.Single,System.Single)">
            <summary>
            transform.localScale tween
            </summary>
            <returns>The klocal scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalScaleTo(Nez.Entity,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            transform.localScale tween
            </summary>
            <returns>The klocal scale to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenRotationDegreesTo(Nez.Entity,System.Single,System.Single)">
            <summary>
            transform.rotation tween
            </summary>
            <returns>The rotation to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenLocalRotationDegreesTo(Nez.Entity,System.Single,System.Single)">
            <summary>
            transform.localEulers tween
            </summary>
            <returns>The klocal eulers to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="M:Nez.TweenExt.tweenColorTo(Nez.RenderableComponent,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            RenderableComponent.color tween
            </summary>
            <returns>The color to.</returns>
            <param name="self">Self.</param>
            <param name="to">To.</param>
            <param name="duration">Duration.</param>
        </member>
        <member name="T:Nez.SpringGrid">
            <summary>
            grid of springs
            based on the tutorial: http://gamedevelopment.tutsplus.com/tutorials/make-a-neon-vector-shooter-for-ios-the-warping-grid--gamedev-14637
            </summary>
        </member>
        <member name="P:Nez.SpringGrid.width">
            <summary>
            width of the grid
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Nez.SpringGrid.height">
            <summary>
            height of the grid
            </summary>
            <value>The height.</value>
        </member>
        <member name="F:Nez.SpringGrid.gridMajorColor">
            <summary>
            color of all major grid lines
            </summary>
        </member>
        <member name="F:Nez.SpringGrid.gridMinorColor">
            <summary>
            color of all minor grid lines
            </summary>
        </member>
        <member name="F:Nez.SpringGrid.gridMajorThickness">
            <summary>
            thickness of all major grid lines
            </summary>
        </member>
        <member name="F:Nez.SpringGrid.gridMinorThickness">
            <summary>
            thickness of all minor grid lines
            </summary>
        </member>
        <member name="F:Nez.SpringGrid.gridMajorPeriodX">
            <summary>
            how often a major grid line should appear on the x axis
            </summary>
        </member>
        <member name="F:Nez.SpringGrid.gridMajorPeriodY">
            <summary>
            how often a major grid line should appear on the y axis
            </summary>
        </member>
        <member name="M:Nez.SpringGrid.applyDirectedForce(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            applies a force in a 3-dimensional direction
            </summary>
            <param name="force">Force.</param>
            <param name="position">Position.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.SpringGrid.applyDirectedForce(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            applies a force in a 3-dimensional direction
            </summary>
            <param name="force">Force.</param>
            <param name="position">Position.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.SpringGrid.applyImplosiveForce(System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            applies a force that sucks the grid in towards the point
            </summary>
            <param name="force">Force.</param>
            <param name="position">Position.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.SpringGrid.applyImplosiveForce(System.Single,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            applies a force that sucks the grid in towards the point
            </summary>
            <param name="force">Force.</param>
            <param name="position">Position.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.SpringGrid.applyExplosiveForce(System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            applies a force the pushes the grid out aware from the point
            </summary>
            <param name="force">Force.</param>
            <param name="position">Position.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.SpringGrid.applyExplosiveForce(System.Single,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            applies a force the pushes the grid out aware from the point
            </summary>
            <param name="force">Force.</param>
            <param name="position">Position.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="T:Nez.Mesh">
            <summary>
            basic class that can be used to create simple meshes. For more advanced usage subclass and override what is needed. The general gist
            of usage is the following:
            - call setVertPositions
            - call setTriangles to set the triangle indices
            - call recalculateBounds to prepare the Mesh for rendering and culling
            </summary>
        </member>
        <member name="P:Nez.Mesh.bounds">
            <summary>
            the AABB that wraps this object
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Nez.Mesh.recalculateBounds(System.Boolean)">
            <summary>
            recalculates the bounds and optionally sets the UVs. The UVs are setup to map the texture in a best fit fashion.
            </summary>
            <param name="recalculateUVs">If set to <c>true</c> recalculate U vs.</param>
        </member>
        <member name="M:Nez.Mesh.setVertexColorEnabled(System.Boolean)">
            <summary>
            sets whether vertex colors will be used by the shader
            </summary>
            <returns>The enable vertex colors.</returns>
            <param name="shouldEnableVertexColors">If set to <c>true</c> should enable vertex colors.</param>
        </member>
        <member name="M:Nez.Mesh.setTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            sets the texture. Pass in null to unset the texture.
            </summary>
            <returns>The texture.</returns>
            <param name="texture">Texture.</param>
        </member>
        <member name="M:Nez.Mesh.setColorForAllVerts(Microsoft.Xna.Framework.Color)">
            <summary>
            helper that sets the color for all verts
            </summary>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.Mesh.setColor(Microsoft.Xna.Framework.Color)">
            <summary>
            sets the color for all of the verts
            </summary>
            <returns>The color.</returns>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.Mesh.setColorForVert(System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            sets the vertex color for a single vert
            </summary>
            <returns>The color for vert.</returns>
            <param name="vertIndex">Vert index.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.Mesh.setVertPositions(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            sets the vert positions. If the positions array does not match the verts array size the verts array will be recreated.
            </summary>
            <param name="positions">Positions.</param>
        </member>
        <member name="M:Nez.Mesh.setVertPositions(Microsoft.Xna.Framework.Vector3[])">
            <summary>
            sets the vert positions. If the positions array does not match the verts array size the verts array will be recreated.
            </summary>
            <param name="positions">Positions.</param>
        </member>
        <member name="M:Nez.Mesh.setTriangles(System.Int32[])">
            <summary>
            sets the triangle indices for rendering
            </summary>
            <returns>The triangles.</returns>
            <param name="triangles">Triangles.</param>
        </member>
        <member name="M:Nez.Mesh.setPrimitiveType(Microsoft.Xna.Framework.Graphics.PrimitiveType)">
            <summary>
            Change the rendering primitive type.
            If it is PrimitiveType.TriangleStrip then you don't need to setTriangles.
            </summary>
            <param name="primitiveType">The ordering of the verticies.</param>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Nez.ScreenSpaceRenderer">
            <summary>
            Renderer that renders using its own Camera which doesnt move.
            </summary>
        </member>
        <member name="T:Nez.Clipboard">
            <summary>
            prep for a proper multi-platform clipboard system. For now it just mocks the clipboard and will only work in-app
            </summary>
        </member>
        <member name="T:Nez.Pool`1">
            <summary>
            simple static class that can be used to pool any object
            </summary>
        </member>
        <member name="M:Nez.Pool`1.warmCache(System.Int32)">
            <summary>
            warms up the cache filling it with a max of cacheCount objects
            </summary>
            <param name="cacheCount">new cache count</param>
        </member>
        <member name="M:Nez.Pool`1.trimCache(System.Int32)">
            <summary>
            trims the cache down to cacheCount items
            </summary>
            <param name="cacheCount">Cache count.</param>
        </member>
        <member name="M:Nez.Pool`1.clearCache">
            <summary>
            clears out the cache
            </summary>
        </member>
        <member name="M:Nez.Pool`1.obtain">
            <summary>
            pops an item off the stack if available creating a new item as necessary
            </summary>
        </member>
        <member name="M:Nez.Pool`1.free(`0)">
            <summary>
            pushes an item back on the stack
            </summary>
            <param name="obj">Object.</param>
        </member>
        <member name="T:Nez.IPoolable">
            <summary>
            Objects implementing this interface will have {@link #reset()} called when passed to {@link #push(Object)}
            </summary>
        </member>
        <member name="M:Nez.IPoolable.reset">
            <summary>
            Resets the object for reuse. Object references should be nulled and fields may be set to default values
            </summary>
        </member>
        <member name="T:Nez.UICanvas">
            <summary>
            simple component that houses a Stage and delegates update/render/debugRender calls
            </summary>
        </member>
        <member name="P:Nez.UICanvas.isFullScreen">
            <summary>
            if true, the rawMousePosition will be used else the scaledMousePosition will be used. If your UI is in screen space (using a 
            ScreenSpaceRenderer for example) then set this to true so input is not scaled.
            </summary>
        </member>
        <member name="M:Nez.UICanvas.showDialog(System.String,System.String,System.String)">
            <summary>
            displays a simple dialog with a button to close it
            </summary>
            <returns>The dialog.</returns>
            <param name="title">Title.</param>
            <param name="messageText">Message text.</param>
            <param name="closeButtonText">Close button text.</param>
        </member>
        <member name="T:Nez.ITriggerListener">
            <summary>
            when added to a Component, whenever a Collider on the Entity overlaps/exits another Component these methods will be called.
            The ITriggerListener method will be called on any Component on the Entity that is a trigger that implement the interface.
            Note that this interface works only in conjunction with the Mover class
            </summary>
        </member>
        <member name="M:Nez.ITriggerListener.onTriggerEnter(Nez.Collider,Nez.Collider)">
            <summary>
            called when a collider intersects a trigger collider. This is called on the trigger collider and the collider that touched
            the trigger. Movement must be handled by the Mover/ProjectileMover methods for this to function automatically.
            </summary>
            <param name="remote">Remote.</param>
            <param name="local">Local.</param>
        </member>
        <member name="M:Nez.ITriggerListener.onTriggerExit(Nez.Collider,Nez.Collider)">
            <summary>
            called when another collider leaves a trigger collider.
            </summary>
            <param name="remote">Remote.</param>
            <param name="local">Local.</param>
        </member>
        <member name="T:Nez.ProjectileMover">
            <summary>
            moves taking collision into account only for reporting to any ITriggerListeners. The object will always move the full amount so it is up
            to the caller to destroy it on impact if desired.
            </summary>
        </member>
        <member name="M:Nez.ProjectileMover.move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            moves the entity taking collisions into account
            </summary>
            <returns><c>true</c>, if move actor was newed, <c>false</c> otherwise.</returns>
            <param name="motion">Motion.</param>
        </member>
        <member name="T:Nez.VirtualAxis">
            <summary>
            A virtual input represented as a float between -1 and 1
            </summary>
        </member>
        <member name="F:Nez.VirtualAxis.GamePadLeftStickY.invertResult">
            <summary>
            if true, pressing up will return -1 and down will return 1 matching GamePadDpadUpDown
            </summary>
        </member>
        <member name="T:Nez.VirtualButton">
            <summary>
            A virtual input that is represented as a boolean. As well as simply checking the current button state, you can ask whether
            it was just pressed or released this frame. You can also keep the button press stored in a buffer for a limited time, or
            until it is consumed by calling consumeBuffer()
            </summary>
        </member>
        <member name="M:Nez.VirtualButton.addKeyboardKey(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            adds a keyboard key to this VirtualButton
            </summary>
            <returns>The keyboard key.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:Nez.VirtualButton.addKeyboardKey(Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            adds a keyboard key with modifier to this VirtualButton. modifier must be in the down state for isPressed/isDown to be true.
            </summary>
            <returns>The keyboard key.</returns>
            <param name="key">Key.</param>
            <param name="modifier">Modifier.</param>
        </member>
        <member name="M:Nez.VirtualButton.addGamePadButton(System.Int32,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            adds a GamePad buttons press to this VirtualButton
            </summary>
            <returns>The game pad button.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="button">Button.</param>
        </member>
        <member name="M:Nez.VirtualButton.addGamePadLeftTrigger(System.Int32,System.Single)">
            <summary>
            adds a GamePad left trigger press to this VirtualButton
            </summary>
            <returns>The game pad left trigger.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.VirtualButton.addGamePadRightTrigger(System.Int32,System.Single)">
            <summary>
            adds a GamePad right trigger press to this VirtualButton
            </summary>
            <returns>The game pad right trigger.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="threshold">Threshold.</param>
        </member>
        <member name="M:Nez.VirtualButton.addGamePadDPad(System.Int32,Nez.Direction)">
            <summary>
            adds a GamePad DPad press to this VirtualButton
            </summary>
            <returns>The game pad DP ad.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Nez.VirtualButton.addMouseLeftButton">
            <summary>
            adds a left mouse click to this VirtualButton
            </summary>
            <returns>The mouse left button.</returns>
        </member>
        <member name="M:Nez.VirtualButton.addMouseRightButton">
            <summary>
            adds a right mouse click to this VirtualButton
            </summary>
            <returns>The mouse right button.</returns>
        </member>
        <member name="T:Nez.VirtualButton.KeyboardModifiedKey">
            <summary>
            works like KeyboardKey except the modifier key must also be down for isDown/isPressed to be true. isReleased checks only key.
            </summary>
        </member>
        <member name="T:Nez.VirtualInput">
            <summary>
            Represents a virtual button, axis or joystick whose state is determined by the state of its VirtualInputNodes
            </summary>
        </member>
        <member name="F:Nez.VirtualInput.OverlapBehavior.CancelOut">
            <summary>
            duplicate input will result in canceling each other out and no input will be recorded. Example: press left arrow key and while
            holding it down press right arrow. This will result in canceling each other out.
            </summary>
        </member>
        <member name="F:Nez.VirtualInput.OverlapBehavior.TakeOlder">
            <summary>
            the first input found will be used
            </summary>
        </member>
        <member name="F:Nez.VirtualInput.OverlapBehavior.TakeNewer">
            <summary>
            the last input found will be used
            </summary>
        </member>
        <member name="M:Nez.VirtualInput.deregister">
            <summary>
            deregisters the VirtualInput from the Input system. Call this when you are done polling the VirtualInput
            </summary>
        </member>
        <member name="T:Nez.VirtualInputNode">
            <summary>
            Add these to your VirtualInput to define how it determines its current input state. 
            For example, if you want to check whether a keyboard key is pressed, create a VirtualButton and add to it a VirtualButton.KeyboardKey
            </summary>
        </member>
        <member name="T:Nez.VirtualIntegerAxis">
            <summary>
            A virtual input that is represented as a int that is either -1, 0, or 1. It corresponds to input that can range from on to nuetral to off
            such as GamePad DPad left/right. Can also use two keyboard Keys as the positive/negative checks.
            </summary>
        </member>
        <member name="M:Nez.VirtualIntegerAxis.addGamePadLeftStickX(System.Int32,System.Single)">
            <summary>
            adds GamePad left stick X to this VirtualInput
            </summary>
            <returns>The game pad left stick x.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.VirtualIntegerAxis.addGamePadLeftStickY(System.Int32,System.Single)">
            <summary>
            adds GamePad left stick Y to this VirtualInput
            </summary>
            <returns>The game pad left stick y.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.VirtualIntegerAxis.addGamePadRightStickX(System.Int32,System.Single)">
            <summary>
            adds GamePad right stick X to this VirtualInput
            </summary>
            <returns>The game pad right stick x.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.VirtualIntegerAxis.addGamePadRightStickY(System.Int32,System.Single)">
            <summary>
            adds GamePad right stick Y to this VirtualInput
            </summary>
            <returns>The game pad right stick y.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.VirtualIntegerAxis.addGamePadDPadUpDown(System.Int32)">
            <summary>
            adds GamePad DPad up/down to this VirtualInput
            </summary>
            <returns>The game pad DP ad up down.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
        </member>
        <member name="M:Nez.VirtualIntegerAxis.addGamePadDPadLeftRight(System.Int32)">
            <summary>
            adds GamePad DPad left/right to this VirtualInput
            </summary>
            <returns>The game pad DP ad left right.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
        </member>
        <member name="M:Nez.VirtualIntegerAxis.addKeyboardKeys(Nez.VirtualInput.OverlapBehavior,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            adds keyboard Keys to emulate left/right or up/down to this VirtualInput
            </summary>
            <returns>The keyboard keys.</returns>
            <param name="overlapBehavior">Overlap behavior.</param>
            <param name="negative">Negative.</param>
            <param name="positive">Positive.</param>
        </member>
        <member name="T:Nez.VirtualJoystick">
            <summary>
            A virtual input that is represented as a Vector2, with both X and Y as values between -1 and 1
            </summary>
        </member>
        <member name="M:Nez.VirtualJoystick.addGamePadLeftStick(System.Int32,System.Single)">
            <summary>
            adds GamePad left stick input to this VirtualJoystick
            </summary>
            <returns>The game pad left stick.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.VirtualJoystick.addGamePadRightStick(System.Int32,System.Single)">
            <summary>
            adds GamePad right stick input to this VirtualJoystick
            </summary>
            <returns>The game pad right stick.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
            <param name="deadzone">Deadzone.</param>
        </member>
        <member name="M:Nez.VirtualJoystick.addGamePadDPad(System.Int32)">
            <summary>
            adds GamePad DPad input to this VirtualJoystick
            </summary>
            <returns>The game pad DP ad.</returns>
            <param name="gamepadIndex">Gamepad index.</param>
        </member>
        <member name="M:Nez.VirtualJoystick.addKeyboardKeys(Nez.VirtualInput.OverlapBehavior,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys,Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            adds keyboard keys input to this VirtualJoystick. Four keyboard keys will emulate left/right/up/down. For example WASD or the arrow
            keys.
            </summary>
            <returns>The keyboard keys.</returns>
            <param name="overlapBehavior">Overlap behavior.</param>
            <param name="left">Left.</param>
            <param name="right">Right.</param>
            <param name="up">Up.</param>
            <param name="down">Down.</param>
        </member>
        <member name="P:Nez.SpriteAlphaTestEffect.referenceAlpha">
            <summary>
            alpha value used for the comparison. Should be in the 0 - 1 range. Defaults to 0.5f.
            </summary>
            <value>The reference alpha.</value>
        </member>
        <member name="T:Nez.SpriteLightPostProcessor">
            <summary>
            post processor to assist with making blended sprite lights. Usage is as follows:
            - render all sprite lights with a separate Renderer to a RenderTarget. The clear color of the Renderer is your ambient light color.
            - render all normal objects in standard fashion
            - add this PostProcessor with the RenderTarget from your lights Renderer
            </summary>
        </member>
        <member name="P:Nez.SpriteLightPostProcessor.multiplicativeFactor">
            <summary>
            multiplicative factor for the blend of the base and light render targets. Defaults to 1.
            </summary>
            <value>The multiplicative factor.</value>
        </member>
        <member name="T:Nez.PixelGlitchPostProcessor">
            <summary>
            glitch effect where the screen is divided into rows verticalSize high. Each row is shifted horizonalAmount left or right. It is best used
            by changing horizontalOffset every few frames for a second then going back to normal.
            </summary>
        </member>
        <member name="P:Nez.PixelGlitchPostProcessor.verticalSize">
            <summary>
            vertical size in pixels or each row. default 5.0
            </summary>
            <value>The size of the vertical.</value>
        </member>
        <member name="P:Nez.PixelGlitchPostProcessor.horizontalOffset">
            <summary>
            horizontal shift in pixels. default 10.0
            </summary>
            <value>The horizontal offset.</value>
        </member>
        <member name="M:Nez.ScreenSpaceCamera.updateMatrixes">
            <summary>
            we are screen space, so our matrixes should always be identity
            </summary>
        </member>
        <member name="T:Nez.Material`1">
            <summary>
            convenience subclass with a single property that casts the Effect for cleaner configuration
            </summary>
        </member>
        <member name="F:Nez.Material.defaultMaterial">
            <summary>
            default Material instance
            </summary>
        </member>
        <member name="F:Nez.Material.defaultOpaqueMaterial">
            <summary>
            default opaque Material used for PostProcessors
            </summary>
        </member>
        <member name="F:Nez.Material.blendState">
            <summary>
            BlendState used by the Batcher for the current RenderableComponent
            </summary>
        </member>
        <member name="F:Nez.Material.depthStencilState">
            <summary>
            DepthStencilState used by the Batcher for the current RenderableComponent
            </summary>
        </member>
        <member name="F:Nez.Material.samplerState">
            <summary>
            SamplerState used by the Batcher for the current RenderableComponent
            </summary>
        </member>
        <member name="F:Nez.Material.effect">
            <summary>
            Effect used by the Batcher for the current RenderableComponent
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nez.Material.blendMultiply2x" -->
        <member name="M:Nez.Material.onPreRender(Nez.Camera)">
            <summary>
            called when the Material is initialy set right before Batcher.begin to allow any Effects that have parameters set if necessary
            based on the Camera Matrix such as to set the MatrixTransform via camera.viewProjectionMatrix mimicking what Batcher does. This will
            only be called if there is a non-null Effect.
            </summary>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Nez.Material.CompareTo(Nez.Material)">
            <Docs>To be added.</Docs>
            <para>Returns the sort order of the current instance compared to the specified object.</para>
            <summary>
            very basic here. We only check if the pointers are the same
            </summary>
            <returns>The to.</returns>
            <param name="other">Other.</param>
        </member>
        <member name="M:Nez.Material.clone">
            <summary>
            clones the Material. Note that the Effect is not cloned. It is the same instance as the original Material.
            </summary>
        </member>
        <member name="P:Nez.Batcher.transformMatrix">
            <summary>
            Matrix to be used when creating the projection matrix
            </summary>
            <value>The transform matrix.</value>
        </member>
        <member name="F:Nez.Batcher.shouldRoundDestinations">
            <summary>
            If true, destination positions will be rounded before being drawn.
            </summary>
        </member>
        <member name="M:Nez.Batcher.setIgnoreRoundingDestinations(System.Boolean)">
            <summary>
            sets if position rounding should be ignored. Useful when you are drawing primitives for debugging.
            </summary>
            <param name="shouldIgnore">If set to <c>true</c> should ignore.</param>
        </member>
        <member name="M:Nez.Batcher.drawRaw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Color[])">
            <summary>
            direct access to setting vert positions, UVs and colors. The order of elements is top-left, top-right, bottom-left, bottom-right
            </summary>
            <returns>The raw.</returns>
            <param name="texture">Texture.</param>
            <param name="verts">Verts.</param>
            <param name="textureCoords">Texture coords.</param>
            <param name="colors">Colors.</param>
        </member>
        <member name="M:Nez.Batcher.drawRaw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Color)">
            <summary>
            direct access to setting vert positions, UVs and colors. The order of elements is top-left, top-right, bottom-left, bottom-right
            </summary>
            <returns>The raw.</returns>
            <param name="texture">Texture.</param>
            <param name="verts">Verts.</param>
            <param name="textureCoords">Texture coords.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.Batcher.pushSprite(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Byte,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            the meat of the Batcher. This is where it all goes down
            </summary>
        </member>
        <member name="M:Nez.Batcher.pushSprite(Nez.Textures.Subtexture,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Subtexture alternative to the old SpriteBatch pushSprite
            </summary>
        </member>
        <member name="M:Nez.Batcher.enableScissorTest(System.Boolean)">
            <summary>
            enables/disables scissor testing. If the RasterizerState changes it will cause a batch flush.
            </summary>
            <returns>The scissor test.</returns>
            <param name="shouldEnable">Should enable.</param>
        </member>
        <member name="T:Nez.BatcherDrawingExt">
            <summary>
            an assortment of helper methods to assist with drawing
            </summary>
        </member>
        <member name="M:Nez.BatcherDrawingExt.drawPoints(Nez.Batcher,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a list of connected points
            </summary>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:Nez.BatcherDrawingExt.drawPoints(Nez.Batcher,Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a list of connected points
            </summary>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:Nez.BatcherDrawingExt.drawPoints(Nez.Batcher,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Color,System.Boolean,System.Single)">
            <summary>
            Draws a list of connected points
            </summary>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
            <param name="closePoly">If set to <c>true</c> the first and last points will be connected.</param>
        </member>
        <member name="T:Nez.BitmapFontExtensions">
            <summary>
            provides the full SpriteFont assortment of DrawString methods
            </summary>
        </member>
        <member name="M:Nez.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Nez.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Nez.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Nez.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Nez.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Nez.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Nez.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Nez.BitmapFonts.BitmapFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Nez.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Nez.BitmapFonts.BitmapFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Nez.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,Nez.BitmapFonts.BitmapFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="T:Nez.DeferredLighting.DeferredLightingRenderer">
            <summary>
            handles deferred lighting. This Renderer should be ordered after any of your Renderers that render to a RenderTexture. Any renderLayers
            rendered by this Renderer should have Renderables with DeferredSpriteMaterials (or null Material to use the default, diffuse only Material).
            </summary>
        </member>
        <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.wantsToRenderToSceneRenderTarget">
            <summary>
            we do not want to render into the Scene render texture
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="F:Nez.DeferredLighting.DeferredLightingRenderer.renderLayers">
            <summary>
            the renderLayers this Renderer will render
            </summary>
        </member>
        <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.ambientColor">
            <summary>
            ambient lighting color. Alpha is ignored
            </summary>
            <value>The color of the ambient.</value>
        </member>
        <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.clearColor">
            <summary>
            clear color for the diffuse portion of the gbuffer
            </summary>
            <value>The color of the clear.</value>
        </member>
        <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.nullNormalMapTexture">
            <summary>
            single pixel texture of a neutral normal map. This will effectively make the object have only diffuse lighting if applied as the normal map.
            </summary>
            <value>The null normal map texture.</value>
        </member>
        <member name="F:Nez.DeferredLighting.DeferredLightingRenderer.enableDebugBufferRender">
            <summary>
            if true, all stages of the deferred pipeline are rendered after the final combine
            </summary>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.render(Nez.Scene)">
            <summary>
            we override render completely here so we can do our thing with multiple render targets
            </summary>
            <param name="scene">scene.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.setAmbientColor(Microsoft.Xna.Framework.Color)">
            <summary>
            ambient lighting color. Alpha is ignored
            </summary>
            <returns>The ambient color.</returns>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.setClearColor(Microsoft.Xna.Framework.Color)">
            <summary>
            clear color for the diffuse portion of the gbuffer
            </summary>
            <returns>The clear color.</returns>
            <param name="color">Color.</param>
        </member>
        <member name="T:Nez.DeferredLighting.DeferredSpriteEffect">
            <summary>
            effect used to render sprites that take part in deferred lighting. A normal map is required. The normal map can optionally use the alpha
            channel for self illumination by setitng useNormalAlphaChannelForSelfIllumination to true. Note that you need to turn off premultiplied
            alpha in the Pipeline tool when using the alpha for self illumination!
            </summary>
        </member>
        <member name="P:Nez.DeferredLighting.DeferredSpriteEffect.alphaCutoff">
            <summary>
            alpha cutoff for the alpha test. defaults to 0.3
            </summary>
            <value>The alpha cutoff.</value>
        </member>
        <member name="P:Nez.DeferredLighting.DeferredSpriteEffect.useNormalAlphaChannelForSelfIllumination">
            <summary>
            if true, the normal map alpha channel will be used for self illumination. Note that you need to turn off premultiplied
            alpha in the Pipeline tool when using the alpha for self illumination!
            </summary>
            <value><c>true</c> if use normal alpha channel for self illumination; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.DeferredLighting.DeferredSpriteEffect.selfIlluminationPower">
            <summary>
            controls the power of the self illumination where 0 is no contribution and 1 is fully self illuminated
            </summary>
            <value>The self illumination power parameter.</value>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.setAlphaCutoff(System.Single)">
            <summary>
            alpha cutoff for the alpha test. defaults to 0.3
            </summary>
            <returns>The alpha cutoff.</returns>
            <param name="alphaCutoff">Alpha cutoff.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.setUseNormalAlphaChannelForSelfIllumination(System.Boolean)">
            <summary>
            if true, the normal map alpha channel will be used for self illumination. Note that you need to turn off premultiplied
            alpha in the Pipeline tool when using the alpha for self illumination!
            </summary>
            <returns>The use normal alpha channel for self illumination.</returns>
            <param name="useNormalAlphaChannelForSelfIllumination">If set to <c>true</c> use normal alpha channel for self illumination.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.setSelfIlluminationPower(System.Single)">
            <summary>
            controls the power of the self illumination where 0 is no contribution and 1 is fully self illuminated
            </summary>
            <returns>The self illumination power.</returns>
            <param name="selfIlluminationPower">Self illumination power.</param>
        </member>
        <member name="T:Nez.DeferredLighting.PolygonMesh">
            <summary>
            builds a Polygon from the passed in verts. Verts should be relative to 0,0 and contain the outer perimeter of the polygon. A center
            vert will be added and used to triangulate the polygon. If you need a transform matrix for the Polygon set the position/scale and
            then fetch the transformMatrix property.
            </summary>
        </member>
        <member name="M:Nez.DeferredLighting.PolygonMesh.createSymmetricalPolygon(System.Int32,System.Single)">
            <summary>
            creates a circular polygon
            </summary>
            <returns>The symmetrical polygon.</returns>
            <param name="vertCount">Vert count.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.DeferredLighting.PolygonMesh.createSymmetricalPolygon(System.Int32)">
            <summary>
            creates a circular polygon
            </summary>
            <returns>The symmetrical polygon.</returns>
            <param name="vertCount">Vert count.</param>
        </member>
        <member name="T:Nez.DeferredLighting.AreaLight">
            <summary>
            AreaLights work like DirLights except they only affect a specific area specified by the width/height. Note that Transform.scale
            will affect the size of an AreaLight.
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.AreaLight.direction">
            <summary>
            direction of the light
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.AreaLight.intensity">
            <summary>
            brightness of the light
            </summary>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLight.render(Nez.Graphics,Nez.Camera)">
            <summary>
            we dont render lights normally so this method will do nothing and never be called. The DeferredLightingRenderer takes care of
            light rendering so that it can cache and reuse the light meshes.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="camera">Camera.</param>
        </member>
        <member name="T:Nez.DeferredLighting.PointLight">
            <summary>
            PointLights radiate light in a circle. Note that PointLights are affected by Transform.scale. The Transform.scale.X value is multiplied
            by the lights radius when sent to the GPU. It is expected that scale will be linear.
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.PointLight.zPosition">
            <summary>
            "height" above the scene in the z direction
            </summary>
        </member>
        <member name="P:Nez.DeferredLighting.PointLight.radius">
            <summary>
            how far does this light reaches
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.PointLight.intensity">
            <summary>
            brightness of the light
            </summary>
        </member>
        <member name="M:Nez.DeferredLighting.PointLight.setRadius(System.Single)">
            <summary>
            how far does this light reach
            </summary>
            <returns>The radius.</returns>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.DeferredLighting.PointLight.setIntensity(System.Single)">
            <summary>
            brightness of the light
            </summary>
            <returns>The intensity.</returns>
            <param name="intensity">Intensity.</param>
        </member>
        <member name="M:Nez.DeferredLighting.PointLight.debugRender(Nez.Graphics)">
            <summary>
            renders the bounds only if there is no collider. Always renders a square on the origin.
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="P:Nez.DeferredLighting.SpotLight.direction">
            <summary>
            wrapper for entity.transform.rotation to ease in setting up direction of spots to point at specific locations
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.SpotLight.coneAngle">
            <summary>
            angle in degrees of the cone
            </summary>
        </member>
        <member name="M:Nez.DeferredLighting.SpotLight.setRadius(System.Single)">
            <summary>
            how far does this light reach
            </summary>
            <returns>The radius.</returns>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.DeferredLighting.SpotLight.setIntensity(System.Single)">
            <summary>
            brightness of the light
            </summary>
            <returns>The intensity.</returns>
            <param name="intensity">Intensity.</param>
        </member>
        <member name="M:Nez.DeferredLighting.SpotLight.setDirection(Microsoft.Xna.Framework.Vector2)">
            <summary>
            wrapper for entity.transform.rotation to ease in setting up direction of spots to point at specific locations
            </summary>
            <returns>The direction.</returns>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredSpriteMaterial.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            DeferredSpriteEffects require a normal map. If you want to forego the normal map and have just diffuse light use the
            DeferredLightingRenderer.nullNormalMapTexture.
            </summary>
            <param name="normalMap">Normal map.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.updateForCamera(Nez.Camera)">
            <summary>
            updates the camera matrixes in the Effect
            </summary>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.updateForLight(Nez.DeferredLighting.DeferredLight)">
            <summary>
            updates the shader values for the light and sets the appropriate CurrentTechnique
            </summary>
            <param name="light">Light.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.updateForLight(Nez.DeferredLighting.PointLight)">
            <summary>
            updates the shader values for the light and sets the appropriate CurrentTechnique
            </summary>
            <param name="light">Light.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.updateForLight(Nez.DeferredLighting.SpotLight)">
            <summary>
            updates the shader values for the light and sets the appropriate CurrentTechnique
            </summary>
            <param name="light">Light.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.updateForLight(Nez.DeferredLighting.AreaLight)">
            <summary>
            updates the shader values for the light and sets the appropriate CurrentTechnique
            </summary>
            <param name="light">Light.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.updateForLight(Nez.DeferredLighting.DirLight)">
            <summary>
            updates the shader values for the light and sets the appropriate CurrentTechnique
            </summary>
            <param name="light">Light.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.setScreenToWorld(Microsoft.Xna.Framework.Matrix)">
            <summary>
            inverse of Camera.getViewProjectionMatrix
            </summary>
            <param name="screenToWorld">screenToWorld.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.setSpotLightDirection(Microsoft.Xna.Framework.Vector2)">
            <summary>
            directly sets the light direction
            </summary>
            <param name="lightDirection">Light direction.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.setSpotLightDirection(System.Single)">
            <summary>
            sets the light direction using just an angle in degrees. 0 degrees points to theright, 90 degrees would be straight down, etc
            </summary>
            <param name="degrees">Degrees.</param>
        </member>
        <member name="M:Nez.DeferredLighting.DeferredLightEffect.prepareForFinalCombine(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            sets the two textures required for the final combine and applies the pass
            </summary>
            <param name="diffuse">Diffuse.</param>
            <param name="lightMap">Light map.</param>
        </member>
        <member name="T:Nez.DeferredLighting.DirLight">
            <summary>
            directional light with a shortended name to avoid clashes with the XNA DirectionalLight. This light type has only a direction and is
            never culled. It is a global light and the only light that produces specular highlights.
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.DirLight.direction">
            <summary>
            direction of the light
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.DirLight.specularIntensity">
            <summary>
            specular intensity. 0 - 1 range
            </summary>
        </member>
        <member name="F:Nez.DeferredLighting.DirLight.specularPower">
            <summary>
            specular power. this is the exponent passed to pow() of the projection from 0,0,-1 to the light-to-normal
            </summary>
        </member>
        <member name="M:Nez.DeferredLighting.DirLight.debugRender(Nez.Graphics)">
            <summary>
            we dont want to render our bounds so we just render a direction
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="T:Nez.SpriteLinesEffect">
            <summary>
            draws the sprite with just vertical or horizonal lines of the specified color. The effect works in screen space.
            </summary>
        </member>
        <member name="P:Nez.SpriteLinesEffect.lineColor">
            <summary>
            color of the lines. Defaults to red.
            </summary>
            <value>The color of the line.</value>
        </member>
        <member name="P:Nez.SpriteLinesEffect.lineSize">
            <summary>
            size of the lines in pixels. Defaults to 5.
            </summary>
            <value>The size of the line.</value>
        </member>
        <member name="P:Nez.SpriteLinesEffect.isVertical">
            <summary>
            toggles vertical/horizontal lines
            </summary>
            <value><c>true</c> if is vertical; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.CinematicLetterboxPostProcessor.color">
            <summary>
            color of the letterbox
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Nez.CinematicLetterboxPostProcessor.letterboxSize">
            <summary>
            size in pixels of the letterbox
            </summary>
            <value>The size of the letterbox.</value>
        </member>
        <member name="M:Nez.CinematicLetterboxPostProcessor.animateIn(System.Single,System.Single,Nez.Tweens.EaseType)">
            <summary>
            animates the letterbox in
            </summary>
            <returns>The in.</returns>
            <param name="letterboxSize">Letterbox size.</param>
            <param name="duration">Duration.</param>
            <param name="easeType">Ease type.</param>
        </member>
        <member name="M:Nez.CinematicLetterboxPostProcessor.animateOut(System.Single,Nez.Tweens.EaseType)">
            <summary>
            animates the letterbox out
            </summary>
            <returns>The out.</returns>
            <param name="duration">Duration.</param>
            <param name="easeType">Ease type.</param>
        </member>
        <member name="T:Nez.ListPool`1">
            <summary>
            simple static class that can be used to pool Lists
            </summary>
        </member>
        <member name="M:Nez.ListPool`1.warmCache(System.Int32)">
            <summary>
            warms up the cache filling it with a max of cacheCount objects
            </summary>
            <param name="cacheCount">new cache count</param>
        </member>
        <member name="M:Nez.ListPool`1.trimCache(System.Int32)">
            <summary>
            trims the cache down to cacheCount items
            </summary>
            <param name="cacheCount">Cache count.</param>
        </member>
        <member name="M:Nez.ListPool`1.clearCache">
            <summary>
            clears out the cache
            </summary>
        </member>
        <member name="M:Nez.ListPool`1.obtain">
            <summary>
            pops an item off the stack if available creating a new item as necessary
            </summary>
        </member>
        <member name="M:Nez.ListPool`1.free(System.Collections.Generic.List{`0})">
            <summary>
            pushes an item back on the stack
            </summary>
            <param name="obj">Object.</param>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.BehaviorTreeReference`1">
            <summary>
            runs an entire BehaviorTree as a child and returns success
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.ExecuteAction`1">
            <summary>
            wraps a Func so that you can avoid having to subclass to create new actions
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.Composite`1">
            <summary>
            any Composite nodes must subclass this. Provides storage for children and helpers to deal with AbortTypes
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Composite`1.addChild(Nez.AI.BehaviorTrees.Behavior{`0})">
            <summary>
            adds a child to this Composite
            </summary>
            <param name="child">Child.</param>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Composite`1.isFirstChildConditional">
            <summary>
            returns true if the first child of a Composite is a Conditional. Usef for dealing with conditional aborts.
            </summary>
            <returns><c>true</c>, if first child conditional was ised, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Composite`1.hasLowerPriorityConditionalAbortInChildren">
            <summary>
            checks the children of the Composite to see if any are a Composite with a LowerPriority AbortType
            </summary>
            <returns><c>true</c>, if lower priority conditional abort in children was hased, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Composite`1.updateLowerPriorityAbortConditional(`0,Nez.AI.BehaviorTrees.TaskStatus)">
            <summary>
            checks any child Composites that have a LowerPriority AbortType and a Conditional as the first child. If it finds one it will tick
            the Conditional and if the status is not equal to statusCheck the _currentChildIndex will be updated, ie the currently running
            Action will be aborted.
            </summary>
            <param name="context">Context.</param>
            <param name="statusCheck">Status check.</param>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Composite`1.updateSelfAbortConditional(`0,Nez.AI.BehaviorTrees.TaskStatus)">
            <summary>
            checks any IConditional children to see if they have changed state
            </summary>
            <param name="context">Context.</param>
            <param name="statusCheck">Status check.</param>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Composite`1.updateConditionalNode(`0,Nez.AI.BehaviorTrees.Behavior{`0})">
            <summary>
            helper that gets the TaskStatus of either a Conditional or a ConditionalDecorator
            </summary>
            <returns>The conditional node.</returns>
            <param name="context">Context.</param>
            <param name="node">Node.</param>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.Parallel`1">
            <summary>
            the parallel task will run each child task until a child task returns failure. The difference is that the parallel task will run all of
            its children tasks simultaneously versus running each task one at a time. Like the sequence class, the parallel task will return
            success once all of its children tasks have returned success. If one tasks returns failure the parallel task will end all of the child
            tasks and return failure.
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.ParallelSelector`1">
            <summary>
            Similar to the selector task, the ParallelSelector task will return success as soon as a child task returns success. The difference
            is that the parallel task will run all of its children tasks simultaneously versus running each task one at a time. If one tasks returns
            success the parallel selector task will end all of the child tasks and return success. If every child task returns failure then the
            ParallelSelector task will return failure.
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.RandomSelector`1">
            <summary>
            Same as Selector except it shuffles the children when started
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.RandomSequence`1">
            <summary>
            Same as Sequence except it shuffles the children when started
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.Selector`1">
            <summary>
            The selector task is similar to an "or" operation. It will return success as soon as one of its child tasks return success. If a
            child task returns failure then it will sequentially run the next task. If no child task returns success then it will return failure.
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.Sequence`1">
            <summary>
            The sequence task is similar to an "and" operation. It will return failure as soon as one of its child tasks return failure. If a
            child task returns success then it will sequentially run the next task. If all child tasks return success then it will return success.
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.RandomProbability`1">
            <summary>
            returns success when the random probability is above the successProbability probability. It will otherwise return failure.
            successProbability should be between 0 and 1.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.RandomProbability`1._successProbability">
            <summary>
            The chance that the task will return success
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.AlwaysFail`1">
            <summary>
            will always return failure except when the child task is running
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.AlwaysSucceed`1">
            <summary>
            will always return success except when the child task is running
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.Inverter`1">
            <summary>
            inverts the result of the child node
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.Repeater`1">
            <summary>
            will repeat execution of its child task until the child task has been run a specified number of times. It has the option of
            continuing to execute the child task even if the child task returns a failure.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.Repeater`1.count">
            <summary>
            The number of times to repeat the execution of its child task
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.Repeater`1.repeatForever">
            <summary>
            Allows the repeater to repeat forever
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.Repeater`1.endOnFailure">
            <summary>
            Should the task return if the child task returns a failure
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.UntilFail`1">
            <summary>
            will keep executing its child task until the child task returns failure
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.UntilSuccess`1">
            <summary>
            will keep executing its child task until the child task returns success
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.Behavior`1">
            <summary>
            root class for all nodes
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Behavior`1.invalidate">
            <summary>
            invalidate the status of the node. Composites can override this and invalidate all of their children.
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Behavior`1.onStart">
            <summary>
            called immediately before execution. It is used to setup any variables that need to be reset from the previous run
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Behavior`1.onEnd">
            <summary>
            called when a task changes state to something other than running
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.Behavior`1.tick(`0)">
            <summary>
            tick handles calling through to update where the actual work is done. It exists so that it can call onStart/onEnd when necessary.
            </summary>
            <param name="context">Context.</param>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.BehaviorTree`1">
            <summary>
            root class used to control a BehaviorTree. Handles storing the context
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.BehaviorTree`1.updatePeriod">
            <summary>
            how often the behavior tree should update. An updatePeriod of 0.2 will make the tree update 5 times a second.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.BehaviorTree`1._context">
            <summary>
            The context should contain all the data needed to run the tree
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.BehaviorTree`1._root">
            <summary>
            root node of the tree
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1">
            <summary>
            helper for building a BehaviorTree using a fluent API. Leaf nodes need to first have a parent added. Parents can be Composites or
            Decorators. Decorators are automatically closed when a leaf node is added. Composites must have endComposite called to close them.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1._currentNode">
            <summary>
            Last node created.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1._parentNodeStack">
            <summary>
            Stack nodes that we are build via the fluent API.
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.pushParentNode(Nez.AI.BehaviorTrees.Behavior{`0})">
            <summary>
            pushes a Composite or Decorator on the stack
            </summary>
            <returns>The parent node.</returns>
            <param name="composite">Composite.</param>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.action(System.Func{`0,System.Boolean})">
            <summary>
            Like an action node but the function can return true/false and is mapped to success/failure.
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.conditional(System.Func{`0,System.Boolean})">
            <summary>
            Like a conditional node but the function can return true/false and is mapped to success/failure.
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.subTree(Nez.AI.BehaviorTrees.BehaviorTree{`0})">
            <summary>
            Splice a sub tree into the parent tree.
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.conditionalDecorator(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Like a conditional decorator node but the function can return true/false and is mapped to success/failure.
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.IConditional`1">
            <summary>
            interface used just to identify if a Behavior is a conditional. it will always be applied to a Behavior which already has the update method.
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.ExecuteActionConditional`1">
            <summary>
            wraps an ExecuteAction so that it can be used as a Conditional
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.AbortTypes.None">
            <summary>
            no abort type. the current action will always run even if other conditionals change state
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.AbortTypes.LowerPriority">
            <summary>
            If a more important conditional task changes status it can issue an abort that will stop the lower priority tasks from running
            and shift control back to the higher priority branch. This type should be set on Composites that are children of the evaulating
            Composite. The parent Composite will check it's children to see if they have a LowerPriority abort.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.AbortTypes.Self">
            <summary>
            The Conditional task can only abort an Action task if they are both children of the Composite. This AbortType only affects the
            actual Composite that it is set on unlike LowerPriority which affects its parent Composite.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.AbortTypes.Both">
            <summary>
            both LowerPriority and Self aborts are checked
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.ConditionalDecorator`1">
            <summary>
            decorator that will only run its child if a condition is met. By default, the condition will be reevaluated every tick.
            </summary>
        </member>
        <member name="M:Nez.AI.BehaviorTrees.ConditionalDecorator`1.executeConditional(`0,System.Boolean)">
            <summary>
            executes the conditional either following the shouldReevaluate flag or with an option to force an update. Aborts will force the
            update to make sure they get the proper data if a Conditional changes.
            </summary>
            <returns>The conditional.</returns>
            <param name="context">Context.</param>
            <param name="forceUpdate">If set to <c>true</c> force update.</param>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.LogAction`1">
            <summary>
            simple task which will output the specified text and return success. It can be used for debugging.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.LogAction`1.text">
            <summary>
            text to log
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.LogAction`1.isError">
            <summary>
            is this text an error
            </summary>
        </member>
        <member name="T:Nez.AI.BehaviorTrees.WaitAction`1">
            <summary>
            Wait a specified amount of time. The task will return running until the task is done waiting. It will return success after the wait
            time has elapsed.
            </summary>
        </member>
        <member name="F:Nez.AI.BehaviorTrees.WaitAction`1.waitTime">
            <summary>
            the amount of time to wait
            </summary>
        </member>
        <member name="M:Nez.AI.FSM.State`1.onInitialized">
            <summary>
            called directly after the machine and context are set allowing the state to do any required setup
            </summary>
        </member>
        <member name="M:Nez.AI.FSM.State`1.begin">
            <summary>
            called when the state becomes the active state
            </summary>
        </member>
        <member name="M:Nez.AI.FSM.State`1.reason">
            <summary>
            called before update allowing the state to have one last chance to change state
            </summary>
        </member>
        <member name="M:Nez.AI.FSM.State`1.update(System.Single)">
            <summary>
            called every frame this state is the active state
            </summary>
            <param name="deltaTime">Delta time.</param>
        </member>
        <member name="M:Nez.AI.FSM.State`1.end">
            <summary>
            called when this state is no longer the active state
            </summary>
        </member>
        <member name="M:Nez.AI.FSM.StateMachine`1.addState(Nez.AI.FSM.State{`0})">
            <summary>
            adds the state to the machine
            </summary>
        </member>
        <member name="M:Nez.AI.FSM.StateMachine`1.update(System.Single)">
            <summary>
            ticks the state machine with the provided delta time
            </summary>
        </member>
        <member name="M:Nez.AI.FSM.StateMachine`1.changeState``1">
            <summary>
            changes the current state
            </summary>
        </member>
        <member name="T:Nez.AI.FSM.SimpleStateMachine`1">
            <summary>
            Simple state machine with an enum constraint. There are some rules you must follow when using this:
            - before update is called initialState must be set (use the constructor or onAddedToEntity)
            - if you implement update in your subclass you must call base.update()
            
            Note: if you use an enum as the contraint you can avoid allocations/boxing in Mono by doing what the Core
            Emitter does for its enum: pass in a IEqualityComparer to the constructor.
            </summary>
        </member>
        <member name="F:Nez.AI.UtilityAI.UtilityAI`1.updatePeriod">
            <summary>
            how often the behavior tree should update. An updatePeriod of 0.2 will make the tree update 5 times a second.
            </summary>
        </member>
        <member name="F:Nez.AI.UtilityAI.UtilityAI`1._context">
            <summary>
            The context should contain all the data needed to run the tree
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.ActionWithOptions`2">
            <summary>
            Action that encompasses a List of options. The options are passed to Appraisals which score and locate the best option.
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.LogAction`1">
            <summary>
            Action that logs text
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.ActionExecutor`1">
            <summary>
            wraps an Action for use as an IAction without having to create a new class
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.FirstScoreReasoner`1">
            <summary>
            The first Consideration to score above the score of the Default Consideration is selected
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.HighestScoreReasoner`1">
            <summary>
            The Consideration with the highest score is selected
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.Reasoner`1">
            <summary>
            the root of UtilityAI.
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.AllOrNothingConsideration`1">
            <summary>
            Only scores if all child Appraisals score above the threshold
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.IConsideration`1">
            <summary>
            encapsulates an Action and generates a score that a Reasoner can use to decide which Consideration to use
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.FixedScoreConsideration`1">
            <summary>
            always returns a fixed score. Serves double duty as a default Consideration.
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.SumOfChildrenConsideration`1">
            <summary>
            Scores by summing the score of all child Appraisals
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.ThresholdConsideration`1">
            <summary>
            Scores by summing child Appraisals until a child scores below the threshold
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.IAppraisal`1">
            <summary>
            scorer for use with a Consideration
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.IActionOptionAppraisal`2">
            <summary>
            Appraisal for use with an ActionWithOptions
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.ReasonerAction`1">
            <summary>
            Action that calls through to another Reasoner
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.CompositeAction`1">
            <summary>
            Action that contains a List of Actions that it will execute sequentially
            </summary>
        </member>
        <member name="T:Nez.AI.UtilityAI.ActionAppraisal`1">
            <summary>
            wraps a Func for use as an Appraisal without having to create a subclass
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.Action.name">
            <summary>
            optional name for the Action. Used for debugging purposes
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.Action.cost">
            <summary>
            The cost of performing the action.  Figure out a weight that suits the action.  Changing it will affect what actions are
            chosen during planning
            </summary>
        </member>
        <member name="M:Nez.AI.GOAP.Action.validate">
            <summary>
            called before the Planner does its planning. Gives the Action an opportunity to set its score or to opt out if it isnt of use.
            For example, if the Action is to pick up a gun but there are no guns in the world returning false would keep the Action from being
            considered by the ActionPlanner.
            </summary>
        </member>
        <member name="T:Nez.AI.GOAP.ActionPlanner">
            <summary>
            GOAP based on https://github.com/stolk/GPGOAP
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.ActionPlanner.conditionNames">
            <summary>
            Names associated with all world state atoms
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.ActionPlanner._preConditions">
            <summary>
            Preconditions for all actions
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.ActionPlanner._postConditions">
            <summary>
            Postconditions for all actions (action effects).
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.ActionPlanner._numConditionNames">
            <summary>
            Number of world state atoms.
            </summary>
        </member>
        <member name="M:Nez.AI.GOAP.ActionPlanner.createWorldState">
            <summary>
            convenince method for fetching a WorldState object
            </summary>
            <returns>The world state.</returns>
        </member>
        <member name="M:Nez.AI.GOAP.ActionPlanner.describe">
            <summary>
            Describe the action planner by listing all actions with pre and post conditions. For debugging purpose.
            </summary>
        </member>
        <member name="T:Nez.AI.GOAP.Action`1">
            <summary>
            convenince Action subclass with a typed context. This is useful when an Action requires validation so that it has some way to get
            the data it needs to do the validation.
            </summary>
        </member>
        <member name="T:Nez.AI.GOAP.Agent">
            <summary>
            Agent provides a simple and concise way to use the planner. It is not necessary to use at all since it is just a convenince wrapper
            around the ActionPlanner making it easier to get plans and store the results.
            </summary>
        </member>
        <member name="M:Nez.AI.GOAP.Agent.getWorldState">
            <summary>
            current WorldState
            </summary>
            <returns>The world state.</returns>
        </member>
        <member name="M:Nez.AI.GOAP.Agent.getGoalState">
            <summary>
            the goal state that the agent wants to achieve
            </summary>
            <returns>The goal state.</returns>
        </member>
        <member name="F:Nez.AI.GOAP.AStarNode.worldState">
            <summary>
            The state of the world at this node.
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.AStarNode.costSoFar">
            <summary>
            The cost so far.
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.AStarNode.heuristicCost">
            <summary>
            The heuristic for remaining cost (don't overestimate!)
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.AStarNode.costSoFarAndHeuristicCost">
            <summary>
            costSoFar + heuristicCost (g+h) combined.
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.AStarNode.action">
            <summary>
            the Action associated with this node
            </summary>
        </member>
        <member name="M:Nez.AI.GOAP.AStar.plan(Nez.AI.GOAP.ActionPlanner,Nez.AI.GOAP.WorldState,Nez.AI.GOAP.WorldState,System.Collections.Generic.List{Nez.AI.GOAP.AStarNode})">
            <summary>
            Make a plan of actions that will reach desired world state
            </summary>
            <param name="ap">Ap.</param>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
            <param name="storage">Storage.</param>
        </member>
        <member name="M:Nez.AI.GOAP.AStar.reconstructPlan(Nez.AI.GOAP.AStarNode,System.Collections.Generic.List{Nez.AI.GOAP.AStarNode})">
            <summary>
            internal function to reconstruct the plan by tracing from last node to initial node
            </summary>
            <returns>The plan.</returns>
            <param name="goalnode">Goalnode.</param>
        </member>
        <member name="M:Nez.AI.GOAP.AStar.calculateHeuristic(Nez.AI.GOAP.WorldState,Nez.AI.GOAP.WorldState)">
            <summary>
            This is our heuristic: estimate for remaining distance is the nr of mismatched atoms that matter.
            </summary>
            <returns>The heuristic.</returns>
            <param name="fr">Fr.</param>
            <param name="to">To.</param>
        </member>
        <member name="F:Nez.AI.GOAP.WorldState.values">
            <summary>
            we use a bitmask shifting on the condition index to flip bits
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.WorldState.dontCare">
            <summary>
            bitmask used to explicitly state false. We need a separate store for negatives because the absense of a value doesnt necessarily mean
            it is false.
            </summary>
        </member>
        <member name="F:Nez.AI.GOAP.WorldState.planner">
            <summary>
            required so that we can get the condition index from the string name
            </summary>
        </member>
        <member name="M:Nez.AI.GOAP.WorldState.describe(Nez.AI.GOAP.ActionPlanner)">
            <summary>
            for debugging purposes. Provides a human readable string of all the preconditions.
            </summary>
            <param name="planner">Planner.</param>
        </member>
        <member name="T:Nez.AI.Pathfinding.IAstarGraph`1">
            <summary>
            interface for a graph that can be fed to the AstarPathfinder.search method
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.IAstarGraph`1.getNeighbors(`0)">
            <summary>
            The getNeighbors method should return any neighbor nodes that can be reached from the passed in node
            </summary>
            <returns>The neighbors.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.IAstarGraph`1.cost(`0,`0)">
            <summary>
            calculates the cost to get from 'from' to 'to'
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.IAstarGraph`1.heuristic(`0,`0)">
            <summary>
            calculates the heuristic (estimate) to get from 'node' to 'goal'. See WeightedGridGraph for the common Manhatten method.
            </summary>
            <param name="node">Node.</param>
            <param name="goal">Goal.</param>
        </member>
        <member name="T:Nez.AI.Pathfinding.BreadthFirstPathfinder">
            <summary>
            calculates paths given an IUnweightedGraph and start/goal positions
            </summary>
        </member>
        <member name="T:Nez.AI.Pathfinding.AstarGridGraph">
            <summary>
            basic static grid graph for use with A*. Add walls to the walls HashSet and weighted nodes to the weightedNodes HashSet. This provides
            a very simple grid graph for A* with just two weights: defaultWeight and weightedNodeWeight.
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.AstarGridGraph.#ctor(Nez.Tiled.TiledTileLayer)">
            <summary>
            creates a WeightedGridGraph from a TiledTileLayer. Present tile are walls and empty tiles are passable.
            </summary>
            <param name="tiledLayer">Tiled layer.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.AstarGridGraph.isNodeInBounds(Microsoft.Xna.Framework.Point)">
            <summary>
            ensures the node is in the bounds of the grid graph
            </summary>
            <returns><c>true</c>, if node in bounds was ised, <c>false</c> otherwise.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.AstarGridGraph.isNodePassable(Microsoft.Xna.Framework.Point)">
            <summary>
            checks if the node is passable. Walls are impassable.
            </summary>
            <returns><c>true</c>, if node passable was ised, <c>false</c> otherwise.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.AstarGridGraph.search(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            convenience shortcut for calling AStarPathfinder.search
            </summary>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
        </member>
        <member name="T:Nez.AI.Pathfinding.IUnweightedGraph`1">
            <summary>
            interface for a graph that can be fed to the BreadthFirstPathfinder.search method
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.IUnweightedGraph`1.getNeighbors(`0)">
            <summary>
            The getNeighbors method should return any neighbor nodes that can be reached from the passed in node.
            </summary>
            <returns>The neighbors.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="T:Nez.AI.Pathfinding.AStarPathfinder">
            <summary>
            calculates paths given an IAstarGraph and start/goal positions
            </summary>
        </member>
        <member name="T:Nez.AI.Pathfinding.AStarPathfinder.AStarNode`1">
            <summary>
            wraps up the raw data in a small class with the extra fields the PriorityQueue requires
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.AStarPathfinder.search``1(Nez.AI.Pathfinding.IAstarGraph{``0},``0,``0)">
            <summary>
            gets a path from start to goal if possible. If no path is found null is returned.
            </summary>
            <param name="graph">Graph.</param>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.AI.Pathfinding.AStarPathfinder.recontructPath``1(System.Collections.Generic.Dictionary{``0,``0},``0,``0)">
            <summary>
            reconstructs a path from the cameFrom Dictionary
            </summary>
            <returns>The path.</returns>
            <param name="cameFrom">Came from.</param>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Nez.AI.Pathfinding.UnweightedGraph`1">
            <summary>
            basic implementation of an UnweightedGraph. All edges are cached. This type of graph is best suited for non-grid based graphs.
            Any nodes added as edges must also have an entry as the key in the edges Dictionary.
            </summary>
        </member>
        <member name="T:Nez.AI.Pathfinding.UnweightedGridGraph">
            <summary>
            basic unweighted grid graph for use with the BreadthFirstPathfinder
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.UnweightedGridGraph.search(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            convenience shortcut for clling BreadthFirstPathfinder.search
            </summary>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
        </member>
        <member name="T:Nez.AI.Pathfinding.WeightedPathfinder">
            <summary>
            calculates paths given an IWeightedGraph and start/goal positions
            </summary>
        </member>
        <member name="T:Nez.AI.Pathfinding.WeightedPathfinder.WeightedNode`1">
            <summary>
            wraps up the raw data in a small class with the extra fields the PriorityQueue requires
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.WeightedPathfinder.search``1(Nez.AI.Pathfinding.IWeightedGraph{``0},``0,``0)">
            <summary>
            gets a path from start to goal if possible. If no path is found null is returned.
            </summary>
            <param name="graph">Graph.</param>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.AI.Pathfinding.WeightedPathfinder.recontructPath``1(System.Collections.Generic.Dictionary{``0,``0},``0,``0)">
            <summary>
            reconstructs a path from the cameFrom Dictionary
            </summary>
            <returns>The path.</returns>
            <param name="cameFrom">Came from.</param>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:Nez.AI.Pathfinding.IWeightedGraph`1">
            <summary>
            interface for a graph that can be fed to the DijkstraPathfinder.search method
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.IWeightedGraph`1.getNeighbors(`0)">
            <summary>
            The getNeighbors method should return any neighbor nodes that can be reached from the passed in node
            </summary>
            <returns>The neighbors.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.IWeightedGraph`1.cost(`0,`0)">
            <summary>
            calculates the cost to get from 'from' to 'to'
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="T:Nez.AI.Pathfinding.WeightedGridGraph">
            <summary>
            basic grid graph with support for one type of weighted node
            </summary>
        </member>
        <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.#ctor(Nez.Tiled.TiledTileLayer)">
            <summary>
            creates a WeightedGridGraph from a TiledTileLayer. Present tile are walls and empty tiles are passable.
            </summary>
            <param name="tiledLayer">Tiled layer.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.isNodeInBounds(Microsoft.Xna.Framework.Point)">
            <summary>
            ensures the node is in the bounds of the grid graph
            </summary>
            <returns><c>true</c>, if node in bounds was ised, <c>false</c> otherwise.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.isNodePassable(Microsoft.Xna.Framework.Point)">
            <summary>
            checks if the node is passable. Walls are impassable.
            </summary>
            <returns><c>true</c>, if node passable was ised, <c>false</c> otherwise.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.search(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            convenience shortcut for calling AStarPathfinder.search
            </summary>
            <param name="start">Start.</param>
            <param name="goal">Goal.</param>
        </member>
        <member name="P:Nez.ReflectionEffect.reflectionIntensity">
            <summary>
            0 - 1 range. Intensity of the reflection where 0 is none and 1 is full reflected
            </summary>
            <value>The reflection intensity.</value>
        </member>
        <member name="P:Nez.ReflectionEffect.normalMagnitude">
            <summary>
            magnitude of the normal map contribution to the UV offset of the sampled RenderTarget. Default is 0.05. Very small numbers work best.
            </summary>
            <value>The normal magnitude.</value>
        </member>
        <member name="P:Nez.ReflectionEffect.normalMap">
            <summary>
            optional normal map used to displace/refract the UV of the sampled RenderTarget.
            </summary>
            <value>The normal map.</value>
        </member>
        <member name="P:Nez.ReflectionEffect.renderTexture">
            <summary>
            the render textured used for the reflections
            </summary>
            <value>The render texture.</value>
        </member>
        <member name="P:Nez.SepiaEffect.sepiaTone">
            <summary>
            multiplied by the grayscale value for the final output. Defaults to 1.2f, 1.0f, 0.8f
            </summary>
            <value>The sepia tone.</value>
        </member>
        <member name="P:Nez.WaterReflectionEffect.sparkleIntensity">
            <summary>
            defaults to 0.015. Waves are calculated by sampling the normal map twice. Any values generated that are sparkleIntensity greater
            than the actual uv value at the place of sampling will be colored sparkleColor.
            </summary>
            <value>The sparkle intensity.</value>
        </member>
        <member name="P:Nez.WaterReflectionEffect.sparkleColor">
            <summary>
            the color for the sparkly wave peaks
            </summary>
            <value>The color of the sparkle.</value>
        </member>
        <member name="P:Nez.WaterReflectionEffect.screenSpaceVerticalOffset">
            <summary>
            position in screen space of the top of the water plane
            </summary>
            <value>The screen space vertical offset.</value>
        </member>
        <member name="P:Nez.WaterReflectionEffect.perspectiveCorrectionIntensity">
            <summary>
            defaults to 0.3. intensity of the perspective correction
            </summary>
            <value>The perspective correction intensity.</value>
        </member>
        <member name="P:Nez.WaterReflectionEffect.firstDisplacementSpeed">
            <summary>
            defaults to 2. speed that the first displacment/normal uv is scrolled
            </summary>
            <value>The first displacement speed.</value>
        </member>
        <member name="P:Nez.WaterReflectionEffect.secondDisplacementSpeed">
            <summary>
            defaults to 6. speed that the second displacment/normal uv is scrolled
            </summary>
            <value>The second displacement speed.</value>
        </member>
        <member name="P:Nez.WaterReflectionEffect.secondDisplacementScale">
            <summary>
            defaults to 3. the normal map is sampled twice then combined. The 2nd sampling is scaled by this value.
            </summary>
            <value>The second displacement scale.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Nez.WaterReflectionPlane" -->
        <member name="T:Nez.ReflectionMaterial">
            <summary>
            used in conjunction with the ReflectionRenderer
            </summary>
        </member>
        <member name="T:Nez.WaterReflectionMaterial">
            <summary>
            used by the WaterReflectionPlane
            </summary>
        </member>
        <member name="F:Nez.WaterReflectionMaterial._renderTarget">
            <summary>
            we store a reference to the RenderTarget so we can update the Effect when it changes
            </summary>
        </member>
        <member name="F:Nez.WaterReflectionMaterial._renderTargetBinding">
            <summary>
            cache the array so we dont have to recreate it every frame
            </summary>
        </member>
        <member name="T:Nez.ReflectionRenderer">
            <summary>
            assists in creating a mirror effect. To use the ReflectionRenderer do the following:
            - call createAndSetupScene being sure to pass in a renderOrder BEFORE the renderer that contains your reflective surface.
            - reflectableObjectRenderLayers should contain all the renderLayers that contain objects that you want reflected
            - create a ReflectionMaterial which you will use to render your reflective surfaces. Note that your reflective
                surfaces should NOT be rendered by the ReflectionRenderer! It needs to create a RenderTexture with just the objects to reflect.
            - you can optionally set a normal map on the ReflectionEffect for a refraction effect
            - move the ReflectionRenderer.camera around to get the desired offset for your reflections. You can also change the zoom of the Camera.
            </summary>
        </member>
        <member name="T:Nez.GraphicsResource">
            <summary>
            this class exists only so that we can sneak the Batcher through and have it work just like SpriteBatch with regard to resource handling.
            </summary>
        </member>
        <member name="M:Nez.GraphicsResource.Dispose(System.Boolean)">
            <summary>
            The method that derived classes should override to implement disposing of managed and native resources.
            </summary>
            <param name="disposing">True if managed objects should be disposed.</param>
            <remarks>Native resources should always be released regardless of the value of the disposing parameter.</remarks>
        </member>
        <member name="M:Nez.GraphicsDeviceExt.setRenderTarget(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            sets the RenderTarget without allocating a RenderTargetBinding array.
            </summary>
            <param name="self">Self.</param>
            <param name="renderTarget">Render target.</param>
        </member>
        <member name="F:Nez.NezSpriteFont._transformationMatrix">
            <summary>
            this sucker gets used a lot so we cache it to avoid having to create it every frame
            </summary>
        </member>
        <member name="M:Nez.NezSpriteFont.measureString(System.String)">
            <summary>
            Returns the size of a string when rendered in this font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size, in pixels, of 'text' when rendered in
            this font.</returns>
        </member>
        <member name="M:Nez.NezSpriteFont.measureString(System.Text.StringBuilder)">
            <summary>
            Returns the size of the contents of a StringBuilder when
            rendered in this font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size, in pixels, of 'text' when rendered in
            this font.</returns>
        </member>
        <member name="M:Nez.NezSpriteFont.tryGetFontRegionForChar(System.Char,Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph@,System.Boolean)">
            <summary>
            gets the BitmapFontRegion for the given char optionally substituting the default region if it isnt present.
            </summary>
            <returns><c>true</c>, if get font region for char was tryed, <c>false</c> otherwise.</returns>
            <param name="c">C.</param>
            <param name="fontRegion">Font region.</param>
            <param name="useDefaultRegionIfNotPresent">If set to <c>true</c> use default region if not present.</param>
        </member>
        <member name="M:Nez.NezSpriteFont.hasCharacter(System.Char)">
            <summary>
            checks to see if a BitmapFontRegion exists for the char
            </summary>
            <returns><c>true</c>, if region exists for char was fonted, <c>false</c> otherwise.</returns>
            <param name="c">C.</param>
        </member>
        <member name="P:Nez.IFont.lineSpacing">
            <summary>
            line height of the font
            </summary>
            <value>The height of the line.</value>
        </member>
        <member name="M:Nez.IFont.measureString(System.String)">
            <summary>
            returns the size in pixels of text when rendered in this font
            </summary>
            <returns>The string.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.IFont.measureString(System.Text.StringBuilder)">
            <summary>
            returns the size in pixels of text when rendered in this font
            </summary>
            <returns>The string.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.IFont.hasCharacter(System.Char)">
            <summary>
            returns true if the character exists in the font or false if it does not
            </summary>
            <returns><c>true</c>, if character was hased, <c>false</c> otherwise.</returns>
            <param name="c">C.</param>
        </member>
        <member name="T:Nez.FontCharacterSource">
            <summary>
            helper that wraps either a string or StringBuilder and provides a common API to read them for measuring/drawing
            </summary>
        </member>
        <member name="T:Nez.BatcherIFontExt">
            <summary>
            provides the full SpriteFont assortment of drawString methods
            </summary>
        </member>
        <member name="M:Nez.BatcherIFontExt.drawString(Nez.Batcher,Nez.IFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="batcher">Batcher.</param>
            <param name="font">Font.</param>
            <param name="text">Text.</param>
            <param name="position">Position.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.BatcherIFontExt.drawString(Nez.Batcher,Nez.IFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="batcher">Batcher.</param>
            <param name="font">Font.</param>
            <param name="text">Text.</param>
            <param name="position">Position.</param>
            <param name="color">Color.</param>
            <param name="rotation">Rotation.</param>
            <param name="origin">Origin.</param>
            <param name="scale">Scale.</param>
            <param name="effects">Effects.</param>
            <param name="layerDepth">Layer depth.</param>
        </member>
        <member name="M:Nez.BatcherIFontExt.drawString(Nez.Batcher,Nez.IFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="batcher">Batcher.</param>
            <param name="font">Font.</param>
            <param name="text">Text.</param>
            <param name="position">Position.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.BatcherIFontExt.drawString(Nez.Batcher,Nez.IFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="batcher">Batcher.</param>
            <param name="font">Font.</param>
            <param name="text">Text.</param>
            <param name="position">Position.</param>
            <param name="color">Color.</param>
            <param name="rotation">Rotation.</param>
            <param name="origin">Origin.</param>
            <param name="scale">Scale.</param>
            <param name="effects">Effects.</param>
            <param name="layerDepth">Layer depth.</param>
        </member>
        <member name="M:Nez.BatcherIFontExt.drawString(Nez.Batcher,Nez.IFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="batcher">Batcher.</param>
            <param name="font">Font.</param>
            <param name="text">Text.</param>
            <param name="position">Position.</param>
            <param name="color">Color.</param>
            <param name="rotation">Rotation.</param>
            <param name="origin">Origin.</param>
            <param name="scale">Scale.</param>
            <param name="effects">Effects.</param>
            <param name="layerDepth">Layer depth.</param>
        </member>
        <member name="M:Nez.BatcherIFontExt.drawString(Nez.Batcher,Nez.IFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="batcher">Batcher.</param>
            <param name="font">Font.</param>
            <param name="text">Text.</param>
            <param name="position">Position.</param>
            <param name="color">Color.</param>
            <param name="rotation">Rotation.</param>
            <param name="origin">Origin.</param>
            <param name="scale">Scale.</param>
            <param name="effects">Effects.</param>
            <param name="layerDepth">Layer depth.</param>
        </member>
        <member name="T:Nez.BatcherBitmapFontExt">
            <summary>
            provides the full SpriteFont assortment of drawString methods
            </summary>
        </member>
        <member name="M:Nez.BatcherBitmapFontExt.drawString(Nez.Batcher,Nez.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Nez.BatcherBitmapFontExt.drawString(Nez.Batcher,Nez.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Nez.BatcherBitmapFontExt.drawString(Nez.Batcher,Nez.BitmapFonts.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Nez.BatcherBitmapFontExt.drawString(Nez.Batcher,Nez.BitmapFonts.BitmapFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Nez.BatcherBitmapFontExt.drawString(Nez.Batcher,Nez.BitmapFonts.BitmapFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Nez.BatcherBitmapFontExt.drawString(Nez.Batcher,Nez.BitmapFonts.BitmapFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="T:Nez.BatcherSpriteFontExt">
            <summary>
            helper methods for drawing text with NezSpriteFonts
            </summary>
        </member>
        <member name="T:Nez.TextureWipeTransition">
            <summary>
            uses a texture (transitionTexture) to control a wipe animation. the blue channel of the texture determines if color is shown or the
            previous scenes render. Sample textures are 
            based on: https://www.youtube.com/watch?v=LnAoD7hgDxw
            </summary>
        </member>
        <member name="P:Nez.TextureWipeTransition.opacity">
            <summary>
            opacity of the wipe
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="P:Nez.TextureWipeTransition.color">
            <summary>
            color to wipe to
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Nez.TextureWipeTransition.transitionTexture">
            <summary>
            texture used for the transition. During the transition whenever the blue channel of this texture is less than progress (which is ticked
            from 0 - 1) the color will be used else the previous scene render will be used
            </summary>
            <value>The transition texture.</value>
        </member>
        <member name="P:Nez.TextureWipeTransition.useRedGreenChannelsForDistortion">
            <summary>
            if true, the red and green channels of the transitionTexture will be used to offset the texture lookup during the transition
            </summary>
            <value><c>true</c> if use red green channels for distortion; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Nez.TextureWipeTransition.duration">
            <summary>
            duration for the wind transition
            </summary>
        </member>
        <member name="F:Nez.TextureWipeTransition.easeType">
            <summary>
            ease equation to use for the animation
            </summary>
        </member>
        <member name="M:Nez.ArrayExt.contains``1(``0[],``0)">
            <summary>
            checks to see if value exists in source
            </summary>
            <param name="source">Source.</param>
            <param name="value">Value.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.IEnumerableExtensions.IEnumerableExt.count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Jon Skeet's excellent reimplementation of LINQ Count.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <param name="source">The source IEnumerable.</param>
            <returns>The number of items in the source.</returns>
        </member>
        <member name="M:Nez.ListExt.shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            shuffles the list in place
            </summary>
            <param name="list">List.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.ListExt.addIfNotPresent``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            returns false if the item is already in the List and true if it was successfully added.
            </summary>
            <returns>The if not present.</returns>
            <param name="list">List.</param>
            <param name="item">Item.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.ListExt.lastItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            returns the last item in the list. List should have at least one item.
            </summary>
            <param name="list">List.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.ListExt.randomItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            gets a random item from the list. Does not empty check the list!
            </summary>
            <returns>The item.</returns>
            <param name="list">List.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.ListExt.randomItems``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            gets random items from the list. Does not empty check the list or verify that list count is greater than item count! The returned List can be put back in the pool via ListPool.free.
            </summary>
            <returns>The item.</returns>
            <param name="list">List.</param>
            <param name="itemCount">The number of random items to return from the list.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.ColorExt.subtract(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            first - second
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
        </member>
        <member name="M:Nez.ColorExt.lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            linearly interpolates Color from - to
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.ColorExt.lerp(Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,Microsoft.Xna.Framework.Color@,System.Single)">
            <summary>
            linearly interpolates Color from - to
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.RectangleExt.getSide(Microsoft.Xna.Framework.Rectangle,Nez.Edge)">
            <summary>
            gets the position of the specified side
            </summary>
            <returns>The side.</returns>
            <param name="edge">Side.</param>
        </member>
        <member name="M:Nez.RectangleExt.getRectEdgePortion(Microsoft.Xna.Framework.Rectangle,Nez.Edge,System.Int32)">
            <summary>
            gets a portion of the Rectangle with a width/height of size that is on the Edge of the Rectangle but still contained within it.
            </summary>
            <returns>The rect edge portion.</returns>
            <param name="rect">Rect.</param>
            <param name="edge">Edge.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Nez.RectangleExt.fromFloats(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            returns a rectangle from the passed in floats
            </summary>
            <returns>The floats.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.RectangleExt.fromMinMaxPoints(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            creates a Rectangle given min/max points (top-left, bottom-right points)
            </summary>
            <returns>The minimum max points.</returns>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.RectangleExt.union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            calculates the union of the two Rectangles. The result will be a rectangle that encompasses the other two.
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
            <param name="result">Result.</param>
        </member>
        <member name="M:Nez.RectangleExt.union(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Point@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Update first to be the union of first and point
            </summary>
            <param name="first">First.</param>
            <param name="point">Point.</param>
            <param name="result">Result.</param>
        </member>
        <member name="M:Nez.RectangleExt.boundsFromPolygonPoints(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            given the points of a polygon calculates the bounds
            </summary>
            <returns>The from polygon points.</returns>
            <param name="points">Points.</param>
        </member>
        <member name="M:Nez.RectangleExt.clone(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            clones and returns a new Rectangle with the same data as the current rectangle
            </summary>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Nez.RectangleExt.scale(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Vector2)">
            <summary>
            scales the rect
            </summary>
            <param name="rect">Rect.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:Nez.RectangleExt.getSweptBroadphaseBounds(Microsoft.Xna.Framework.Rectangle@,System.Single,System.Single)">
            <summary>
            returns a Bounds the spans the current bounds and the provided delta positions
            </summary>
            <returns>The swept broadphase box.</returns>
            <param name="velocityX">Velocity x.</param>
            <param name="velocityY">Velocity y.</param>
        </member>
        <member name="M:Nez.RectangleExt.getSweptBroadphaseBounds(Microsoft.Xna.Framework.Rectangle@,System.Int32,System.Int32)">
            <summary>
            returns a Bounds the spans the current bounds and the provided delta positions
            </summary>
            <returns>The swept broadphase box.</returns>
            <param name="velocityX">Velocity x.</param>
            <param name="velocityY">Velocity y.</param>
        </member>
        <member name="M:Nez.RectangleExt.intersect(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            returns true if rect1 intersects rect2
            </summary>
            <param name="value1">Value1.</param>
            <param name="value2">Value2.</param>
        </member>
        <member name="M:Nez.RectangleExt.collisionCheck(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@,System.Single@,System.Single@)">
            <summary>
            returns true if the boxes are colliding
            moveX and moveY will return the movement that b1 must move to avoid the collision
            </summary>
            <param name="other">Other.</param>
            <param name="moveX">Move x.</param>
            <param name="moveY">Move y.</param>
        </member>
        <member name="M:Nez.RectangleExt.getIntersectionDepth(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            Calculates the signed depth of intersection between two rectangles.
            </summary>
            <returns>
            The amount of overlap between two intersecting rectangles. These depth values can be negative depending on which sides the rectangles
            intersect. This allows callers to determine the correct direction to push objects in order to resolve collisions.
            If the rectangles are not intersecting, Vector2.Zero is returned.
            </returns>
        </member>
        <member name="M:Nez.RectangleExt.getClosestPointOnRectangleToPoint(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Vector2)">
            <summary>
            returns the closest point that is in or on the Rectangle to the given point
            </summary>
            <returns>The closest point on rectangle to point.</returns>
            <param name="rect">Rect.</param>
            <param name="point">Point.</param>
        </member>
        <member name="M:Nez.RectangleExt.getClosestPointOnRectangleBorderToPoint(Microsoft.Xna.Framework.Rectangle@,Microsoft.Xna.Framework.Vector2)">
            <summary>
            gets the closest point that is on the rectangle border to the given point
            </summary>
            <returns>The closest point on rectangle border to point.</returns>
            <param name="rect">Rect.</param>
            <param name="point">Point.</param>
        </member>
        <member name="M:Nez.RectangleExt.getCenter(Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            gets the center point of the rectangle as a Vector2
            </summary>
            <returns>The center.</returns>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Nez.RectangleExt.getCenter(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            gets the center point of the rectangle as a Vector2
            </summary>
            <returns>The center.</returns>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Nez.RectangleExt.getHalfSize(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            gets the half size of the rect
            </summary>
            <returns>The half size.</returns>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Nez.RectangleExt.getMax(Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            gets the max point of the rectangle, the bottom-right corner
            </summary>
            <returns>The max.</returns>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Nez.RectangleExt.getPosition(Microsoft.Xna.Framework.Rectangle@)">
            <summary>
            gets the position of the rectangle as a Vector2
            </summary>
            <returns>The position.</returns>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Nez.Vector2Ext.normalize(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            temporary workaround to Vector2.Normalize screwing up the 0,0 vector
            </summary>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Nez.Vector2Ext.normalize(Microsoft.Xna.Framework.Vector2)">
            <summary>
            temporary workaround to Vector2.Normalize screwing up the 0,0 vector
            </summary>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Nez.Vector2Ext.round(Microsoft.Xna.Framework.Vector2)">
            <summary>
            rounds the x and y values
            </summary>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Nez.Vector2Ext.round(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            rounds the x and y values in place
            </summary>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Nez.Vector2Ext.halfVector">
            <summary>
            returns a 0.5, 0.5 vector
            </summary>
            <returns>The vector.</returns>
        </member>
        <member name="M:Nez.Vector2Ext.cross(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            compute the 2d pseudo cross product Dot( Perp( u ), v )
            </summary>
            <param name="u">U.</param>
            <param name="v">V.</param>
        </member>
        <member name="M:Nez.Vector2Ext.perpendicular(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            returns the vector perpendicular to the passed in vectors
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
        </member>
        <member name="M:Nez.Vector2Ext.perpendicular(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            returns the vector perpendicular to the passed in vectors
            </summary>
            <param name="first">First.</param>
            <param name="second">Second.</param>
        </member>
        <member name="M:Nez.Vector2Ext.perpendicular(Microsoft.Xna.Framework.Vector2)">
            <summary>
            flips the x/y values and inverts the y to get the perpendicular
            </summary>
            <param name="original">Original.</param>
        </member>
        <member name="M:Nez.Vector2Ext.angle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            returns the angle between the two vectors in degrees
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Nez.Vector2Ext.angleBetween(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            returns the angle between left and right with self being the center point in degrees
            </summary>
            <param name="self">Self.</param>
            <param name="left">V left.</param>
            <param name="right">V right.</param>
        </member>
        <member name="M:Nez.Vector2Ext.getRayIntersection(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            given two lines (ab and cd) finds the intersection point
            </summary>
            <returns>The ray intersection.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="c">C.</param>
            <param name="d">D.</param>
        </member>
        <member name="M:Nez.Vector2Ext.roundToPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            rounds and converts a Vector2 to a Point
            </summary>
            <returns>The point.</returns>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Nez.Vector2Ext.toVector3(Microsoft.Xna.Framework.Vector2)">
            <summary>
            converts a Vector2 to a Vector3 with a 0 z-position
            </summary>
            <returns>The vector3.</returns>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Nez.Vector2Ext.isTriangleCCW(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            checks if a triangle is CCW or CW
            </summary>
            <returns><c>true</c>, if triangle ccw was ised, <c>false</c> otherwise.</returns>
            <param name="a">The alpha component.</param>
            <param name="center">Center.</param>
            <param name="c">C.</param>
        </member>
        <member name="M:Nez.Vector2Ext.transform(Microsoft.Xna.Framework.Vector2,Nez.Matrix2D)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:Nez.Vector2Ext.transform(Microsoft.Xna.Framework.Vector2@,Nez.Matrix2D@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector2"/> as an output parameter.</param>
        </member>
        <member name="M:Nez.Vector2Ext.transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Nez.Matrix2D@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
            <summary>
            Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="sourceIndex">The starting index of transformation in the source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
            <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2"/> should be written.</param>
            <param name="length">The number of vectors to be transformed.</param>
        </member>
        <member name="M:Nez.Vector2Ext.transform(Microsoft.Xna.Framework.Vector2[],Nez.Matrix2D@,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix"/> and places the results in an another array.
            </summary>
            <param name="sourceArray">Source array.</param>
            <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="destinationArray">Destination array.</param>
        </member>
        <member name="M:Nez.SpriteBatchExt.drawPoints(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a list of connected points
            </summary>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:Nez.SpriteBatchExt.drawPoints(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Draws a list of connected points
            </summary>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
        </member>
        <member name="M:Nez.SpriteBatchExt.drawPoints(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Color,System.Boolean,System.Single)">
            <summary>
            Draws a list of connected points
            </summary>
            <param name="points">The points to connect with lines</param>
            <param name="color">The color to use</param>
            <param name="thickness">The thickness of the lines</param>
            <param name="closePoly">If set to <c>true</c> the first and last points will be connected.</param>
        </member>
        <member name="T:Nez.InspectableAttribute">
            <summary>
            Attribute that is used to indicate that the field/property should be present in the inspector
            </summary>
        </member>
        <member name="T:Nez.RangeAttribute">
            <summary>
            Range attribute.
            </summary>
        </member>
        <member name="T:Nez.CustomInspectorAttribute">
            <summary>
            putting this attribute on a class and specifying a subclass of Inspector lets you create custom inspectors for any type. When
            the Inspector finds a field/property of the type with the attribute on it the inspectorType will be instantiated and used.
            Inspectors are only active in DEBUG builds so make sure to wrap your custom inspector subclass in #if DEBUG/#endif.
            </summary>
        </member>
        <member name="T:Nez.InspectorCallableAttribute">
            <summary>
            adding this to a method will expose it to the inspector if it has 0 params or 1 param of a supported type: int, float, string
            and bool are currently supported.
            </summary>
        </member>
        <member name="T:Nez.ScissorStack">
            <summary>
            A stack of Rectangle objects to be used for clipping via GraphicsDevice.ScissorRectangle. When a new
            Rectangle is pushed onto the stack, it will be merged with the current top of stack.The minimum area of overlap is then set as
            the real top of the stack.
            </summary>
        </member>
        <member name="M:Nez.ScissorStack.popScissors">
            <summary>
            Pops the current scissor rectangle from the stack and sets the new scissor area to the new top of stack rectangle.
            Any drawing should be flushed before popping scissors.
            </summary>
            <returns>The scissors.</returns>
        </member>
        <member name="M:Nez.ScissorStack.calculateScissors(Nez.Camera,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Calculates a screen space scissor rectangle using the given Camera. If the Camera is null than the scissor will
            be calculated only with the batchTransform
            </summary>
            <returns>The scissors.</returns>
            <param name="camera">Camera.</param>
            <param name="batchTransform">Batch transform.</param>
            <param name="scissor">Area.</param>
        </member>
        <member name="M:Nez.ScissorStack.calculateScissors(Nez.Camera,Nez.Matrix2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Calculates a screen space scissor rectangle using the given Camera. If the Camera is null than the scissor will
            be calculated only with the batchTransform
            </summary>
            <returns>The scissors.</returns>
            <param name="camera">Camera.</param>
            <param name="batchTransform">Batch transform.</param>
            <param name="scissor">Area.</param>
        </member>
        <member name="T:Nez.TooltipAttribute">
            <summary>
            displays a tooltip when hovering over the label of any inspectable elements
            </summary>
        </member>
        <member name="T:Nez.TouchInput">
            <summary>
            to enable touch input you must first call enableTouchSupport()
            </summary>
        </member>
        <member name="T:Nez.IUpdatableManager">
            <summary>
            global manager that can be added to Core
            </summary>
        </member>
        <member name="M:Nez.IUpdatableManager.update">
            <summary>
            update is called just before Scene.update each frame
            </summary>
        </member>
        <member name="T:Nez.FastList`1">
            <summary>
            very basic wrapper around an array that auto-expands it when it reaches capacity. Note that when iterating it should be done
            like this accessing the buffer directly but using the FastList.length field:
            
            for( var i = 0; i &lt;= list.length; i++ )
            	var item = list.buffer[i];
            </summary>
        </member>
        <member name="F:Nez.FastList`1.buffer">
            <summary>
            direct access to the backing buffer. Do not use buffer.Length! Use FastList.length
            </summary>
        </member>
        <member name="F:Nez.FastList`1.length">
            <summary>
            direct access to the length of the filled items in the buffer. Do not change.
            </summary>
        </member>
        <member name="P:Nez.FastList`1.Item(System.Int32)">
            <summary>
            provided for ease of access though it is recommended to just access the buffer directly.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Nez.FastList`1.clear">
            <summary>
            clears the list and nulls out all items in the buffer
            </summary>
        </member>
        <member name="M:Nez.FastList`1.reset">
            <summary>
            works just like clear except it does not null our all the items in the buffer. Useful when dealing with structs.
            </summary>
        </member>
        <member name="M:Nez.FastList`1.add(`0)">
            <summary>
            adds the item to the list
            </summary>
        </member>
        <member name="M:Nez.FastList`1.remove(`0)">
            <summary>
            removes the item from the list
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Nez.FastList`1.removeAt(System.Int32)">
            <summary>
            removes the item at the given index from the list
            </summary>
        </member>
        <member name="M:Nez.FastList`1.removeAtWithSwap(System.Int32)">
            <summary>
            removes the item at the given index from the list but does NOT maintain list order
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Nez.FastList`1.contains(`0)">
            <summary>
            checks to see if item is in the FastList
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Nez.FastList`1.ensureCapacity(System.Int32)">
            <summary>
            if the buffer is at its max more space will be allocated to fit additionalItemCount
            </summary>
        </member>
        <member name="M:Nez.FastList`1.addRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            adds all items from array
            </summary>
            <param name="array">Array.</param>
        </member>
        <member name="M:Nez.FastList`1.sort">
            <summary>
            sorts all items in the buffer up to length
            </summary>
        </member>
        <member name="M:Nez.FastList`1.sort(System.Collections.IComparer)">
            <summary>
            sorts all items in the buffer up to length
            </summary>
        </member>
        <member name="M:Nez.FastList`1.sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            sorts all items in the buffer up to length
            </summary>
        </member>
        <member name="T:Nez.Audio.AudioSource">
            <summary>
            plays a collection of SoundEffects randomly and optionally with random pitch
            </summary>
        </member>
        <member name="M:Nez.Audio.AudioSource.setPitchRange(System.Single,System.Single)">
            <summary>
            if a pitch range is set every time play is called a random pitch will be used
            </summary>
            <returns>The pitch range.</returns>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.Audio.AudioSource.setPanRange(System.Single,System.Single)">
            <summary>
            if a pan range is set every time play is called a random pan will be used
            </summary>
            <returns>The pan range.</returns>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:Nez.Audio.AudioSource.addSoundEffect(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            adds a SoundEffect to the AudioSource
            </summary>
            <returns>The sound effect.</returns>
            <param name="effect">Effect.</param>
        </member>
        <member name="T:Nez.PaletteCyclerEffect">
            <summary>
            retro palette swap/cycle effect. If cycleSpeed is 0 (the default) this works as a plain old palette swap. It should be used with
            a grayscale texture and a paletteTexture that has a 1 pixel height.
            </summary>
        </member>
        <member name="P:Nez.PaletteCyclerEffect.paletteTexture">
            <summary>
            palette lookup texture. Should be a 1D texture with a height of 1 pixel
            </summary>
            <value>The palette texture.</value>
        </member>
        <member name="P:Nez.PaletteCyclerEffect.cycleSpeed">
            <summary>
            gets or sets the cycle speed
            </summary>
            <value>The cycle speed.</value>
        </member>
        <member name="M:Nez.PaletteCyclerEffect.updateTime">
            <summary>
            updates the _time param of the shader if cycleSpeed != 0
            </summary>
            <returns>The time.</returns>
        </member>
        <member name="M:Nez.ObjectExt.tween(System.Object,System.String,System.Int32,System.Single)">
            <summary>
            tweens an int field or property
            </summary>
        </member>
        <member name="M:Nez.ObjectExt.tween(System.Object,System.String,System.Single,System.Single)">
            <summary>
            tweens a float field or property
            </summary>
        </member>
        <member name="M:Nez.ObjectExt.tween(System.Object,System.String,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            tweens a Color field or property
            </summary>
        </member>
        <member name="M:Nez.ObjectExt.tween(System.Object,System.String,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            tweens a Vector2 field or property
            </summary>
        </member>
        <member name="M:Nez.ObjectExt.tween(System.Object,System.String,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            tweens a Vector3 field or property
            </summary>
        </member>
        <member name="T:Nez.MarkupText">
            <summary>
            MarkupText lets you set fonts, textures and conditionals and provide some XML text to render that uses them. You must first
            set the fonts, textures and conditionals before you can use them in your markup.
            
            <![CDATA[
            <markuptext face="RegularFont" color="#ffffff" align="left">
            	<font face="Large" color="#00ff00" scale="3.2,3.2">Lorem Ipsum</font>
            	<p align="right">Some more text <text color='#ff9900'>with color</text> in the middle</p>
            	<p align="center">Images are inlined too <img src="texture" scale="2,2" /></p>
            	<if condition="isTrue"><img src="otherTexture" scale="0.2,0.2" /></if>
            	<p>conditions can be negated as well <if condition="!isTrue">isTrue isnt true<else>isTrue is true</else></if></p>
            </markuptext>
            ]]>
            </summary>
        </member>
        <member name="M:Nez.MarkupText.setText(System.String)">
            <summary>
            sets the text used for the run. Text should be valid XML.
            </summary>
            <returns>The text.</returns>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.MarkupText.setTextWidth(System.Single)">
            <summary>
            sets the width that the run will fill
            </summary>
            <returns>The width.</returns>
            <param name="textWidth">Width.</param>
        </member>
        <member name="M:Nez.MarkupText.setFont(System.String,Nez.IFont)">
            <summary>
            sets a font that can be used in a text tag via the font attribute
            </summary>
            <returns>The font.</returns>
            <param name="name">Name.</param>
            <param name="font">Font.</param>
        </member>
        <member name="M:Nez.MarkupText.setTexture(System.String,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            sets a texture which can be used in an img tag via the source attribute
            </summary>
            <returns>The texture.</returns>
            <param name="name">Name.</param>
            <param name="texture">Texture.</param>
        </member>
        <member name="M:Nez.MarkupText.setConditional(System.String,System.Boolean)">
            <summary>
            sets a conditional which can be used in an if tag with a condition attribute. It is also valid to negate the condition by
            prepending a ! to the name in the if tag
            </summary>
            <returns>The conditional.</returns>
            <param name="name">Name.</param>
            <param name="conditional">Conditional.</param>
        </member>
        <member name="M:Nez.MarkupText.render(Nez.Graphics,Nez.Camera)">
            <summary>
            renders the MarkupText
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Nez.MarkupText.compile">
            <summary>
            compiles the current text to prepare it for rendering
            </summary>
        </member>
        <member name="M:Nez.EdgeExt.isMax(Nez.Edge)">
            <summary>
            returns true if the Edge is Right or Bottom
            </summary>
            <returns>The max.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.EdgeExt.isMin(Nez.Edge)">
            <summary>
            returns true if the Edge is Left or Top
            </summary>
            <returns>The minimum.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.EdgeExt.isHorizontal(Nez.Edge)">
            <summary>
            returns true if the Edge is Right or Left
            </summary>
            <returns>The horizontal.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="M:Nez.EdgeExt.isVertical(Nez.Edge)">
            <summary>
            returns true if the Edge is Top or Bottom
            </summary>
            <returns>The vertical.</returns>
            <param name="self">Self.</param>
        </member>
        <member name="T:Nez.TextRunComponent">
            <summary>
            very basic wrapper around TextRun. Note that the TextRunComponent.compile method should be used not TextRun.compile so that
            the Component data can be passed off to the TextRun.
            </summary>
        </member>
        <member name="M:Nez.TextRunComponent.compile">
            <summary>
            calls through to TextRun.compile and handles marshalling some data between this Component and the underlying TextRun
            </summary>
        </member>
        <member name="T:Nez.TextRun">
            <summary>
            provides a cached run of text for super fast text drawing. Note that this is only appropriate for text that doesnt change often
            and doesnt move.
            </summary>
        </member>
        <member name="P:Nez.TextRun.text">
            <summary>
            text to draw
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Nez.TextRun.horizontalOrigin">
            <summary>
            horizontal alignment of the text
            </summary>
            <value>The horizontal origin.</value>
        </member>
        <member name="P:Nez.TextRun.verticalOrigin">
            <summary>
            vertical alignment of the text
            </summary>
            <value>The vertical origin.</value>
        </member>
        <member name="M:Nez.TextRun.compile">
            <summary>
            compiles the text into raw verts/texture coordinates. This method must be called anytime text or any other properties are
            changed.
            </summary>
        </member>
        <member name="T:Nez.Matrix2D">
            <summary>
            Represents the right-handed 3x3 floating point matrix, which can store translation, scale and rotation information.
            </summary>
        </member>
        <member name="P:Nez.Matrix2D.identity">
            <summary>
            Returns the identity matrix.
            </summary>
        </member>
        <member name="P:Nez.Matrix2D.translation">
            <summary>
            Position stored in this matrix.
            </summary>
        </member>
        <member name="P:Nez.Matrix2D.rotation">
            <summary>
            rotation in radians stored in this matrix
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:Nez.Matrix2D.rotationDegrees">
            <summary>
            rotation in degrees stored in this matrix
            </summary>
            <value>The rotation degrees.</value>
        </member>
        <member name="P:Nez.Matrix2D.scale">
            <summary>
            Scale stored in this matrix.
            </summary>
        </member>
        <member name="M:Nez.Matrix2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a matrix.
            </summary>
        </member>
        <member name="M:Nez.Matrix2D.add(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> which contains sum of two matrixes.
            </summary>
            <param name="matrix1">The first matrix to add.</param>
            <param name="matrix2">The second matrix to add.</param>
            <returns>The result of the matrix addition.</returns>
        </member>
        <member name="M:Nez.Matrix2D.add(Nez.Matrix2D@,Nez.Matrix2D@,Nez.Matrix2D@)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> which contains sum of two matrixes.
            </summary>
            <param name="matrix1">The first matrix to add.</param>
            <param name="matrix2">The second matrix to add.</param>
            <param name="result">The result of the matrix addition as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.createRotation(System.Single)">
            <summary>
            Creates a new rotation <see cref="T:Nez.Matrix2D"/> around Z axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>The rotation <see cref="T:Nez.Matrix2D"/> around Z axis.</returns>
        </member>
        <member name="M:Nez.Matrix2D.createRotation(System.Single,Nez.Matrix2D@)">
            <summary>
            Creates a new rotation <see cref="T:Nez.Matrix2D"/> around Z axis.
            </summary>
            <param name="radians">Angle in radians.</param>
            <param name="result">The rotation <see cref="T:Nez.Matrix2D"/> around Z axis as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.createScale(System.Single)">
            <summary>
            Creates a new scaling <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="scale">Scale value for all three axises.</param>
            <returns>The scaling <see cref="T:Nez.Matrix2D"/>.</returns>
        </member>
        <member name="M:Nez.Matrix2D.createScale(System.Single,Nez.Matrix2D@)">
            <summary>
            Creates a new scaling <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="scale">Scale value for all three axises.</param>
            <param name="result">The scaling <see cref="T:Nez.Matrix2D"/> as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.createScale(System.Single,System.Single)">
            <summary>
            Creates a new scaling <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="xScale">Scale value for X axis.</param>
            <param name="yScale">Scale value for Y axis.</param>
            <returns>The scaling <see cref="T:Nez.Matrix2D"/>.</returns>
        </member>
        <member name="M:Nez.Matrix2D.createScale(System.Single,System.Single,Nez.Matrix2D@)">
            <summary>
            Creates a new scaling <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="xScale">Scale value for X axis.</param>
            <param name="yScale">Scale value for Y axis.</param>
            <param name="result">The scaling <see cref="T:Nez.Matrix2D"/> as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.createScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new scaling <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="scale"><see cref="T:Microsoft.Xna.Framework.Vector2"/> representing x and y scale values.</param>
            <returns>The scaling <see cref="T:Nez.Matrix2D"/>.</returns>
        </member>
        <member name="M:Nez.Matrix2D.createScale(Microsoft.Xna.Framework.Vector2@,Nez.Matrix2D@)">
            <summary>
            Creates a new scaling <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="scale"><see cref="T:Microsoft.Xna.Framework.Vector3"/> representing x,y and z scale values.</param>
            <param name="result">The scaling <see cref="T:Nez.Matrix2D"/> as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.createTranslation(System.Single,System.Single)">
            <summary>
            Creates a new translation <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="xPosition">X coordinate of translation.</param>
            <param name="yPosition">Y coordinate of translation.</param>
            <returns>The translation <see cref="T:Nez.Matrix2D"/>.</returns>
        </member>
        <member name="M:Nez.Matrix2D.createTranslation(Microsoft.Xna.Framework.Vector2@,Nez.Matrix2D@)">
            <summary>
            Creates a new translation <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="position">X,Y and Z coordinates of translation.</param>
            <param name="result">The translation <see cref="T:Nez.Matrix2D"/> as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.createTranslation(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new translation <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="position">X,Y and Z coordinates of translation.</param>
            <returns>The translation <see cref="T:Nez.Matrix2D"/>.</returns>
        </member>
        <member name="M:Nez.Matrix2D.createTranslation(System.Single,System.Single,Nez.Matrix2D@)">
            <summary>
            Creates a new translation <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="xPosition">X coordinate of translation.</param>
            <param name="yPosition">Y coordinate of translation.</param>
            <param name="result">The translation <see cref="T:Nez.Matrix2D"/> as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.divide(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Divides the elements of a <see cref="T:Nez.Matrix2D"/> by the elements of another matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">Divisor <see cref="T:Nez.Matrix2D"/>.</param>
            <returns>The result of dividing the matrix.</returns>
        </member>
        <member name="M:Nez.Matrix2D.divide(Nez.Matrix2D@,Nez.Matrix2D@,Nez.Matrix2D@)">
            <summary>
            Divides the elements of a <see cref="T:Nez.Matrix2D"/> by the elements of another matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">Divisor <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="result">The result of dividing the matrix as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.divide(Nez.Matrix2D,System.Single)">
            <summary>
            Divides the elements of a <see cref="T:Nez.Matrix2D"/> by a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <returns>The result of dividing a matrix by a scalar.</returns>
        </member>
        <member name="M:Nez.Matrix2D.divide(Nez.Matrix2D@,System.Single,Nez.Matrix2D@)">
            <summary>
            Divides the elements of a <see cref="T:Nez.Matrix2D"/> by a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="divider">Divisor scalar.</param>
            <param name="result">The result of dividing a matrix by a scalar as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.lerp(Nez.Matrix2D,Nez.Matrix2D,System.Single)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains linear interpolation of the values in specified matrixes.
            </summary>
            <param name="matrix1">The first <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <returns>>The result of linear interpolation of the specified matrixes.</returns>
        </member>
        <member name="M:Nez.Matrix2D.lerp(Nez.Matrix2D@,Nez.Matrix2D@,System.Single,Nez.Matrix2D@)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains linear interpolation of the values in specified matrixes.
            </summary>
            <param name="matrix1">The first <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="amount">Weighting value(between 0.0 and 1.0).</param>
            <param name="result">The result of linear interpolation of the specified matrixes as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.multiply(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains a multiplication of two matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <returns>Result of the matrix multiplication.</returns>
        </member>
        <member name="M:Nez.Matrix2D.multiply(Nez.Matrix2D@,Nez.Matrix2D@,Nez.Matrix2D@)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains a multiplication of two matrix.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="result">Result of the matrix multiplication as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.multiply(Nez.Matrix2D,System.Single)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains a multiplication of <see cref="T:Nez.Matrix2D"/> and a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <returns>Result of the matrix multiplication with a scalar.</returns>
        </member>
        <member name="M:Nez.Matrix2D.multiply(Nez.Matrix2D@,System.Single,Nez.Matrix2D@)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains a multiplication of <see cref="T:Nez.Matrix2D"/> and a scalar.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="scaleFactor">Scalar value.</param>
            <param name="result">Result of the matrix multiplication with a scalar as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.op_Addition(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Adds two matrixes.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/> on the left of the add sign.</param>
            <param name="matrix2">Source <see cref="T:Nez.Matrix2D"/> on the right of the add sign.</param>
            <returns>Sum of the matrixes.</returns>
        </member>
        <member name="M:Nez.Matrix2D.op_Division(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Divides the elements of a <see cref="T:Nez.Matrix2D"/> by the elements of another <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/> on the left of the div sign.</param>
            <param name="matrix2">Divisor <see cref="T:Nez.Matrix2D"/> on the right of the div sign.</param>
            <returns>The result of dividing the matrixes.</returns>
        </member>
        <member name="M:Nez.Matrix2D.op_Division(Nez.Matrix2D,System.Single)">
            <summary>
            Divides the elements of a <see cref="T:Nez.Matrix2D"/> by a scalar.
            </summary>
            <param name="matrix">Source <see cref="T:Nez.Matrix2D"/> on the left of the div sign.</param>
            <param name="divider">Divisor scalar on the right of the div sign.</param>
            <returns>The result of dividing a matrix by a scalar.</returns>
        </member>
        <member name="M:Nez.Matrix2D.op_Equality(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Compares whether two <see cref="T:Nez.Matrix2D"/> instances are equal without any tolerance.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/> on the left of the equal sign.</param>
            <param name="matrix2">Source <see cref="T:Nez.Matrix2D"/> on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Matrix2D.op_Inequality(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Compares whether two <see cref="T:Nez.Matrix2D"/> instances are not equal without any tolerance.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/> on the left of the not equal sign.</param>
            <param name="matrix2">Source <see cref="T:Nez.Matrix2D"/> on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Matrix2D.op_Multiply(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Multiplies two matrixes.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/> on the left of the mul sign.</param>
            <param name="matrix2">Source <see cref="T:Nez.Matrix2D"/> on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication.</returns>
            <remarks>
            Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication.
            </remarks>
        </member>
        <member name="M:Nez.Matrix2D.op_Multiply(Nez.Matrix2D,System.Single)">
            <summary>
            Multiplies the elements of matrix by a scalar.
            </summary>
            <param name="matrix">Source <see cref="T:Nez.Matrix2D"/> on the left of the mul sign.</param>
            <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
            <returns>Result of the matrix multiplication with a scalar.</returns>
        </member>
        <member name="M:Nez.Matrix2D.op_Subtraction(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Subtracts the values of one <see cref="T:Nez.Matrix2D"/> from another <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="matrix1">Source <see cref="T:Nez.Matrix2D"/> on the left of the sub sign.</param>
            <param name="matrix2">Source <see cref="T:Nez.Matrix2D"/> on the right of the sub sign.</param>
            <returns>Result of the matrix subtraction.</returns>
        </member>
        <member name="M:Nez.Matrix2D.op_UnaryNegation(Nez.Matrix2D)">
            <summary>
            Inverts values in the specified <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <param name="matrix">Source <see cref="T:Nez.Matrix2D"/> on the right of the sub sign.</param>
            <returns>Result of the inversion.</returns>
        </member>
        <member name="M:Nez.Matrix2D.subtract(Nez.Matrix2D,Nez.Matrix2D)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains subtraction of one matrix from another.
            </summary>
            <param name="matrix1">The first <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">The second <see cref="T:Nez.Matrix2D"/>.</param>
            <returns>The result of the matrix subtraction.</returns>
        </member>
        <member name="M:Nez.Matrix2D.subtract(Nez.Matrix2D@,Nez.Matrix2D@,Nez.Matrix2D@)">
            <summary>
            Creates a new <see cref="T:Nez.Matrix2D"/> that contains subtraction of one matrix from another.
            </summary>
            <param name="matrix1">The first <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="matrix2">The second <see cref="T:Nez.Matrix2D"/>.</param>
            <param name="result">The result of the matrix subtraction as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.transpose(Nez.Matrix2D)">
            <summary>
            Swap the matrix rows and columns.
            </summary>
            <param name="matrix">The matrix for transposing operation.</param>
            <returns>The new <see cref="T:Nez.Matrix2D"/> which contains the transposing result.</returns>
        </member>
        <member name="M:Nez.Matrix2D.transpose(Nez.Matrix2D@,Nez.Matrix2D@)">
            <summary>
            Swap the matrix rows and columns.
            </summary>
            <param name="matrix">The matrix for transposing operation.</param>
            <param name="result">The new <see cref="T:Nez.Matrix2D"/> which contains the transposing result as an output parameter.</param>
        </member>
        <member name="M:Nez.Matrix2D.Equals(Nez.Matrix2D)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Nez.Matrix2D"/> without any tolerance.
            </summary>
            <param name="other">The <see cref="T:Nez.Matrix2D"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Matrix2D.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:System.Object"/> without any tolerance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Matrix2D.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Nez.Matrix2D"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Nez.Matrix2D"/>.</returns>
        </member>
        <member name="T:Nez.ColliderTriggerHelper">
            <summary>
            helper class used by the Movers to manage trigger colliders interactions and calling ITriggerListeners.
            </summary>
        </member>
        <member name="F:Nez.ColliderTriggerHelper._activeTriggerIntersections">
            <summary>
            stores all the active intersection pairs that occured in the current frame
            </summary>
        </member>
        <member name="F:Nez.ColliderTriggerHelper._previousTriggerIntersections">
            <summary>
            stores the previous frames intersection pairs so that we can detect exits after moving this frame
            </summary>
        </member>
        <member name="M:Nez.ColliderTriggerHelper.update">
            <summary>
            update should be called AFTER Entity is moved. It will take care of any ITriggerListeners that the Collider overlaps.
            </summary>
        </member>
        <member name="T:Nez.ColorCycler">
            <summary>
            takes a RenderableComponent and cycles the color using different wave forms. A specific color channel can be affected or all of them.
            Useful for making flickering lights and adding atmosphere.
            </summary>
        </member>
        <member name="F:Nez.ColorCycler.offset">
            <summary>
            This value is added to the final result. 0 - 1 range.
            </summary>
        </member>
        <member name="F:Nez.ColorCycler.amplitude">
            <summary>
            this value is multiplied by the calculated value
            </summary>
        </member>
        <member name="F:Nez.ColorCycler.phase">
            <summary>
            start point in wave function. 0 - 1 range.
            </summary>
        </member>
        <member name="F:Nez.ColorCycler.frequency">
            <summary>
            cycles per second
            </summary>
        </member>
        <member name="T:Nez.PrototypeSprite">
            <summary>
            skewable rectangle sprite for prototyping
            </summary>
        </member>
        <member name="M:Nez.PrototypeSprite.setWidth(System.Single)">
            <summary>
            sets the width of the sprite
            </summary>
            <returns>The width.</returns>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.PrototypeSprite.setHeight(System.Single)">
            <summary>
            sets the height of the sprite
            </summary>
            <returns>The height.</returns>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.PrototypeSprite.setSkew(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            sets the skew values for the sprite
            </summary>
            <returns>The skew.</returns>
            <param name="skewTopX">Skew top x.</param>
            <param name="skewBottomX">Skew bottom x.</param>
            <param name="skewLeftY">Skew left y.</param>
            <param name="skewRightY">Skew right y.</param>
        </member>
        <member name="P:Nez.DissolveEffect.progress">
            <summary>
            value from 0 - 1 that determines how much the dissolve effect will encompass
            </summary>
            <value>The progress.</value>
        </member>
        <member name="P:Nez.DissolveEffect.dissolveThreshold">
            <summary>
            determines how much area around the current dissolve threshold will be colored with dissolveThresholdColor
            </summary>
            <value>The dissolve threshold.</value>
        </member>
        <member name="P:Nez.DissolveEffect.dissolveThresholdColor">
            <summary>
            the Color that will appear on the threshold of the dissolve effect
            </summary>
            <value>The color of the dissolve threshold.</value>
        </member>
        <member name="P:Nez.DissolveEffect.dissolveTexture">
            <summary>
            the grayscale texture used to determine what is disolved
            </summary>
            <value>The dissolve texture.</value>
        </member>
        <member name="T:Nez.Renderable3D">
            <summary>
            convenience base class for 3D objects. It reuses and wraps the Transform in Vector3s for easy access and provides a world
            transform for rendering.
            </summary>
        </member>
        <member name="P:Nez.Renderable3D.bounds">
            <summary>
            by default, uses a magic number of 1.5 * the scale of the object. This will work fine for objects ~1 unit in width/height.
            Any other odd sizes should override this appropriately.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Nez.Renderable3D.position">
            <summary>
            wraps Transform.position along with a private Z position
            </summary>
            <value>The position.</value>
        </member>
        <member name="F:Nez.Renderable3D.scale">
            <summary>
            the scale of the object. 80 by default. You will need to adjust this depending on your Scene's backbuffer size.
            </summary>
        </member>
        <member name="P:Nez.Renderable3D.rotation">
            <summary>
            wraps Transform.rotation for the Z rotation along with a private X and Y rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:Nez.Renderable3D.rotationDegrees">
            <summary>
            rotation in degrees
            </summary>
            <value>The rotation degrees.</value>
        </member>
        <member name="P:Nez.Renderable3D.worldMatrix">
            <summary>
            Matrix that represents the world transform. Useful for rendering.
            </summary>
            <value>The world matrix.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nez.GeometricPrimitive3D.initializePrimitive" -->
        <member name="M:Nez.GeometricPrimitive3D.Dispose">
            <summary>
            frees resources used by this object.
            </summary>
        </member>
        <member name="M:Nez.GeometricPrimitive3D.Dispose(System.Boolean)">
            <summary>
            frees resources used by this object.
            </summary>
        </member>
        <member name="T:Nez.LineRenderer">
            <summary>
            Renders a trail behind a moving object
            Adapted from http://www.paradeofrain.com/2010/01/28/update-on-continuous-2d-trails-in-xna/
            </summary>
        </member>
        <member name="F:Nez.LineRenderer.EndCapType.Standard">
            <summary>
            will not attempt to add any extra verts at joints
            </summary>
        </member>
        <member name="F:Nez.LineRenderer.EndCapType.Jagged">
            <summary>
            all joints will be extruded out with an extra vert resulting in jagged, pointy joints
            </summary>
        </member>
        <member name="F:Nez.LineRenderer.EndCapType.JaggedWithCutoff">
            <summary>
            the same as jagged but uses cutoffAngleForEndCapSubdivision to decide if a joint should be Jagged or Standard
            </summary>
        </member>
        <member name="F:Nez.LineRenderer.EndCapType.Smooth">
            <summary>
            joints are smoothed with some extra geometry. Uses degreesPerSubdivision to decide how smooth to make each joint.
            </summary>
        </member>
        <member name="P:Nez.LineRenderer.useWorldSpace">
            <summary>
            controls whether the lines are defined in world space or local
            </summary>
        </member>
        <member name="P:Nez.LineRenderer.endCapType">
            <summary>
            the type of end cap for all joints
            </summary>
            <value>The end type of the cap.</value>
        </member>
        <member name="P:Nez.LineRenderer.cutoffAngleForEndCapSubdivision">
            <summary>
            used by EndCapType.JaggedWithCutoff to decide what angle to stop creating jagged joints
            </summary>
            <value>The cutoff angle for end cap subdivision.</value>
        </member>
        <member name="P:Nez.LineRenderer.degreesPerSubdivision">
            <summary>
            used by EndCapType.Smooth to decide how often to subdivide and smooth joints
            </summary>
            <value>The degrees per subdivision.</value>
        </member>
        <member name="M:Nez.LineRenderer.setUseWorldSpace(System.Boolean)">
            <summary>
            sets whether local or world space will be used for rendering. Defaults to world space. Using local space will take into account
            all the Transform properties including scale/rotation/position.
            </summary>
            <returns>The use world space.</returns>
            <param name="useWorldSpace">If set to <c>true</c> use world space.</param>
        </member>
        <member name="M:Nez.LineRenderer.setTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            sets the texture. Textures should be horizontally tileable. Pass in null to unset the texture.
            </summary>
            <returns>The texture.</returns>
            <param name="texture">Texture.</param>
        </member>
        <member name="M:Nez.LineRenderer.setEndCapType(Nez.LineRenderer.EndCapType)">
            <summary>
            sets the EndCapType used for rendering the line
            </summary>
            <returns>The end cap type.</returns>
            <param name="endCapType">End cap type.</param>
        </member>
        <member name="M:Nez.LineRenderer.setCutoffAngleForEndCapSubdivision(System.Single)">
            <summary>
            sets the cutoff angle for use with EndCapType.JaggedWithCutoff. Any angles less than the cutoff angle will have jagged
            joints and all others will have standard.
            </summary>
            <returns>The cutoff angle for end cap subdivision.</returns>
            <param name="cutoffAngleForEndCapSubdivision">Cutoff angle for end cap subdivision.</param>
        </member>
        <member name="M:Nez.LineRenderer.setDegreesPerSubdivision(System.Single)">
            <summary>
            sets the number of degrees between each subdivision for use with EndCapType.Smooth
            </summary>
            <returns>The per subdivision.</returns>
            <param name="degreesPerSubdivision">Degrees per subdivision.</param>
        </member>
        <member name="M:Nez.LineRenderer.setStartEndWidths(System.Single,System.Single)">
            <summary>
            sets the start and end width. If these are set, the individual point widths will be ignored.
            </summary>
            <returns>The start end widths.</returns>
            <param name="startWidth">Start width.</param>
            <param name="endWidth">End width.</param>
        </member>
        <member name="M:Nez.LineRenderer.clearStartEndWidths">
            <summary>
            clears the global start/end widths and goes back to using the individual point widths
            </summary>
            <returns>The start end widths.</returns>
        </member>
        <member name="M:Nez.LineRenderer.setStartEndColors(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            sets the start and end color. If these are set, the individual point colors will be ignored.
            </summary>
            <returns>The start end colors.</returns>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
        </member>
        <member name="M:Nez.LineRenderer.clearStartEndColors">
            <summary>
            clears the global start/end colors and goes back to using the individual point colors
            </summary>
            <returns>The start end colors.</returns>
        </member>
        <member name="M:Nez.LineRenderer.addPoint(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            adds a point to the line. If start/end widths are not set each point should have a width set here.
            </summary>
            <returns>The point.</returns>
            <param name="point">Point.</param>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.LineRenderer.addPoint(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            adds a point to the line. If start/end widths are not set each point should have a width set here. If start/end colors
            are not set a color should be set as well.
            </summary>
            <returns>The point.</returns>
            <param name="point">Point.</param>
            <param name="width">Width.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.LineRenderer.updatePoint(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            updates a points properties
            </summary>
            <returns>The point.</returns>
            <param name="index">Index.</param>
            <param name="point">Point.</param>
        </member>
        <member name="M:Nez.LineRenderer.updatePoint(System.Int32,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            updates a points properties
            </summary>
            <returns>The point.</returns>
            <param name="index">Index.</param>
            <param name="point">Point.</param>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.LineRenderer.updatePoint(System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            updates a points properties
            </summary>
            <returns>The point.</returns>
            <param name="index">Index.</param>
            <param name="point">Point.</param>
            <param name="width">Width.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:Nez.LineRenderer.clearPoints">
            <summary>
            clears all the points
            </summary>
            <returns>The points.</returns>
        </member>
        <member name="M:Nez.LineRenderer.addSingleSegmentLine(Nez.LineRenderer.Segment@,Microsoft.Xna.Framework.Color)">
            <summary>
            special case for just 2 points, one line segment
            </summary>
            <param name="segment">Segment.</param>
        </member>
        <member name="M:Nez.LineRenderer.addFirstSegment(Nez.LineRenderer.Segment@,Nez.LineRenderer.Segment@,System.Int32@)">
            <summary>
            the first segment is special since it has no previous verts to connect to so we handle it separately.
            </summary>
            <param name="segment">Segment.</param>
            <param name="nextSegment">Next segment.</param>
            <param name="vertIndex">Vert index.</param>
        </member>
        <member name="M:Nez.LineRenderer.addSegment(Nez.LineRenderer.Segment@,System.Int32@)">
            <summary>
            adds a segment and takes care of patching the previous elbow
            </summary>
            <param name="segment">Segment.</param>
            <param name="vertIndex">Vert index.</param>
        </member>
        <member name="M:Nez.LineRenderer.addVert(System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            adds a vert to the list
            </summary>
            <param name="index">Index.</param>
            <param name="position">Position.</param>
            <param name="texCoord">Tex coordinate.</param>
            <param name="col">Col.</param>
        </member>
        <member name="T:Nez.LineRenderer.Segment">
            <summary>
            helper class used to store some data when calculating verts
            </summary>
        </member>
        <member name="M:Nez.Vector3Ext.toVector2(Microsoft.Xna.Framework.Vector3)">
            <summary>
            returns a Vector2 ignoring the z component
            </summary>
            <returns>The vector2.</returns>
            <param name="vec">Vec.</param>
        </member>
        <member name="T:Nez.PolygonMesh">
            <summary>
            renders a basic, CCW, convex polygon
            </summary>
        </member>
        <member name="T:Nez.Verlet.Ball">
            <summary>
            single Particle composite
            </summary>
        </member>
        <member name="M:Nez.Verlet.Cloth.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>
            creates a Cloth. If connectHorizontalParticles is false it will not link horizontal Particles and create a hair-like cloth
            </summary>
            <param name="topLeftPosition">Top left position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="segments">Segments.</param>
            <param name="stiffness">Stiffness.</param>
            <param name="tearSensitivity">Tear sensitivity.</param>
            <param name="connectHorizontalParticles">If set to <c>true</c> connect horizontal particles.</param>
        </member>
        <member name="T:Nez.Verlet.Composite">
            <summary>
            represents an object in the Verlet world. Consists of Particles and Constraints and handles updating them
            </summary>
        </member>
        <member name="F:Nez.Verlet.Composite.friction">
            <summary>
            friction applied to all Particle movement to dampen it. Value should be very close to 1.
            </summary>
        </member>
        <member name="F:Nez.Verlet.Composite.drawParticles">
            <summary>
            should Particles be rendered when doing a debugRender?
            </summary>
        </member>
        <member name="F:Nez.Verlet.Composite.drawConstraints">
            <summary>
            should Constraints be rendered when doing a debugRender?
            </summary>
        </member>
        <member name="F:Nez.Verlet.Composite.collidesWithLayers">
            <summary>
            layer mask of all the layers this Collider should collide with when Entity.move methods are used. defaults to all layers.
            </summary>
        </member>
        <member name="M:Nez.Verlet.Composite.addParticle(Nez.Verlet.Particle)">
            <summary>
            adds a Particle to the Composite
            </summary>
            <returns>The particle.</returns>
            <param name="particle">Particle.</param>
        </member>
        <member name="M:Nez.Verlet.Composite.removeParticle(Nez.Verlet.Particle)">
            <summary>
            removes the Particle from the Composite
            </summary>
            <param name="particle">Particle.</param>
        </member>
        <member name="M:Nez.Verlet.Composite.removeAll">
            <summary>
            removes all Particles and Constraints from the Composite
            </summary>
        </member>
        <member name="M:Nez.Verlet.Composite.addConstraint``1(``0)">
            <summary>
            adds a Constraint to the Composite
            </summary>
            <returns>The constraint.</returns>
            <param name="constraint">Constraint.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Verlet.Composite.removeConstraint(Nez.Verlet.Constraint)">
            <summary>
            removes a Constraint from the Composite
            </summary>
            <param name="constraint">Constraint.</param>
        </member>
        <member name="M:Nez.Verlet.Composite.applyForce(Microsoft.Xna.Framework.Vector2)">
            <summary>
            applies a force to all Particles in this Composite
            </summary>
            <param name="force">Force.</param>
        </member>
        <member name="M:Nez.Verlet.Composite.solveConstraints">
            <summary>
            handles solving all Constraints
            </summary>
        </member>
        <member name="M:Nez.Verlet.Composite.updateParticles(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            applies gravity to each Particle and does the verlet integration
            </summary>
            <param name="deltaTimeSquared">Delta time.</param>
            <param name="gravity">Gravity.</param>
        </member>
        <member name="T:Nez.Verlet.LineSegments">
            <summary>
            a series of points connected with DistanceConstraints
            </summary>
        </member>
        <member name="M:Nez.Verlet.LineSegments.pinParticleAtIndex(System.Int32)">
            <summary>
            pins the Particle at the given index
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="T:Nez.Verlet.Tree">
            <summary>
            fractal tree. Converted from https://github.com/subprotocol/verlet-js/blob/master/examples/tree.html
            </summary>
        </member>
        <member name="T:Nez.Verlet.AngleConstraint">
            <summary>
            constrains 3 particles to an angle
            </summary>
        </member>
        <member name="F:Nez.Verlet.AngleConstraint.stiffness">
            <summary>
            [0-1]. the stiffness of the Constraint. Lower values are more springy and higher are more rigid.
            </summary>
        </member>
        <member name="F:Nez.Verlet.AngleConstraint.angleInRadians">
            <summary>
            the angle in radians that the Constraint will attempt to maintain
            </summary>
        </member>
        <member name="F:Nez.Verlet.Constraint.composite">
            <summary>
            the Composite that owns this Constraint. Required so that Constraints can be broken.
            </summary>
        </member>
        <member name="F:Nez.Verlet.Constraint.collidesWithColliders">
            <summary>
            if true, the Constraint will check for collisions with standard Nez Colliders. Inner Constraints do not need to have this set to
            true.
            </summary>
        </member>
        <member name="M:Nez.Verlet.Constraint.solve">
            <summary>
            solves the Constraint
            </summary>
        </member>
        <member name="M:Nez.Verlet.Constraint.handleCollisions(System.Int32)">
            <summary>
            if collidesWithColliders is true this will be called
            </summary>
        </member>
        <member name="M:Nez.Verlet.Constraint.debugRender(Nez.Batcher)">
            <summary>
            debug renders the Constraint
            </summary>
            <param name="batcher">Batcher.</param>
        </member>
        <member name="T:Nez.Verlet.DistanceConstraint">
            <summary>
            maintains a specified distance betweeen two Particles. The stiffness adjusts how rigid or springy the constraint will be.
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint.stiffness">
            <summary>
            [0-1]. the stiffness of the Constraint. Lower values are more springy and higher are more rigid.
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint.restingDistance">
            <summary>
            the resting distnace of the Constraint. It will always try to get to this distance.
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint.tearSensitivity">
            <summary>
            if the ratio of the current distance / restingDistance is greater than tearSensitivity the Constaint will be removed. Values
            should be above 1 and higher values mean rupture wont occur until the Constaint is stretched further.
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint.shouldApproximateCollisionsWithPoints">
            <summary>
            sets whether collisions should be approximated by points. This should be used for Constraints that need to collided on both
            sides. SAT only works with single sided collisions.
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint.totalPointsToApproximateCollisionsWith">
            <summary>
            if shouldApproximateCollisionsWithPoints is true, this controls how accurate the collisions check will be. Higher numbers mean
            more collisions checks.
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint._particleOne">
            <summary>
            the first Particle in the Constraint
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint._particleTwo">
            <summary>
            the second particle in the Constraint
            </summary>
        </member>
        <member name="F:Nez.Verlet.DistanceConstraint._polygon">
            <summary>
            Polygon shared amongst all DistanceConstraints. Used for collision detection.
            </summary>
        </member>
        <member name="M:Nez.Verlet.DistanceConstraint.create(Nez.Verlet.Particle,Nez.Verlet.Particle,Nez.Verlet.Particle,System.Single,System.Single)">
            <summary>
            creates a faux angle constraint by figuring out the required distance from a to c for the given angle
            </summary>
            <param name="a">The alpha component.</param>
            <param name="center">Center.</param>
            <param name="c">C.</param>
            <param name="stiffness">Stiffness.</param>
            <param name="angleInDegrees">Angle in degrees.</param>
        </member>
        <member name="M:Nez.Verlet.DistanceConstraint.setTearSensitivity(System.Single)">
            <summary>
            sets the tear sensitivity. if the ratio of the current distance / restingDistance is greater than tearSensitivity the
            Constaint will be removed
            </summary>
            <returns>The tear sensitvity.</returns>
            <param name="tearSensitivity">Tear sensitivity.</param>
        </member>
        <member name="M:Nez.Verlet.DistanceConstraint.setCollidesWithColliders(System.Boolean)">
            <summary>
            sets whether this Constraint should collide with standard Colliders
            </summary>
            <returns>The collides with colliders.</returns>
            <param name="collidesWithColliders">If set to <c>true</c> collides with colliders.</param>
        </member>
        <member name="M:Nez.Verlet.DistanceConstraint.setShouldApproximateCollisionsWithPoints(System.Boolean)">
            <summary>
            sets whether collisions should be approximated by points. This should be used for Constraints that need to collided on both
            sides. SAT only works with single sided collisions.
            </summary>
            <returns>The should approximate collisions with points.</returns>
            <param name="shouldApproximateCollisionsWithPoints">If set to <c>true</c> should approximate collisions with points.</param>
        </member>
        <member name="F:Nez.Verlet.Particle.position">
            <summary>
            the current position of the Particle
            </summary>
        </member>
        <member name="F:Nez.Verlet.Particle.lastPosition">
            <summary>
            the position of the Particle prior to its latest move
            </summary>
        </member>
        <member name="F:Nez.Verlet.Particle.mass">
            <summary>
            the mass of the Particle. Taken into account for all forces and constraints
            </summary>
        </member>
        <member name="F:Nez.Verlet.Particle.radius">
            <summary>
            the radius of the Particle
            </summary>
        </member>
        <member name="F:Nez.Verlet.Particle.collidesWithColliders">
            <summary>
            if true, the Particle will collide with standard Nez Colliders
            </summary>
        </member>
        <member name="M:Nez.Verlet.Particle.applyForce(Microsoft.Xna.Framework.Vector2)">
            <summary>
            applies a force taking mass into account to the Particle
            </summary>
            <param name="force">Force.</param>
        </member>
        <member name="M:Nez.Verlet.Particle.pin">
            <summary>
            pins the Particle to its current position
            </summary>
        </member>
        <member name="M:Nez.Verlet.Particle.pinTo(Microsoft.Xna.Framework.Vector2)">
            <summary>
            pins the particle to the specified position
            </summary>
            <param name="position">Position.</param>
        </member>
        <member name="M:Nez.Verlet.Particle.unpin">
            <summary>
            unpins the particle setting it free like the wind
            </summary>
        </member>
        <member name="T:Nez.Verlet.VerletWorld">
            <summary>
            the root of the Verlet simulation. Create a World and call its update method each frame.
            </summary>
        </member>
        <member name="F:Nez.Verlet.VerletWorld.gravity">
            <summary>
            gravity for the simulation
            </summary>
        </member>
        <member name="F:Nez.Verlet.VerletWorld.constraintIterations">
            <summary>
            number of iterations that will be used for Constraint solving
            </summary>
        </member>
        <member name="F:Nez.Verlet.VerletWorld.maximumStepIterations">
            <summary>
            max number of iterations for the simulation as a whole
            </summary>
        </member>
        <member name="F:Nez.Verlet.VerletWorld.simulationBounds">
            <summary>
            Bounds of the Verlet World. Particles will be confined to this space if set.
            </summary>
        </member>
        <member name="F:Nez.Verlet.VerletWorld.allowDragging">
            <summary>
            should Particles be allowed to be dragged?
            </summary>
        </member>
        <member name="F:Nez.Verlet.VerletWorld.selectionRadiusSquared">
            <summary>
            squared selection radius of the mouse pointer
            </summary>
        </member>
        <member name="M:Nez.Verlet.VerletWorld.addComposite``1(``0)">
            <summary>
            adds a Composite to the simulation
            </summary>
            <returns>The composite.</returns>
            <param name="composite">Composite.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.Verlet.VerletWorld.removeComposite(Nez.Verlet.Composite)">
            <summary>
            removes a Composite from the simulation
            </summary>
            <param name="composite">Composite.</param>
        </member>
        <member name="M:Nez.Verlet.VerletWorld.getNearestParticle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            gets the nearest Particle to the position. Uses the selectionRadiusSquared to determine if a Particle is near enough for consideration.
            </summary>
            <returns>The nearest particle.</returns>
            <param name="position">Position.</param>
        </member>
        <member name="T:Nez.Verlet.Box">
            <summary>
            creates a simple box with diagonal contraints to keep it rigid
            </summary>
        </member>
        <member name="T:Nez.IMGUI">
            <summary>
            IMGUI is a very simple class with only static methods designed to make sticking buttons, checkboxes, sliders and progress bars on screen
            in quick and dirty fashion. It is not designed to be a full and proper UI system.
            </summary>
        </member>
        <member name="M:Nez.IMGUI.beginWindow(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            begins an IMGUI window specifying where and how large it should be. If you are not using IMGUI in world space (for example, inside
            a Scene with a scaled resolution policy) passing false for useRawMousePosition will use the Input.scaledMousePosition.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="useRawMousePosition">If set to <c>true</c> use raw mouse position.</param>
        </member>
        <member name="M:Nez.IMGUI.toggle(System.String,System.Boolean)">
            <summary>
            creates a checkbox/toggle
            </summary>
            <param name="text">Text.</param>
            <param name="isChecked">If set to <c>true</c> is checked.</param>
        </member>
        <member name="M:Nez.IMGUI.slider(System.Single,System.String)">
            <summary>
            value should be between 0 and 1
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.IMGUI.progressBar(System.Single)">
            <summary>
            value should be between 0 and 1
            </summary>
            <returns>The bar.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nez.IMGUI.header(System.String)">
            <summary>
            creates a full width header with text
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:Nez.IMGUI.space(System.Single)">
            <summary>
            adds some vertical space
            </summary>
            <param name="verticalSpace">Vertical space.</param>
        </member>
        <member name="T:Nez.Splines.Bezier">
            <summary>
            cubic and quadratic bezier helper
            </summary>
        </member>
        <member name="M:Nez.Splines.Bezier.getPoint(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            evaluate quadratic bezier
            </summary>
            <returns>The point.</returns>
            <param name="p0">P0.</param>
            <param name="p1">P1.</param>
            <param name="p2">P2.</param>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.Bezier.getFirstDerivative(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            gets the first derivative for a quadratic bezier
            </summary>
            <returns>The first derivative.</returns>
            <param name="p0">P0.</param>
            <param name="p1">P1.</param>
            <param name="p2">P2.</param>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.Bezier.getPoint(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            evaluate a cubic bezier
            </summary>
            <returns>The point.</returns>
            <param name="start">P0.</param>
            <param name="firstControlPoint">P1.</param>
            <param name="secondControlPoint">P2.</param>
            <param name="end">P3.</param>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.Bezier.getFirstDerivative(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            gets the first derivative for a cubic bezier
            </summary>
            <returns>The first derivative.</returns>
            <param name="start">P0.</param>
            <param name="firstControlPoint">P1.</param>
            <param name="secondControlPoint">P2.</param>
            <param name="end">P3.</param>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.Bezier.recursiveGetOptimizedDrawingPoints(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},System.Single)">
            <summary>
            recursively subdivides a bezier curve until distanceTolerance is met. Flat sections will have less points then curved with this
            algorithm.
            
            This image defines the midpoints calculated and makes the variable names sensical:
            http://www.antigrain.com/research/adaptive_bezier/bezier09.gif
            based on http://www.antigrain.com/research/adaptive_bezier/index.html
            </summary>
            <param name="start">Start.</param>
            <param name="firstCtrlPoint">First ctrl point.</param>
            <param name="secondCtrlPoint">Second ctrl point.</param>
            <param name="end">End.</param>
            <param name="points">Points.</param>
            <param name="distanceTolerance">Distance tolerance.</param>
        </member>
        <member name="M:Nez.Splines.Bezier.getOptimizedDrawingPoints(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            recursively subdivides a bezier curve until distanceTolerance is met. Flat sections will have less points then curved with this
            algorithm. Returns a pooled list that should be returned to the ListPool when done.
            </summary>
            <param name="start">Start.</param>
            <param name="firstCtrlPoint">First ctrl point.</param>
            <param name="secondCtrlPoint">Second ctrl point.</param>
            <param name="end">End.</param>
            <param name="distanceTolerance">Distance tolerance.</param>
        </member>
        <member name="T:Nez.Splines.BezierSpline">
            <summary>
            houses a series of cubic bezier points and provides helper methods to access the bezier
            </summary>
        </member>
        <member name="M:Nez.Splines.BezierSpline.pointIndexAtTime(System.Single@)">
            <summary>
            helper that gets the bezier point index at time t. t is modified in the process to be in the range of the curve segment.
            </summary>
            <returns>The index at time.</returns>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.BezierSpline.setControlPoint(System.Int32,Microsoft.Xna.Framework.Vector2)">
            <summary>
            sets a control point taking into account if this is a shared point and adjusting appropriately if it is
            </summary>
            <param name="index">Index.</param>
            <param name="point">Point.</param>
        </member>
        <member name="M:Nez.Splines.BezierSpline.getPointAtTime(System.Single)">
            <summary>
            gets the point on the bezier at time t
            </summary>
            <returns>The point at time.</returns>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.BezierSpline.getVelocityAtTime(System.Single)">
            <summary>
            gets the velocity (first derivative) of the bezier at time t
            </summary>
            <returns>The velocity at time.</returns>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.BezierSpline.getDirectionAtTime(System.Single)">
            <summary>
            gets the direction (normalized first derivative) of the bezier at time t
            </summary>
            <returns>The direction at time.</returns>
            <param name="t">T.</param>
        </member>
        <member name="M:Nez.Splines.BezierSpline.addCurve(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            adds a curve to the bezier
            </summary>
            <param name="start">Start.</param>
            <param name="firstControlPoint">First control point.</param>
            <param name="secondControlPoint">Second control point.</param>
        </member>
        <member name="M:Nez.Splines.BezierSpline.reset">
            <summary>
            resets the bezier removing all points
            </summary>
        </member>
        <member name="M:Nez.Splines.BezierSpline.getDrawingPoints(System.Int32)">
            <summary>
            breaks up the spline into totalSegments parts and returns all the points required to draw using lines
            </summary>
            <returns>The drawing points.</returns>
            <param name="totalSegments">Total segments.</param>
        </member>
        <member name="T:Nez.Svg.FauxGraphicsPath">
            <summary>
            THIS IS A HORRIBLE ABOMINATION! PCLs dont have access to System.Drawing so this class is a wrapper for accessing the GraphicsPath class.
            It has the full public API that Nez needs for SVG files but the whole mess is all accessed via reflection. It is slow as all hell and not
            recommended for production use. It's only purpose is so that Nez works with SVG files out of the box to get up and running fast.
            </summary>
        </member>
        <member name="T:Nez.Svg.ISvgPathBuilder">
            <summary>
            dummy interface used by SvgPath.getTransformedDrawingPoints to workaround PCL not having System.Drawing
            </summary>
        </member>
        <member name="T:Nez.Svg.SvgPath">
            <summary>
            representation of a path element. Note that the best way to get points from the path is to use the getTransformedPoints method. It uses
            System.Drawing to generate the path points from any type of path. The getOptimized*DrawingPoints methods only work for cubic bezier
            curves.
            
            SvgPath can be instantiated directly. You can then just set the 'd' property to have the path parsed.
            </summary>
        </member>
        <member name="M:Nez.Svg.SvgPath.getTransformedDrawingPoints(Nez.Svg.ISvgPathBuilder,System.Single)">
            <summary>
            gets the points that make up the path with any transforms present applied. The points can be used to approximate the path by
            drawing lines between them.
            
            Important notes: ISvgPathBuilder is a faux interface that is required because PCLs cannot access System.Drawing which is used
            to get the drawing points. In order to use this method you need to put the SvgPathBuilder in your main project and then pass in
            an SvgPathBuilder object to this method.
            </summary>
            <returns>The transformed drawing points.</returns>
            <param name="pathBuilder">Path builder.</param>
            <param name="flatness">Flatness.</param>
        </member>
        <member name="M:Nez.Svg.SvgPath.isPathCubicBezier">
            <summary>
            returns true if all the segments are cubic curves
            </summary>
            <returns><c>true</c>, if path bezier was ised, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nez.Svg.SvgPath.getBezierSplineForPath">
            <summary>
            gets a BezierSpline for the SvgPath
            </summary>
            <returns>The bezier spline for path.</returns>
        </member>
        <member name="M:Nez.Svg.SvgPath.getOptimizedDrawingPoints(System.Single)">
            <summary>
            gets optimized drawing points with extra points in curves and less in straight lines. Returns a pooled list that should be returned to the ListPool when done.
            </summary>
            <returns>The optimized drawing points.</returns>
            <param name="distanceTolerance">Distance tolerance.</param>
        </member>
        <member name="M:Nez.Svg.SvgPath.getOptimizedTransformedDrawingPoints(System.Single)">
            <summary>
            gets optimized drawing points with extra points in curves and less in straight lines with any transforms present applied
            </summary>
            <returns>The optimized drawing points.</returns>
            <param name="distanceTolerance">Distance tolerance.</param>
        </member>
        <member name="M:Nez.Svg.SvgPathParser.parse(System.String)">
            <summary>
            parses the 'd' element of an SVG file and returns the command series
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:Nez.Svg.SvgPathParser.createPathSegment(System.Char,System.Collections.Generic.List{Nez.Svg.SvgPathSegment},System.Single[],System.Boolean)">
            <summary>
            creates an SvgPathSegment based on the command and coords passed in
            </summary>
            <param name="command">Command.</param>
            <param name="segments">Segments.</param>
            <param name="coords">Coords.</param>
            <param name="isRelative">If set to <c>true</c> is relative.</param>
        </member>
        <member name="M:Nez.Svg.SvgPathParser.toAbsolute(System.Single,System.Single,System.Collections.Generic.List{Nez.Svg.SvgPathSegment},System.Boolean)">
            <summary>
            Creates point with absolute coordinates
            </summary>
            <returns>The absolute.</returns>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="segments">Segments.</param>
            <param name="areBothRelative">If set to <c>true</c> is relative both.</param>
        </member>
        <member name="M:Nez.Svg.SvgPathParser.toAbsolute(System.Single,System.Single,System.Collections.Generic.List{Nez.Svg.SvgPathSegment},System.Boolean,System.Boolean)">
            <summary>
            Creates point with absolute coordinates
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeX"><b>true</b> if <paramref name="x"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <param name="isRelativeY"><b>true</b> if <paramref name="y"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <returns><see cref="T:Microsoft.Xna.Framework.Vector2"/> that contains absolute coordinates.</returns>
        </member>
        <member name="T:Nez.Svg.SvgPathSegment">
            <summary>
            base class for all of the different SVG path types. Note that arcs are not supported at this time.
            </summary>
        </member>
        <member name="T:Nez.Svg.SvgReflectionPathBuilder">
            <summary>
            helper class used to parse paths and also fetch the drawing points from a series of SvgPathSegments. This is an insanely slow way
            to build paths since it is stuck using reflection for everything. It is highly recommended that you use the SvgPathBuilder class
            instead, which must be manually placed in your project.
            </summary>
        </member>
        <member name="M:Nez.Svg.SvgReflectionPathBuilder.toDrawPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            helper to convert a Vector2 into a Point
            </summary>
            <returns>The draw point.</returns>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Nez.Svg.SvgReflectionPathBuilder.getDrawingPoints(System.Collections.Generic.List{Nez.Svg.SvgPathSegment},System.Single)">
            <summary>
            takes in a parsed path and returns a list of points that can be used to draw the path
            </summary>
            <returns>The drawing points.</returns>
            <param name="segments">Segments.</param>
        </member>
        <member name="T:Nez.Svg.SvgImage">
            <summary>
            represents the image tag in an SVG document. This class will do its best to load the image from the href attribute. It will check for
            embedded images, web-based images and then fall back to using the href to load from a ContentManager.
            </summary>
        </member>
        <member name="P:Nez.Svg.SvgImage.rect">
            <summary>
            the rect encompassing this image. Note that the rect is with no transforms applied.
            </summary>
            <value>The rect.</value>
        </member>
        <member name="F:Nez.Svg.SvgImage._didAttemptTextureLoad">
            <summary>
            flag that determines if we tried to load the texture. We only attempt to load it once.
            </summary>
        </member>
        <member name="F:Nez.Svg.SvgImage._texture">
            <summary>
            cached texture if loaded successfully
            </summary>
        </member>
        <member name="M:Nez.Svg.SvgImage.getTexture(Nez.Systems.NezContentManager)">
            <summary>
            attempts to get a texture for the image
            - first it will check the href for a png file name. If it finds one it will load it with the ContentManager passed in
            - next it will see if the href is a url and if so it will load it
            - next it checks for an embedded, base64 image. It will load that if it finds one
            </summary>
            <returns>The texture.</returns>
            <param name="content">Content.</param>
        </member>
        <member name="M:Nez.Svg.SvgPolygon.getRelativePoints">
            <summary>
            gets the points relative to the center. SVG by default uses absolute positions for points.
            </summary>
            <returns>The relative points.</returns>
        </member>
        <member name="M:Nez.Svg.SvgRectangle.getTransformedPoints">
            <summary>
            gets the points for the rectangle with all transforms applied
            </summary>
            <returns>The transformed points.</returns>
        </member>
        <member name="T:Nez.Svg.SvgDebugComponent">
            <summary>
            assists in debugging the data from an SVG file. All the supported shapes will be displayed.
            </summary>
        </member>
        <member name="M:Nez.Svg.SvgDebugComponent.#ctor(System.String,Nez.Svg.ISvgPathBuilder)">
            <summary>
            beware! If pathBuilder is null the SvgReflectionPathBuilder will be used and it is slow as dirt.
            </summary>
            <param name="pathToSvgFile">Path to svg file.</param>
            <param name="pathBuilder">Path builder.</param>
        </member>
        <member name="M:Nez.Svg.SvgDebugComponent.renderImages(Nez.Batcher,Nez.Svg.SvgImage[])">
            <summary>
            attempts to load and draw the SvgImage. If it cannot load a Texture it will just draw a rect.
            </summary>
            <param name="batcher">Batcher.</param>
            <param name="images">Images.</param>
        </member>
        <member name="T:Nez.Svg.SvgDocument">
            <summary>
            handles parsing out groups, paths, rects, lines, circles, ellipses, polygons, polylines and images. This is just a small subset of the SVG
            spec! Only the basics are parsed out since this is not designed to be an image viewer.
            </summary>
        </member>
        <member name="T:Nez.Svg.SvgElement">
            <summary>
            base class for all SVG elements. Has some helpers for parsing colors and dealing with transforms.
            </summary>
        </member>
        <member name="P:Nez.Svg.SvgElement.rotationDegrees">
            <summary>
            helper property that just loops through all the transforms and if there is an SvgRotate transform it will return that angle
            </summary>
            <value>The rotation degrees.</value>
        </member>
        <member name="T:Nez.Svg.SvgGroup">
            <summary>
            container in SVG. The 'g' XML tag.
            </summary>
        </member>
        <member name="T:Nez.Svg.SvgTransformConverter">
            <summary>
            helpers for converting the transform string into SvgTransform objects
            </summary>
        </member>
        <member name="P:Nez.GaussianBlurPostProcessor.renderTargetScale">
            <summary>
            scale of the internal RenderTargets. For high resolution renders a half sized RT is usually more than enough. Defaults to 1.
            </summary>
        </member>
        <member name="M:Nez.GaussianBlurPostProcessor.updateEffectDeltas">
            <summary>
            updates the Effect with the new vertical and horizontal deltas
            </summary>
        </member>
        <member name="P:Nez.GaussianBlurEffect.blurAmount">
            <summary>
            amount to blur. A range of 0.5 - 6 works well. Defaults to 2.
            </summary>
            <value>The blur amount.</value>
        </member>
        <member name="P:Nez.GaussianBlurEffect.horizontalBlurDelta">
            <summary>
            horizontal delta for the blur. Typically 1 / backbuffer width
            </summary>
            <value>The horizontal blur delta.</value>
        </member>
        <member name="P:Nez.GaussianBlurEffect.verticalBlurDelta">
            <summary>
            vertical delta for the blur. Typically 1 / backbuffer height
            </summary>
            <value>The vertical blur delta.</value>
        </member>
        <member name="M:Nez.GaussianBlurEffect.prepareForHorizontalBlur">
            <summary>
            prepares the Effect for performing a horizontal blur
            </summary>
        </member>
        <member name="M:Nez.GaussianBlurEffect.prepareForVerticalBlur">
            <summary>
            prepares the Effect for performing a vertical blur
            </summary>
        </member>
        <member name="M:Nez.GaussianBlurEffect.setBlurEffectParameters(System.Single,System.Single,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            computes sample weightings and texture coordinate offsets for one pass of a separable gaussian blur filter.
            </summary>
        </member>
        <member name="M:Nez.GaussianBlurEffect.calculateSampleWeights">
            <summary>
            calculates the sample weights and passes them along to the shader
            </summary>
        </member>
        <member name="M:Nez.GaussianBlurEffect.computeGaussian(System.Single)">
            <summary>
            Evaluates a single point on the gaussian falloff curve.
            Used for setting up the blur filter weightings.
            </summary>
        </member>
        <member name="T:Nez.IRenderable">
            <summary>
            interface that when applied to a Component will register it to be rendered by the Scene Renderers. Implement this very carefully! Changing
            things like layerDepth/renderLayer/material need to update the Scene RenderableComponentList
            </summary>
        </member>
        <member name="P:Nez.IRenderable.bounds">
            <summary>
            the AABB that wraps this object. Used for camera culling.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Nez.IRenderable.enabled">
            <summary>
            whether this IRenderable should be rendered or not
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.IRenderable.layerDepth">
            <summary>
            standard Batcher layerdepth. 0 is in front and 1 is in back. Changing this value will trigger a sort of the renderableComponents
            list on the scene. 
            </summary>
            <value>The layer depth.</value>
        </member>
        <member name="P:Nez.IRenderable.renderLayer">
            <summary>
            lower renderLayers are in the front and higher are in the back, just like layerDepth but not clamped to 0-1. Note that this means
            higher renderLayers are sent to the Batcher first. An important fact when using the stencil buffer.
            </summary>
            <value>The render layer.</value>
        </member>
        <member name="P:Nez.IRenderable.material">
            <summary>
            used by Renderers to specify how this sprite should be rendered. If non-null, it is automatically disposed of when the Component
            is removed from the Entity.
            </summary>
            <value>The material.</value>
        </member>
        <member name="P:Nez.IRenderable.isVisible">
            <summary>
            the visibility of this Renderable. Changes in state end up calling the onBecameVisible/onBecameInvisible methods.
            </summary>
            <value><c>true</c> if is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Nez.IRenderable.getMaterial``1">
            <summary>
            helper for retrieving a Material subclass already casted
            </summary>
            <returns>The material.</returns>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Nez.IRenderable.isVisibleFromCamera(Nez.Camera)">
            <summary>
            returns true if the Renderables bounds intersects the Camera.bounds. Handles state switches for the isVisible flag. Use this method
            in your render method to see decide if you should render or not.
            </summary>
            <returns><c>true</c>, if visible from camera was ised, <c>false</c> otherwise.</returns>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Nez.IRenderable.render(Nez.Graphics,Nez.Camera)">
            <summary>
            called by a Renderer. The Camera can be used for culling and the Graphics instance to draw with.
            </summary>
            <param name="graphics">Graphics.</param>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Nez.IRenderable.debugRender(Nez.Graphics)">
            <summary>
            renders the bounds only if there is no collider. Always renders a square on the origin.
            </summary>
            <param name="graphics">Graphics.</param>
        </member>
        <member name="T:Nez.IRenderableComparer">
            <summary>
            Comparer for sorting IRenderables
            </summary>
        </member>
        <member name="F:Nez.SceneComponent.scene">
            <summary>
            the scene this SceneComponent is attached to
            </summary>
        </member>
        <member name="P:Nez.SceneComponent.enabled">
            <summary>
            true if the SceneComponent is enabled. Changes in state result in onEnabled/onDisable being called.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.SceneComponent.updateOrder">
            <summary>
            update order of the SceneComponents on this Scene
            </summary>
            <value>The order.</value>
        </member>
        <member name="M:Nez.SceneComponent.onEnabled">
            <summary>
            called when this SceneComponent is enabled
            </summary>
        </member>
        <member name="M:Nez.SceneComponent.onDisabled">
            <summary>
            called when the this SceneComponent is disabled
            </summary>
        </member>
        <member name="M:Nez.SceneComponent.onRemovedFromScene">
            <summary>
            called when this SceneComponent is removed from the Scene
            </summary>
        </member>
        <member name="M:Nez.SceneComponent.update">
            <summary>
            called each frame before the Entities are updated
            </summary>
        </member>
        <member name="M:Nez.SceneComponent.setEnabled(System.Boolean)">
            <summary>
            enables/disables this SceneComponent
            </summary>
            <returns>The enabled.</returns>
            <param name="isEnabled">If set to <c>true</c> is enabled.</param>
        </member>
        <member name="M:Nez.SceneComponent.setUpdateOrder(System.Int32)">
            <summary>
            sets the updateOrder for the SceneComponent and triggers a sort of the SceneComponents
            </summary>
            <returns>The update order.</returns>
            <param name="updateOrder">Update order.</param>
        </member>
        <member name="T:Nez.SubpixelFloat">
            <summary>
            simple helper class that manages a float value. It stores the value until the total accumulated is greater than 1. Once it exceeds
            1 the value will be added on to amount when update is called.
            
            General usage would be something like the following.
             - calculate your objects velocity however you normally would
             - multiply by deltaTime to keep it framerate independent
             - pass the calculated delta movement for this frame to the SubpixelFloat.update method for both x and y. This will result in deltaMove
               being rounded to an int and the SubpixelFloat will deal with accumulating the excess value.
            
               	var deltaMove = velocity * Time.deltaTime;
            	_x.update( ref deltaMove.X );
            	_y.update( ref deltaMove.Y );
            </summary>
        </member>
        <member name="M:Nez.SubpixelFloat.update(System.Single@)">
            <summary>
            increments remainder by amount, truncates the value to an int, stores off the new remainder and sets amount to the current value.
            </summary>
            <param name="amount">Amount.</param>
        </member>
        <member name="M:Nez.SubpixelFloat.reset">
            <summary>
            resets the remainder to 0. Useful when an object collides with an immovable object. In that case you will want to zero out the
            subpixel remainder since it is null and void due to the collision.
            </summary>
        </member>
        <member name="M:Nez.BoxCollider.#ctor">
            <summary>
            zero param constructor requires that a RenderableComponent be on the entity so that the collider can size itself when the
            entity is added to the scene.
            </summary>
        </member>
        <member name="M:Nez.BoxCollider.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            creates a BoxCollider and uses the x/y components as the localOffset
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.BoxCollider.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            creates a BoxCollider and uses the x/y components of the Rect as the localOffset
            </summary>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Nez.BoxCollider.setSize(System.Single,System.Single)">
            <summary>
            sets the size of the BoxCollider
            </summary>
            <returns>The size.</returns>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.BoxCollider.setWidth(System.Single)">
            <summary>
            sets the width of the BoxCollider
            </summary>
            <returns>The width.</returns>
            <param name="width">Width.</param>
        </member>
        <member name="M:Nez.BoxCollider.setHeight(System.Single)">
            <summary>
            sets the height of the BoxCollider
            </summary>
            <returns>The height.</returns>
            <param name="height">Height.</param>
        </member>
        <member name="M:Nez.CircleCollider.#ctor">
            <summary>
            zero param constructor requires that a RenderableComponent be on the entity so that the collider can size itself when the
            entity is added to the scene.
            </summary>
        </member>
        <member name="M:Nez.CircleCollider.#ctor(System.Single)">
            <summary>
            creates a CircleCollider with radius. Note that when specifying a radius if using a RenderableComponent on the Entity as well you
            will need to set the origin to align the CircleCollider. For example, if the RenderableComponent has a 0,0 origin and a CircleCollider
            with a radius of 1.5f * renderable.width is created you can offset the origin by just setting the originNormalied to the center
            divided by the scaled size:
            
            	entity.collider = new CircleCollider( moonTexture.Width * 1.5f );
                entity.collider.originNormalized = Vector2Extension.halfVector() / 1.5f;
            </summary>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.CircleCollider.setRadius(System.Single)">
            <summary>
            sets the radius for the CircleCollider
            </summary>
            <returns>The radius.</returns>
            <param name="radius">Radius.</param>
        </member>
        <member name="F:Nez.Collider.shape">
            <summary>
            the underlying Shape of the Collider
            </summary>
        </member>
        <member name="P:Nez.Collider.localOffset">
            <summary>
            localOffset is added to entity.position to get the final position for the collider geometry. This allows you to add multiple
            Colliders to an Entity and position them separately and also lets you set the point of rotation/scale.
            </summary>
        </member>
        <member name="P:Nez.Collider.absolutePosition">
            <summary>
            represents the absolute position to this Collider. It is entity.transform.position + localPosition - origin.
            </summary>
            <value>The absolute position.</value>
        </member>
        <member name="P:Nez.Collider.rotation">
            <summary>
            wraps Transform.rotation and returns 0 if this Collider does not rotate with the Entity else it returns Transform.rotation
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="F:Nez.Collider.isTrigger">
            <summary>
            if this collider is a trigger it will not cause collisions but it will still trigger events
            </summary>
        </member>
        <member name="F:Nez.Collider.physicsLayer">
            <summary>
            physicsLayer can be used as a filter when dealing with collisions. The Flags class has methods to assist with bitmasks.
            </summary>
        </member>
        <member name="F:Nez.Collider.collidesWithLayers">
            <summary>
            layer mask of all the layers this Collider should collide with when Entity.move methods are used. defaults to all layers.
            </summary>
        </member>
        <member name="F:Nez.Collider.shouldColliderScaleAndRotateWithTransform">
            <summary>
            if true, the Collider will scale and rotate following the Transform it is attached to
            </summary>
        </member>
        <member name="F:Nez.Collider.registeredPhysicsBounds">
            <summary>
            the bounds of this Collider when it was registered with the Physics system. Storing this allows us to always be able to
            safely remove the Collider from the Physics system even if it was moved before attempting to remove it.
            </summary>
        </member>
        <member name="F:Nez.Collider._isParentEntityAddedToScene">
            <summary>
            flag to keep track of if our Entity was added to a Scene
            </summary>
        </member>
        <member name="F:Nez.Collider._isColliderRegistered">
            <summary>
            flag to keep track of if we registered ourself with the Physics system
            </summary>
        </member>
        <member name="M:Nez.Collider.setLocalOffset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            localOffset is added to entity.position to get the final position for the collider. This allows you to add multiple Colliders
            to an Entity and position them separately.
            </summary>
            <returns>The local offset.</returns>
            <param name="offset">Offset.</param>
        </member>
        <member name="M:Nez.Collider.setShouldColliderScaleAndRotateWithTransform(System.Boolean)">
            <summary>
            if set to true, the Collider will scale and rotate following the Transform it is attached to
            </summary>
            <returns>The should collider scale and rotate with transform.</returns>
            <param name="shouldColliderScaleAndRotateWithTransform">If set to <c>true</c> should collider scale and rotate with transform.</param>
        </member>
        <member name="M:Nez.Collider.registerColliderWithPhysicsSystem">
            <summary>
            the parent Entity will call this at various times (when added to a scene, enabled, etc)
            </summary>
        </member>
        <member name="M:Nez.Collider.unregisterColliderWithPhysicsSystem">
            <summary>
            the parent Entity will call this at various times (when removed from a scene, disabled, etc)
            </summary>
        </member>
        <member name="M:Nez.Collider.overlaps(Nez.Collider)">
            <summary>
            checks to see if this shape overlaps any other Colliders in the Physics system
            </summary>
            <param name="collider">Collider.</param>
        </member>
        <member name="M:Nez.Collider.collidesWith(Nez.Collider,Nez.CollisionResult@)">
            <summary>
            checks to see if this Collider collides with collider. If it does, true will be returned and result will be populated
            with collision data
            </summary>
            <returns><c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
            <param name="collider">Collider.</param>
            <param name="result">Result.</param>
        </member>
        <member name="M:Nez.Collider.collidesWith(Nez.Collider,Microsoft.Xna.Framework.Vector2,Nez.CollisionResult@)">
            <summary>
            checks to see if this Collider with motion applied (delta movement vector) collides with collider. If it does, true will be
            returned and result will be populated with collision data.
            </summary>
            <returns><c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
            <param name="collider">Collider.</param>
            <param name="motion">Motion.</param>
            <param name="result">Result.</param>
        </member>
        <member name="M:Nez.Collider.collidesWithAny(Nez.CollisionResult@)">
            <summary>
            checks to see if this Collider collides with any other Colliders in the Scene. The first Collider it intersects will have its collision
            data returned in the CollisionResult.
            </summary>
            <returns><c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
            <param name="result">Result.</param>
        </member>
        <member name="M:Nez.Collider.collidesWithAny(Microsoft.Xna.Framework.Vector2@,Nez.CollisionResult@)">
            <summary>
            checks to see if this Collider with motion applied (delta movement vector) collides with any collider. If it does, true will be
            returned and result will be populated with collision data. Motion will be set to the maximum distance the Collider can travel
            before colliding.
            </summary>
            <returns><c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
            <param name="motion">Motion.</param>
            <param name="result">Result.</param>
        </member>
        <member name="T:Nez.PolygonCollider">
            <summary>
            Polygons should be defined in clockwise fashion.
            </summary>
        </member>
        <member name="M:Nez.PolygonCollider.#ctor(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            If the points are not centered they will be centered with the difference being applied to the localOffset.
            </summary>
            <param name="points">Points.</param>
        </member>
        <member name="T:Nez.Shadows.EndPoint">
            <summary>    
            The end-point of a segment    
            </summary>
        </member>
        <member name="F:Nez.Shadows.EndPoint.position">
            <summary>
            Position of the segment
            </summary>
        </member>
        <member name="F:Nez.Shadows.EndPoint.begin">
            <summary>
            If this end-point is a begin or end end-point
            of a segment (each segment has only one begin and one end end-point
            </summary>
        </member>
        <member name="F:Nez.Shadows.EndPoint.segment">
            <summary>
            The segment this end-point belongs to
            </summary>
        </member>
        <member name="F:Nez.Shadows.EndPoint.angle">
            <summary>
            The angle of the end-point relative to the location of the visibility test
            </summary>
        </member>
        <member name="T:Nez.Shadows.PolyLight">
            <summary>
            Point light that also casts shadows
            </summary>
        </member>
        <member name="F:Nez.Shadows.PolyLight.collidesWithLayers">
            <summary>
            layer mask of all the layers this light should interact with. defaults to all layers.
            </summary>
        </member>
        <member name="P:Nez.Shadows.PolyLight.radius">
            <summary>
            Radius of influence of the light
            </summary>
        </member>
        <member name="F:Nez.Shadows.PolyLight.power">
            <summary>
            Power of the light, from 0 (turned off) to 1 for maximum brightness        
            </summary>
        </member>
        <member name="M:Nez.Shadows.PolyLight.getOverlappedColliders">
            <summary>
            fetches any Colliders that should be considered for occlusion. Subclasses with a shape other than a circle can override this.
            </summary>
            <returns>The overlapped components.</returns>
        </member>
        <member name="M:Nez.Shadows.PolyLight.loadVisibilityBoundaries">
            <summary>
            override point for calling through to VisibilityComputer that allows subclasses to setup their visibility boundaries for
            different shaped lights.
            </summary>
        </member>
        <member name="M:Nez.Shadows.PolyLight.addVert(Microsoft.Xna.Framework.Vector2)">
            <summary>
            adds a vert to the list
            </summary>
            <param name="position">Position.</param>
            <param name="texCoord">Tex coordinate.</param>
        </member>
        <member name="T:Nez.Shadows.Segment">
            <summary>
            Represents an occluding line segment in the visibility mesh
            </summary>
        </member>
        <member name="F:Nez.Shadows.Segment.p1">
            <summary>
            First end-point of the segment
            </summary>
        </member>
        <member name="F:Nez.Shadows.Segment.p2">
            <summary>
            Second end-point of the segment
            </summary>
        </member>
        <member name="T:Nez.Shadows.VisibilityComputer">
            <summary>
            Class which computes a mesh that represents which regions are visibile from the origin point given a set of occluders. Usage is as
            follows:
            
            - call begin
            - add any occluders
            - call end to get the visibility polygon. When end is called all internal storage is cleared.
            
            based on: http://www.redblobgames.com/articles/visibility/ and http://roy-t.nl/index.php/2014/02/27/2d-lighting-and-shadows-preview/
            </summary>
        </member>
        <member name="F:Nez.Shadows.VisibilityComputer.lineCountForCircleApproximation">
            <summary>
            total number of lines that will be used when approximating a circle. Only a 180 degree hemisphere is needed so this will be the number
            of segments to approximate that hemisphere.
            </summary>
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.addColliderOccluder(Nez.Collider)">
            <summary>
            adds a Collider as an occluder for the PolyLight
            </summary>
            <param name="collider">Collider.</param>
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.addSquareOccluder(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Add a square shaped occluder
            </summary>        
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.addSquareOccluder(Nez.RectangleF)">
            <summary>
            Add a square shaped occluder
            </summary>        
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.addCircleOccluder(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            adds a circle shaped occluder
            </summary>
            <param name="position">Position.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.addLineOccluder(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Add a line shaped occluder
            </summary>        
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.clearOccluders">
            <summary>
            Remove all occluders
            </summary>
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.begin(Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            prepares the computer for calculating the current poly light
            </summary>
            <param name="origin">Origin.</param>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.end">
            <summary>
            Computes the visibility polygon and returns the vertices of the triangle fan (minus the center vertex). Returned List is from the
            ListPool.
            </summary>        
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.loadRectangleBoundaries">
            <summary>
            Helper function to construct segments along the outside perimiter in order to limit the radius of the light
            </summary>        
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.updateSegments">
            <summary>
            Processes segments so that we can sort them later
            </summary>
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.isSegmentInFrontOf(Nez.Shadows.Segment,Nez.Shadows.Segment,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Helper: do we know that segment a is in front of b? Implementation not anti-symmetric (that is to say,
            isSegmentInFrontOf(a, b) != (!isSegmentInFrontOf(b, a)). Also note that it only has to work in a restricted set of cases
            in the visibility algorithm; I don't think it handles all cases. See http://www.redblobgames.com/articles/visibility/segment-sorting.html
            </summary>
            <returns><c>true</c>, if in front of was segmented, <c>false</c> otherwise.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
            <param name="relativeTo">Relative to.</param>
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.lineLineIntersection(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Computes the intersection point of the line p1-p2 with p3-p4
            </summary>        
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.isLeftOf(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns if the point is 'left' of the line p1-p2
            </summary>        
        </member>
        <member name="M:Nez.Shadows.VisibilityComputer.interpolate(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Returns a slightly shortened version of the vector:
            p * (1 - f) + q * f
            </summary>        
        </member>
        <member name="T:Nez.Shadows.PolySpotLight">
            <summary>
            WIP: still has some odd rendering bugs that need to get worked out
            poly spot light. Works just like a PolyLight except it is limited to a cone shape (spotAngle).
            </summary>
        </member>
        <member name="P:Nez.Shadows.PolySpotLight.spotAngle">
            <summary>
            the angle of the light's spotlight cone in degrees. Defaults to 45.
            </summary>
            <value>The spot angle.</value>
        </member>
        <member name="M:Nez.Shadows.PolySpotLight.recalculatePolyPoints">
            <summary>
            calculates the points needed to encompass the spot light. The points generate a polygon which is used for overlap detection.
            </summary>
        </member>
        <member name="T:Nez.PolyLightPostProcessor">
            <summary>
            post processor to assist with making blended poly lights. Usage is as follows:
            - render all sprite lights with a separate Renderer to a RenderTarget. The clear color of the Renderer is your ambient light color.
            - render all normal objects in standard fashion
            - add this PostProcessor with the RenderTarget from your lights Renderer
            </summary>
        </member>
        <member name="P:Nez.PolyLightPostProcessor.multiplicativeFactor">
            <summary>
            multiplicative factor for the blend of the base and light render targets. Defaults to 1.
            </summary>
            <value>The multiplicative factor.</value>
        </member>
        <member name="P:Nez.PolyLightPostProcessor.enableBlur">
            <summary>
            enables/disables a gaussian blur of the light texture before it is combined with the scene render
            </summary>
            <value><c>true</c> if enable blur; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Nez.PolyLightPostProcessor.blurRenderTargetScale">
            <summary>
            scale of the internal RenderTargets used for the blur. For high resolution renders a half sized RT is usually more than enough.
            Defaults to 0.5.
            </summary>
        </member>
        <member name="P:Nez.PolyLightPostProcessor.blurAmount">
            <summary>
            amount to blur. A range of 0.5 - 6 works well. Defaults to 2.
            </summary>
            <value>The blur amount.</value>
        </member>
        <member name="M:Nez.PolyLightPostProcessor.updateBlurEffectDeltas">
            <summary>
            updates the GaussianBlurEffect with the new vertical and horizontal deltas after a back buffer size or blurRenderTargetScale change
            </summary>
        </member>
        <member name="T:System.Collections.Generic.IPriorityQueue`1">
            <summary>
            The IPriorityQueue interface.  This is mainly here for purists, and in case I decide to add more implementations later.
            For speed purposes, it is actually recommended that you *don't* access the priority queue through this interface, since the JIT can
            (theoretically?) optimize method calls from concrete-types slightly better.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IPriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            See implementation for how duplicates are handled.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IPriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IPriorityQueue`1.Clear">
            <summary>
            Removes every node from the queue.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IPriorityQueue`1.Contains(`0)">
            <summary>
            Returns whether the given node is in the queue.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IPriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IPriorityQueue`1.UpdatePriority(`0,System.Int32)">
            <summary>
            Call this method to change the priority of a node.  
            </summary>
        </member>
        <member name="P:System.Collections.Generic.IPriorityQueue`1.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.IPriorityQueue`1.Count">
            <summary>
            Returns the number of nodes in the queue.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SimplePriorityQueue`1.GetExistingNode(`0)">
            <summary>
            Given an item of type T, returns the exist SimpleNode in the queue
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SimplePriorityQueue`1.Count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SimplePriorityQueue`1.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            Throws an exception when the queue is empty.
            O(1)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Clear">
            <summary>
            Removes every node from the queue.
            O(n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Contains(`0)">
            <summary>
            Returns whether the given item is in the queue.
            O(n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            If queue is empty, throws an exception
            O(log n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            This queue automatically resizes itself, so there's no concern of the queue becoming 'full'.
            Duplicates are allowed.
            O(log n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Remove(`0)">
            <summary>
            Removes an item from the queue.  The item does not need to be the head of the queue.  
            If the item is not in the queue, an exception is thrown.  If unsure, check Contains() first.
            If multiple copies of the item are enqueued, only the first one is removed. 
            O(n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SimplePriorityQueue`1.UpdatePriority(`0,System.Int32)">
            <summary>
            Call this method to change the priority of an item.
            Calling this method on a item not in the queue will throw an exception.
            If the item is enqueued multiple times, only the first one will be updated.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to update all of them, please wrap your items in a wrapper class so they can be distinguished).
            O(n)
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Deque`1">
            <summary>
            sourced from: https://github.com/tejacques/Deque
            A genetic Deque class. It can be thought of as a double-ended queue, hence Deque. This allows for
            an O(1) AddFront, AddBack, RemoveFront, RemoveBack. The Deque also has O(1) indexed lookup, as it is backed
            by a circular array.
            </summary>
            <typeparam name="T">
            The type of objects to store in the deque.
            </typeparam>
        </member>
        <member name="F:System.Collections.Generic.Deque`1.defaultCapacity">
            <summary>
            The default capacity of the deque.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Deque`1.startOffset">
            <summary>
            The first element offset from the beginning of the data array.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Deque`1.buffer">
            <summary>
            The circular array holding the items.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.#ctor">
            <summary>
            Creates a new instance of the Deque class with
            the default capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the Deque class with
            the specified capacity.
            </summary>
            <param name="capacity">The initial capacity of the Deque.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new instance of the Deque class with the elements
            from the specified collection.
            </summary>
            <param name="collection">The co</param>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.Capacity">
            <summary>
            Gets or sets the total number of elements
            the internal array can hold without resizing.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.IsFull">
            <summary>
            Gets whether or not the Deque is filled to capacity.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.IsEmpty">
            <summary>
            Gets whether or not the Deque is empty.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Deque.
            </summary>
            <returns>
            An iterator that can be used to iterate through the Deque.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Deque.
            </summary>
            <returns>
            An iterator that can be used to iterate through the Deque.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the Deque is read-only.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.Count">
            <summary>
            Gets the number of elements contained in the Deque.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Add(`0)">
            <summary>
            Adds an item to the Deque.
            </summary>
            <param name="item">The object to add to the Deque.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Clear">
            <summary>
            Removes all items from the Deque.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Contains(`0)">
            <summary>
            Determines whether the Deque contains a specific value.
            </summary>
            <param name="item">The object to locate in the Deque.</param>
            <returns>
            true if item is found in the Deque; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of the Deque to a System.Array,
                starting at a particular System.Array index.
            </summary>
            <param name="array">
                The one-dimensional System.Array that is the destination of
                the elements copied from the Deque. The System.Array must
                have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                arrayIndex is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source Deque is greater than
                the available space from arrayIndex to the end of the
                destination array.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the Deque.
            </summary>
            <param name="item">The object to remove from the Deque.</param>
            <returns>
                true if item was successfully removed from the Deque;
                otherwise, false. This method also returns false if item
                is not found in the original
            </returns>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
                The zero-based index of the element to get or set.
            </param>
            <returns>The element at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is not a valid index in this deque
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the Deque at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert into the Deque.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the Deque.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the deque.
            </summary>
            <param name="item">The object to locate in the deque.</param>
            <returns>
            The index of the item if found in the deque; otherwise, -1.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the Deque.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddFront(`0)">
            <summary>
            Adds the provided item to the front of the Deque.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddBack(`0)">
            <summary>
            Adds the provided item to the back of the Deque.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveFront">
            <summary>
            Removes an item from the front of the Deque and returns it.
            </summary>
            <returns>The item at the front of the Deque.</returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveBack">
            <summary>
            Removes an item from the back of the Deque and returns it.
            </summary>
            <returns>The item in the back of the Deque.</returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddFrontRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the front of the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddFrontRange(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Adds count items from a collection of items
            from a specified index to the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
            <param name="fromIndex">
            The index in the collection to begin adding from.
            </param>
            <param name="count">
            The number of items in the collection to add.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddBackRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the back of the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddBackRange(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Adds count items from a collection of items
            from a specified index to the back of the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
            <param name="fromIndex">
            The index in the collection to begin adding from.
            </param>
            <param name="count">
            The number of items in the collection to add.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of items into the Deque
            at the specified index.
            </summary>
            <param name="index">
            The index in the Deque to insert the collection.
            </param>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Inserts count items from a collection of items from a specified
            index into the Deque at the specified index.
            </summary>
            <param name="index">
            The index in the Deque to insert the collection.
            </param>
            <param name="collection">The collection to add.</param>
            <param name="fromIndex">
            The index in the collection to begin adding from.
            </param>
            <param name="count">
            The number of items in the colleciton to add.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
                Removes a range of elements from the view.
            </summary>
            <param name="index">
                The index into the view at which the range begins.
            </param>
            <param name="count">
                The number of elements in the range. This must be greater
                than 0 and less than or equal to <see cref="P:System.Collections.Generic.Deque`1.Count"/>.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Get(System.Int32)">
            <summary>
            Gets the value at the specified index of the Deque
            </summary>
            <param name="index">The index of the Deque.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Set(System.Int32,`0)">
            <summary>
            Sets the value at the specified index of the
            Deque to the given item.
            </summary>
            <param name="index">The index of the deque to set the item.</param>
            <param name="item">The item to set at the specified index.</param>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueueNode.Priority">
            <summary>
            The Priority to insert this node at.  Must be set BEFORE adding a node to the queue
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueueNode.InsertionIndex">
            <summary>
            <b>Used by the priority queue - do not edit this value.</b>
            Represents the order the node was inserted in
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueueNode.QueueIndex">
            <summary>
            <b>Used by the priority queue - do not edit this value.</b>
            Represents the current position in the queue
            </summary>
        </member>
        <member name="T:System.Collections.Generic.PriorityQueue`1">
            <summary>
            An implementation of a min-Priority Queue using a heap.  Has O(1) .Contains()!
            See https://github.com/BlueRaja/High-Speed-Priority-Queue-for-C-Sharp/wiki/Getting-Started for more information
            </summary>
            <typeparam name="T">The values in the queue.  Must extend the FastPriorityQueueNode class</typeparam>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`1.Count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`1.MaxSize">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.  O(1)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Clear">
            <summary>
            Removes every node from the queue.
            O(n) (So, don't do this often!)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Contains(`0)">
            <summary>
            Returns (in O(1)!) whether the given node is in the queue.  O(1)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            If the queue is full, the result is undefined.
            If the node is already enqueued, the result is undefined.
            O(log n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            If queue is empty, result is undefined
            O(log n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            O(n)
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`1.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            If the queue is empty, behavior is undefined.
            O(1)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.UpdatePriority(`0,System.Int32)">
            <summary>
            This method must be called on a node every time its priority changes while it is in the queue.  
            <b>Forgetting to call this method will result in a corrupted queue!</b>
            Calling this method on a node not in the queue results in undefined behavior
            O(log n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            If the node is not in the queue, the result is undefined.  If unsure, check Contains() first
            O(log n)
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`1.IsValidQueue">
            <summary>
            <b>Should not be called in production code.</b>
            Checks to make sure the queue is still in a valid state.  Used for testing/debugging the queue.
            </summary>
        </member>
        <member name="T:Nez3D.Model3D">
            <summary>
            Model3D represents a normal 3D Model but it is rendered by a standard Nez Camera on the same plane as all the 2D sprites. For this
            reason, the Model is inflated by a scale of 80 by default. This keeps the Model at approximately the same scale as 2D sprites. You
            can adjust this via the Vector3s present in this class (which replace the 2D Transform) and the 3D Camera fields (which are all
            suffixed with "3D").
            </summary>
        </member>
    </members>
</doc>
